queue_on_teleport([[
    repeat
        task.wait()
    until game:IsLoaded()
    print("Nice Cock")
    loadstring(game:HttpGet('https://raw.githubusercontent.com/singlebladez/lt2-demo/main/Spooky'))()
]])

local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"
local _place = game.PlaceId
local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"

function ListServers(cursor)
    local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
    return Http:JSONDecode(Raw)
end

function TeleportToNewServer()
    local Server, Next
    repeat
        local Servers = ListServers(Next)
        Server = Servers.data[1]
        Next = Servers.nextPageCursor
    until Server

    TPS:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer)
end

local function CalculateTreeUnits(Tree)
    local Units = 0
    for _, WoodSection in next, Tree:GetChildren() do
        if tostring(WoodSection) == "WoodSection" then
            Units += (WoodSection.Size.X * WoodSection.Size.Y * WoodSection.Size.Z)
        end
    end
    return math.round(math.floor(Units * 100) / 100)
end

local Tree
local unitThreshold = 100

while true do
    Tree = nil

    for i, v in pairs(workspace:GetChildren()) do
        if v.Name == "TreeRegion" then
            for k, l in pairs(v:GetChildren()) do
                if l:FindFirstChild("TreeClass") and l:FindFirstChild("WoodSection") and l:FindFirstChild("Owner") then
                    if (l.TreeClass.Value == "Spooky" or l.TreeClass.Value == "SpookyNeon") and l.Owner.Value == nil then
                        local treeUnits = CalculateTreeUnits(l)

                        -- Only consider trees that meet the threshold
                        if treeUnits >= unitThreshold then
                            Tree = l
                            break
                        end
                    end
                end
            end
        end
    end

    if Tree == nil then
        game.ReplicatedStorage.Notices.SendUserNotice:Fire("No suitable Spooky Wood found. Hopping to a new server...")
        wait(2)
        TeleportToNewServer()
    else
        local treeUnits = CalculateTreeUnits(Tree)

        if treeUnits >= unitThreshold then
            game.ReplicatedStorage.Notices.SendUserNotice:Fire("Spooky Tree Found with " .. treeUnits .. " units!")

            repeat
                wait()

                if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Tree["WoodSection"].CFrame
                    game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(Tree)
                end

            until Tree["Owner"].Value == game.Players.LocalPlayer

            game.ReplicatedStorage.Notices.SendUserNotice:Fire("Claimed " .. Tree.TreeClass.Value .. " Tree with " .. treeUnits .. " units!")
            break
        else
            game.ReplicatedStorage.Notices.SendUserNotice:Fire("Tree found, but only " .. treeUnits .. " units, hopping...")
            wait(2)
            TeleportToNewServer()
        end
    end
end
