-- Yes there is alot of messy code in here and a bunch of practice shit


--[[
  Nightfall - Information & Legal Notice
  Permission To Use Of Nightfall GUI Source Code, Copy, Modify, And Distribute This GUI And Its Documentation For Education And Research, Without Fee Or A Signed Agreement, Is Granted,-
  Provided That This And The Following Two Paragraphs Appear In All Copies, Modifications, And Distributions. (Jan. 2023)

  This GUI Is Offered As-Is and As-Available, And Makes No Representations Or Warranties Of Any Kind Concerning This Material, Whether Express, Implied, Statutory, Or Other.
  This Includes, Without Limitation, Warranties Of Title, Merchantability, Fitness For A Particular Purpose, Non-Infringement, Absence Of Latent Or Other Defects, Accuracy,-
  Or The Presence Or Absence Of Errors, Whether Or Not Known Or Discoverable.

  To The Extent Possible, In No Event Shall The Author Be Liable To You On Any Legal Theory (Including, Without Limitation, Negligence)
  Or Otherwise For Any Direct, Indirect, Special, Incidental, Consequential, Punitive, Exemplary,-
  Or Any Other Losses, Costs, Expenses, Or Damages (Including, But Not Limited To, Loss Of Use, Data, Profits, Or Business Interruption)-
  However Caused, And On Any Theory Of Liability, Whether In Contract, Strict Liability, Or Tort (Including Negligence Or Otherwise)-
  Arising Out Of This Public Release, Or Use Of This GUI, Even If The User Has Been Advised Of The Possibility Of Such Losses, Costs, Expenses, Or Damages.








To Do:
- TP To base - (local player name is Stop Spectating)
- fix abort button
- fix bring tree (lone cave)
- add listener to maxland dupe so binds dont trigger
- some other shit i cant recall rn



Bugs:
- abort button
- bring tree (lone cave)



Ideas:
- Autofarm trees (cut x sawmill x sell)
- Add misc buy to autobuy for specials
- add click to sell
- add another item sorter that sorts the axes in cool shapes like circles, stars, custom input letters from textbox
- UI Themes
- plot materials as a dropdown
- finish guessing game
- add load ready time tracker to tell when you can load base




Suggestions:
- get accurate base load time for irl time
- add a speed slider to control the rate to tp for sorters
- click to sell planks/logs 
- add load ready time tracker to tell when you can load base
- make realistic roads a toggle
- make better water color a toggle
- fix sprint removal after death




After release:
- get advertisments
- get yt videos reviews/showcases
- grown server




Next update:
- add join custom private server (textbox / job id idea)
- add more to Item sorter
- rewrite code & use less Locals & more tables
- give max land to select player
- Clientsided custom car colors
- Car speed slider
- Car fly (idk how but Iâ€™ll try)




Off topic but curious to do:
- add games to nightfall, (guessing game, snake, Pac-Man, Tetris etc) 
- fix Guessing game




Beta test report 3/1/23: - (@pandato#2061)
1. all option in locals working
2.all option in world working
3. all options in teleport working
4. all option in player working
5. all option in bases working 
6. all option in base sorter working
7.dupe func working 
8. wood funct working smoothly 
9. vehicle and misc work
10. fun and grief working
11. all options in server working
12. rest of the options working
analysis: it work for free executors
]]

























-- gap due to streaming 
------------------------------------------------------------------------------
--  Credits To Silent For Making This UI Lib, p.s vector winning
-- Credit to Respective Developers for their work
-- Solo Project
local library = {flags = {}, destroyed = false, toggled = true, opentab = nil, currentnoti = nil, tabs = {}}
local mouse = game:GetService"Players".LocalPlayer:GetMouse()

local themes = {-- find decent color schemes and try to make presets via dropdown
-- Default
main = Color3.fromRGB(35, 35, 35),
secondary = Color3.fromRGB(40, 40, 40), 
accent = Color3.fromRGB(31, 31, 31), 
textcolor = Color3.fromRGB(225, 225, 225),

-- Blue Theme
--main = Color3.fromRGB(0, 66, 198), -- a darker blue
--secondary = Color3.fromRGB(0, 33, 99), -- a darker shade of blue
--accent = Color3.fromRGB(0, 66, 198), -- a brighter, more vibrant blue
--textcolor = Color3.fromRGB(255, 255, 255), -- white text for contrast

-- wolf grey > meh
--main = Color3.fromRGB(228, 228, 228),
--secondary = Color3.fromRGB(187, 187, 187),
--accent = Color3.fromRGB(133, 133, 133),
--textcolor = Color3.fromRGB(51, 51, 51),

-- water melon > meh
--main = Color3.fromRGB(234, 56, 73),
--secondary = Color3.fromRGB(49, 117, 50),
--accent = Color3.fromRGB(42, 137, 43),
--textcolor = Color3.fromRGB(255, 255, 255),


-- Cherry Blossom > fav
--main = Color3.fromRGB(255, 179, 153),
--secondary = Color3.fromRGB(255, 225, 187),
--accent = Color3.fromRGB(255, 102, 102),
--textcolor = Color3.fromRGB(0, 0, 0),


-- Oceanic > meh
--main = Color3.fromRGB(0, 128, 128),
--secondary = Color3.fromRGB(44, 148, 151),
--accent = Color3.fromRGB(0, 128, 128),
--textcolor = Color3.fromRGB(255, 255, 255),

-- retro (puirp / orange < okay
--main = Color3.fromRGB(251, 158, 17),
--secondary = Color3.fromRGB(109, 33, 79),
--accent = Color3.fromRGB(109, 33, 79),
--textcolor = Color3.fromRGB(255, 255, 255),

-- nature > meh
--main = Color3.fromRGB(49, 83, 70),
--secondary = Color3.fromRGB(110, 143, 119),
--accent = Color3.fromRGB(212, 212, 175),
--textcolor = Color3.fromRGB(255, 255, 255),

-- Bubblegum > like
--main = Color3.fromRGB(255, 219, 238),
--secondary = Color3.fromRGB(255, 170, 204),
--accent = Color3.fromRGB(153, 102, 153),
--textcolor = Color3.fromRGB(0, 0, 0),

-- blue sky > okay
--main = Color3.fromRGB(81, 141, 212),
--secondary = Color3.fromRGB(129, 182, 238),
--accent = Color3.fromRGB(166, 215, 255),
--textcolor = Color3.fromRGB(255, 255, 255),

-- ice blue > like
--main = Color3.fromRGB(133, 196, 212),
--secondary = Color3.fromRGB(181, 226, 239),
--accent = Color3.fromRGB(207, 240, 253),
--textcolor = Color3.fromRGB(0, 0, 0),

-- neon green > okay
--main = Color3.fromRGB(0, 0, 0),
--secondary = Color3.fromRGB(17, 17, 17),
--accent = Color3.fromRGB(57, 255, 20),
--textcolor = Color3.fromRGB(255, 255, 255),

-- black/blue style > okay
--main = Color3.fromRGB(0, 0, 0),
--secondary = Color3.fromRGB(17, 17, 17),
--accent = Color3.fromRGB(0, 120, 215),
--textcolor = Color3.fromRGB(255, 255, 255),

-- red/black style > okay
--main = Color3.fromRGB(0, 0, 0),
--secondary = Color3.fromRGB(25, 25, 25),
--accent = Color3.fromRGB(237, 28, 36),
--textcolor = Color3.fromRGB(255, 255, 255),

-- midnight sky > okay
--main = Color3.fromRGB(16, 22, 26),
--secondary = Color3.fromRGB(36, 49, 60),
--accent = Color3.fromRGB(84, 153, 199),
--textcolor = Color3.fromRGB(255, 255, 255),

-- lemonade stand > okay kinda exotic
--main = Color3.fromRGB(254, 222, 0),
--secondary = Color3.fromRGB(254, 167, 0),
--accent = Color3.fromRGB(254, 78, 0),
--textcolor = Color3.fromRGB(0, 0, 0),

-- easter > like
--main = Color3.fromRGB(255, 229, 224),
--secondary = Color3.fromRGB(201, 225, 234),
--accent = Color3.fromRGB(228, 221, 240),
--textcolor = Color3.fromRGB(0, 0, 0),
}

isswitching = false
function SwitchTab(info)
	if isswitching then return end
	if library.opentab == nil then
		info.Visible = true
		library.opentab = info
		return
	end
	isswitching = true
	library.opentab.Visible = false
	info.Visible = true
	library.opentab = info
	isswitching = false
end

function drag(frame, hold) -- Skidded from Kiriot or Wally ~V3rmillion~
	if not hold then
		hold = frame
	end
	local dragging
	local dragInput
	local dragStart
	local startPos

	local function update(input)
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	hold.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	game:GetService("UserInputService").InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

function library:Create(title, gamename)
	local ColdAsIce = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local MainC = Instance.new("UICorner")
	local Top = Instance.new("Frame")
	local MainC_2 = Instance.new("UICorner")
	local Title = Instance.new("TextLabel")
	local GameTitle = Instance.new("TextLabel")
	local TopBar = Instance.new("Frame")
	local MainC_3 = Instance.new("UICorner")
	local Side = Instance.new("Frame")
	local MainC_4 = Instance.new("UICorner")
	local TabHolder = Instance.new("ScrollingFrame")
	local SideBar = Instance.new("Frame")
	local TabHolderLL = Instance.new("UIListLayout")
	local TabHolderP = Instance.new("UIPadding")


	ColdAsIce.Name = "ColdAsIce"
	ColdAsIce.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
	ColdAsIce.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	Main.Name = "Main"
	Main.Parent = ColdAsIce
	Main.BackgroundColor3 = themes.main
	Main.BorderSizePixel = 0
	Main.Position = UDim2.new(0.11157456, 0, 0.287621379, 0)
	Main.Size = UDim2.new(0, 564, 0, 350)

	MainC.Name = "MainC"
	MainC.Parent = Main

	Top.Name = "Top"
	Top.Parent = Main
	Top.BackgroundColor3 = themes.accent
	Top.BorderSizePixel = 0
	Top.Size = UDim2.new(0, 564, 0, 52)
	Top.ZIndex = 3

	MainC_2.Name = "MainC"
	MainC_2.Parent = Top

	Title.Name = "Title"
	Title.Parent = Top
	Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Title.BackgroundTransparency = 1.000
	Title.Position = UDim2.new(0.159999982, 0, 0.1120001, 0)
	Title.Size = UDim2.new(0, 382, 0, 24)
	Title.ZIndex = 3
	Title.Font = Enum.Font.GothamMedium
	Title.Text = title
	Title.TextColor3 = themes.textcolor
	Title.TextSize = 20.000

	GameTitle.Name = "GameTitle"
	GameTitle.Parent = Top
	GameTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	GameTitle.BackgroundTransparency = 1.000
	GameTitle.Position = UDim2.new(0.24499999, 0, 0.589999855, 0)
	GameTitle.Size = UDim2.new(0, 286, 0, 14)
	GameTitle.ZIndex = 3
	GameTitle.Font = Enum.Font.Gotham
	GameTitle.Text = gamename
	GameTitle.TextColor3 = themes.textcolor
	GameTitle.TextSize = 12.000

	TopBar.Name = "TopBar"
	TopBar.Parent = Main
	TopBar.BackgroundColor3 = themes.accent
	TopBar.BorderSizePixel = 0
	TopBar.Position = UDim2.new(0, 0, 0.128571436, 0)
	TopBar.Size = UDim2.new(0, 564, 0, 7)
	TopBar.ZIndex = 2

	MainC_3.CornerRadius = UDim.new(0, 5)
	MainC_3.Name = "MainC"
	MainC_3.Parent = TopBar

	Side.Name = "Side"
	Side.Parent = Main
	Side.BackgroundColor3 = themes.secondary
	Side.BorderSizePixel = 0
	Side.Position = UDim2.new(0, 0, 0.128571436, 0)
	Side.Size = UDim2.new(0, 123, 0, 304)

	MainC_4.Name = "MainC"
	MainC_4.Parent = Side

	TabHolder.Name = "TabHolder"
	TabHolder.Parent = Side
	TabHolder.Active = true
	TabHolder.BackgroundColor3 = themes.secondary
	TabHolder.BorderSizePixel = 0
	TabHolder.Position = UDim2.new(0, 0, 0.0427631587, 0)
	TabHolder.Size = UDim2.new(0, 123, 0, 282)
	TabHolder.ScrollBarThickness = 0
	TabHolder.CanvasSize = UDim2.new(0,0,0,0)

	SideBar.Name = "SideBar"
	SideBar.Parent = Main
	SideBar.BackgroundColor3 = themes.secondary
	SideBar.BorderSizePixel = 0
	SideBar.Position = UDim2.new(0.21808511, 0, 0.128571436, 0)
	SideBar.Size = UDim2.new(0, 6, 0, 304)

	TabHolderLL.Name = "TabHolderLL"
	TabHolderLL.Parent = TabHolder
	TabHolderLL.SortOrder = Enum.SortOrder.LayoutOrder
	TabHolderLL.Padding = UDim.new(0, 10)

	TabHolderP.Name = "TabHolderP"
	TabHolderP.Parent = TabHolder
	TabHolderP.PaddingLeft = UDim.new(0, 5)
	TabHolderP.PaddingTop = UDim.new(0, 5)

	drag(Main, Top)

	TabHolderLL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
		TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolderLL.AbsoluteContentSize.Y + 30)
	end)

	function library:Destroy()
		if 	library.destroyed then return end
		ColdAsIce:Destroy()
		library.destroyed = true
	end

	function library:Toggle()
		ColdAsIce.Enabled = not library.toggled
		library.toggled = not library.toggled
	end

	function library:ProgressBar(title,max)
		assert(title,"a title is required to create a progress notification")
		assert(max,"a maximum number is required")

		if library.currentnoti ~= nil then
			library.currentnoti:Destroy()
		end

		local ProgressBar = Instance.new("Frame")
		local ProgressBarC = Instance.new("UICorner")
		local Title = Instance.new("TextLabel")
		local Title_2 = Instance.new("TextLabel")
		local Inner = Instance.new("Frame")
		local InnerC = Instance.new("UICorner")
		local Bar = Instance.new("Frame")
		local BarC = Instance.new("UICorner")

		ProgressBar.Name = "ProgressBar"
		ProgressBar.Parent = ColdAsIce
		ProgressBar.BackgroundColor3 = themes.main
		ProgressBar.BorderSizePixel = 0
		ProgressBar.ClipsDescendants = true
		ProgressBar.Position = UDim2.new(0.00199999916, 0, 0.930000007, 0)
		ProgressBar.Size = UDim2.new(0, 268, 0, 49)

		ProgressBarC.CornerRadius = UDim.new(0, 5)
		ProgressBarC.Name = "ProgressBarC"
		ProgressBarC.Parent = ProgressBar

		Title.Name = "Title"
		Title.Parent = ProgressBar
		Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Title.BackgroundTransparency = 1.000
		Title.BorderSizePixel = 0
		Title.Size = UDim2.new(0, 186, 0, 24)
		Title.Font = Enum.Font.GothamBold
		Title.Text = "  "..title
		Title.TextColor3 = themes.textcolor
		Title.TextSize = 13.000
		Title.TextWrapped = true
		Title.TextXAlignment = Enum.TextXAlignment.Left

		Title_2.Name = "Title_2"
		Title_2.Parent = ProgressBar
		Title_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Title_2.BackgroundTransparency = 1.000
		Title_2.BorderSizePixel = 0
		Title_2.Position = UDim2.new(0.203164175, 0, 0.10204082, 0)
		Title_2.Size = UDim2.new(0, 207, 0, 13)
		Title_2.Font = Enum.Font.GothamBold
		Title_2.Text = "1/50"
		Title_2.TextColor3 = themes.textcolor
		Title_2.TextSize = 13.000
		Title_2.TextWrapped = true
		Title_2.TextXAlignment = Enum.TextXAlignment.Right

		Inner.Name = "Inner"
		Inner.Parent = ProgressBar
		Inner.BackgroundColor3 = themes.secondary
		Inner.BorderSizePixel = 0
		Inner.Position = UDim2.new(0.0174626596, 0, 0.617408574, 0)
		Inner.Size = UDim2.new(0, 257, 0, 5)
		Inner.ZIndex = 3

		InnerC.CornerRadius = UDim.new(1, 0)
		InnerC.Name = "InnerC"
		InnerC.Parent = Inner

		Bar.Name = "Bar"
		Bar.Parent = Inner
		Bar.BackgroundColor3 = themes.textcolor
		Bar.BorderSizePixel = 0
		Bar.Size = UDim2.new(0, 0, 0, 5)
		Bar.ZIndex = 3

		BarC.CornerRadius = UDim.new(1, 0)
		BarC.Name = "BarC"
		BarC.Parent = Bar

		library.currentnoti = ProgressBar

		drag(ProgressBar)

		local function Close()
			game:GetService('TweenService'):Create(Inner, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
			game:GetService('TweenService'):Create(Bar, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
			game:GetService('TweenService'):Create(Title, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
			game:GetService('TweenService'):Create(Title_2, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
			game:GetService('TweenService'):Create(ProgressBar, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
			task.wait(0.25)
			ProgressBar:Destroy()
		end

		Title_2:GetPropertyChangedSignal("Text"):Connect(function()
			if Title_2.Text == tostring(max).."/"..tostring(max) then
				Close()
				library.currentnoti = nil
			end
		end)

		local funcs = {
			Update = function(self,value)
				local newvalue = (string.split(Title_2.Text,"/")[1]) + 1
				local percent = newvalue/max
				local dec = math.floor(percent * 100)
				percent = math.clamp(percent, 0, 1)
				Bar:TweenSize(UDim2.new(percent, 0, 0, 5),"Out","Sine",.3,false)
				Title_2.Text = tostring(newvalue).."/"..max
			end
		}
		return funcs
	end

	function library:Notify(title, msg, options, callback)
		local callback = callback or function() end
		local options = options or false
		local textSize = game:GetService("TextService"):GetTextSize(msg, 13, Enum.Font.GothamMedium, Vector2.new(math.huge, 16))
		assert(title,"a title is required")
		assert(msg,"a message is requied")

		if library.currentnoti ~= nil then
			library.currentnoti:Destroy()
		end

		local NotifyMain = Instance.new("Frame")
		local NotifyMainC = Instance.new("UICorner")
		local Title = Instance.new("TextLabel")
		local Message = Instance.new("TextLabel")
		local Accept = Instance.new("ImageButton")
		local Decline = Instance.new("ImageButton")

		NotifyMain.Name = "NotifyMain"
		NotifyMain.Parent = ColdAsIce
		NotifyMain.BackgroundColor3 = themes.main
		NotifyMain.BorderSizePixel = 0
		NotifyMain.ClipsDescendants = true
		NotifyMain.Position = UDim2.new(0.00199999916, 0, 0.930000007, 0)
		NotifyMain.Size = UDim2.new(0, 258, 0, 53)

		NotifyMainC.CornerRadius = UDim.new(0, 3)
		NotifyMainC.Name = "NotifyMainC"
		NotifyMainC.Parent = NotifyMain

		Title.Name = "Title"
		Title.Parent = NotifyMain
		Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Title.BackgroundTransparency = 1.000
		Title.BorderSizePixel = 0
		Title.Size = UDim2.new(0, 336, 0, 24)
		Title.Font = Enum.Font.GothamBold
		Title.Text = "  "..title
		Title.TextColor3 = themes.textcolor
		Title.TextSize = 13.000
		Title.TextWrapped = true
		Title.TextXAlignment = Enum.TextXAlignment.Left

		Message.Name = "Message"
		Message.Parent = NotifyMain
		Message.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Message.BackgroundTransparency = 1.000
		Message.BorderSizePixel = 0
		Message.Position = UDim2.new(0, 0, 0.538855195, 0)
		Message.Size = UDim2.new(0, 336, 0, 16)
		Message.Font = Enum.Font.GothamMedium
		Message.Text = "  "..msg
		Message.TextColor3 = themes.textcolor
		Message.TextSize = 13.000
		Message.TextWrapped = true
		Message.TextXAlignment = Enum.TextXAlignment.Left

		if options then
			Accept.Name = "Accept"
			Accept.Parent = NotifyMain
			Accept.BackgroundTransparency = 1.000
			Accept.Position = UDim2.new(1, -26, 0, 8)
			Accept.Size = UDim2.new(0, 16, 0, 16)
			Accept.ZIndex = 4
			Accept.Image = "rbxassetid://5012538259"
			Accept.ImageColor3 = themes.textcolor
				
			Decline.Name = "Decline"
			Decline.Parent = NotifyMain
			Decline.BackgroundTransparency = 1.000
			Decline.Position = UDim2.new(1, -26, 1, -24)
			Decline.Size = UDim2.new(0, 16, 0, 16)
			Decline.ZIndex = 4
			Decline.Image = "rbxassetid://5012538583"
			Decline.ImageColor3 = themes.textcolor
		end

		library.currentnoti = NotifyMain

		drag(NotifyMain)

		local function CloseNoti()
			if not NotifyMain.ClipsDescendants then
				NotifyMain.ClipsDescendants = true
			end
			game:GetService('TweenService'):Create(Title, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
			game:GetService('TweenService'):Create(Message, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
			if options then
				game:GetService('TweenService'):Create(Accept, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()
				game:GetService('TweenService'):Create(Decline, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()
			end
			game:GetService('TweenService'):Create(NotifyMain, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
			task.wait(0.25)
			NotifyMain:Destroy()
			library.currentnoti = nil
		end

		if options then
			Accept.MouseButton1Click:Connect(function()
				callback(true)
				CloseNoti()
			end)

			Decline.MouseButton1Click:Connect(function()
				callback(false)
				CloseNoti()
			end)
		end

		if not options then
			task.spawn(function()
				for i = 1,10 do
					task.wait(1)
				end
				CloseNoti()
			end)
		end

		NotifyMain:TweenSize(UDim2.new(0, textSize.X + 70, 0, 53),"Out","Sine",0.2,false)
		Message:TweenSize(UDim2.new(0, textSize.X + 70, 0, 16),"Out","Sine",0.2,false)
	end
	
	function library:SelectPage(chosen)
		if #library.tabs < 1 then return end
		for i,v in next, library.tabs do
			if i == chosen then
				v.Visible = true
				library.opentab = v
			else
				v.Visible = false
			end
		end
	end

	local Tabs = {}

	function Tabs:Tab(name, icon)
		assert(name,"a name is required to create a tab")
		assert(icon, "an icon is needed to create a tab")

		local TabBtn = Instance.new("TextButton")
		local TabBtnL = Instance.new("UIListLayout")
		local TabBtnP = Instance.new("UIPadding")
		local Icon = Instance.new("ImageLabel")
		local TabName = Instance.new("TextLabel")
		local Holder = Instance.new("ScrollingFrame")
		local HolderL = Instance.new("UIListLayout")
		local UIPadding = Instance.new("UIPadding")

		TabBtn.Name = "TabBtn"
		TabBtn.Parent = TabHolder
		TabBtn.BackgroundColor3 = Color3.fromRGB(95, 95, 95)
		TabBtn.BackgroundTransparency = 1.000
		TabBtn.BorderColor3 = Color3.fromRGB(0, 166, 255)
		TabBtn.BorderSizePixel = 0
		TabBtn.Size = UDim2.new(0, 124, 0, 25)
		TabBtn.AutoButtonColor = false
		TabBtn.Font = Enum.Font.Gotham
		TabBtn.Text = ""
		TabBtn.TextColor3 = themes.textcolor
		TabBtn.TextSize = 15.000

		TabBtnL.Name = "TabBtnL"
		TabBtnL.Parent = TabBtn
		TabBtnL.FillDirection = Enum.FillDirection.Horizontal
		TabBtnL.SortOrder = Enum.SortOrder.LayoutOrder
		TabBtnL.VerticalAlignment = Enum.VerticalAlignment.Center
		TabBtnL.Padding = UDim.new(0, 3)

		TabBtnP.Name = "TabBtnP"
		TabBtnP.Parent = TabBtn
		TabBtnP.PaddingLeft = UDim.new(0, 3)

		Icon.Name = "Icon"
		Icon.Parent = TabBtn
		Icon.AnchorPoint = Vector2.new(0, 0.5)
		Icon.BackgroundTransparency = 1.000
		Icon.Position = UDim2.new(-1.67533565, 12, 0.290150881, 0)
		Icon.Size = UDim2.new(0, 20, 0, 20)
		Icon.ZIndex = 3
		Icon.Image = "rbxassetid://"..icon
		Icon.ScaleType = Enum.ScaleType.Fit
		Icon.ImageColor3 = themes.textcolor

		TabName.Name = "TabName"
		TabName.Parent = TabBtn
		TabName.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		TabName.BackgroundTransparency = 1.000
		TabName.BorderSizePixel = 0
		TabName.Position = UDim2.new(0.182539687, 0, 0.0745556653, 0)
		TabName.Size = UDim2.new(0.777777791, 0, 0.850888014, 0)
		TabName.Font = Enum.Font.GothamMedium
		TabName.Text = " "..name
		TabName.TextColor3 = themes.textcolor
		TabName.TextSize = 13.000
		TabName.TextXAlignment = Enum.TextXAlignment.Left

		Holder.Name = "Holder "..name
		Holder.Parent = Main
		Holder.Active = true
		Holder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Holder.BackgroundTransparency = 1
		Holder.BorderSizePixel = 0
		Holder.Position = UDim2.new(0.228723407, 0, 0.148571432, 0)
		Holder.Size = UDim2.new(0, 435, 0, 297)
		Holder.CanvasSize = UDim2.new(0, 0, 0, 0)
		Holder.ScrollBarThickness = 0
		Holder.Transparency = 1
		Holder.Visible = false

		HolderL.Name = "HolderL"
		HolderL.Parent = Holder
		HolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
		HolderL.SortOrder = Enum.SortOrder.LayoutOrder
		HolderL.Padding = UDim.new(0, 5)

		UIPadding.Parent = Holder
		UIPadding.PaddingTop = UDim.new(0, 10)
		
		table.insert(library.tabs,Holder)

		HolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
			Holder.CanvasSize = UDim2.new(0, 0, 0, HolderL.AbsoluteContentSize.Y + 16)
		end)
		
		if library.opentab == nil then
			SwitchTab(Holder)
		end

		TabBtn.MouseButton1Click:Connect(function()
			SwitchTab(Holder)
		end)

		local section = {}

		function section:Section(title)
			assert(title,"a title is required to create a section")

			local Section = Instance.new("Frame")
			local SectionC = Instance.new("UICorner")
			local SectionTitle = Instance.new("TextLabel")
			local SectionL = Instance.new("UIListLayout")
			local SectionP = Instance.new("UIPadding")

			Section.Name = "Section "..title
			Section.Parent = Holder
			Section.BackgroundColor3 = themes.secondary
			Section.BorderSizePixel = 0
			Section.Position = UDim2.new(0.016091954, 0, 0, 0)
			Section.Size = UDim2.new(0, 421, 0, 44)

			SectionC.CornerRadius = UDim.new(0, 5)
			SectionC.Name = "SectionC"
			SectionC.Parent = Section

			SectionTitle.Name = "SectionTitle"
			SectionTitle.Parent = Section
			SectionTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			SectionTitle.BackgroundTransparency = 1.000
			SectionTitle.BorderSizePixel = 0
			SectionTitle.Position = UDim2.new(0, 0, 0.0344827585, 0)
			SectionTitle.Size = UDim2.new(0, 421, 0, 24)
			SectionTitle.Font = Enum.Font.GothamMedium
			SectionTitle.Text = "  "..title
			SectionTitle.TextColor3 = themes.textcolor
			SectionTitle.TextSize = 13.000
			SectionTitle.TextWrapped = true
			SectionTitle.TextXAlignment = Enum.TextXAlignment.Left

			SectionL.Name = "SectionL"
			SectionL.Parent = Section
			SectionL.HorizontalAlignment = Enum.HorizontalAlignment.Center
			SectionL.SortOrder = Enum.SortOrder.LayoutOrder
			SectionL.Padding = UDim.new(0, 5)

			SectionP.Name = "SectionP"
			SectionP.Parent = Section
			SectionP.PaddingTop = UDim.new(0, 5)

			SectionL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
				Section.Size = UDim2.new(0, 421, 0, SectionL.AbsoluteContentSize.Y + 14)
			end)

			local holder = {}

			function holder:Button(name, callback)
				local callback = callback or function() end
				assert(name,"a name is required to create a button")

				local Btn = Instance.new("TextButton")
				local BtnC = Instance.new("UICorner")

				Btn.Name = "Btn"
				Btn.Parent = Section
				Btn.BackgroundColor3 = themes.main
				Btn.BorderSizePixel = 0
				Btn.Position = UDim2.new(0.0118764844, 0, 0.102112673, 0)
				Btn.Size = UDim2.new(0, 411, 0, 37)
				Btn.AutoButtonColor = false
				Btn.Font = Enum.Font.GothamMedium
				Btn.Text = "   "..name
				Btn.TextColor3 = themes.textcolor
				Btn.TextSize = 12.000
				Btn.TextXAlignment = Enum.TextXAlignment.Left

				BtnC.CornerRadius = UDim.new(0, 4)
				BtnC.Name = "BtnC"
				BtnC.Parent = Btn

				Btn.MouseButton1Click:Connect(function()
					spawn(callback)
				end)
			end
--------------------------------
-- Paragraph
--------------------------------
function holder:Paragraph(title, content)
    assert(title, "title is required to make a paragraph")
    assert(content, "content is required to make a paragraph")

    local Paragraph = Instance.new("Frame")
    local TitleLabel = Instance.new("TextLabel")
    local ContentLabel = Instance.new("TextLabel")
    local PrgC = Instance.new("UICorner")

    Paragraph.Name = "Paragraph"
    Paragraph.Parent = Section
    Paragraph.BackgroundColor3 = themes.main
    Paragraph.BorderSizePixel = 0
    Paragraph.Position = UDim2.new(0.0118764844, 0, 0.426056325, 0)
    Paragraph.Size = UDim2.new(0, 411, 0, 100)

    TitleLabel.Name = "TitleLabel"
    TitleLabel.Parent = Paragraph
    TitleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.BackgroundTransparency = 1.000
    TitleLabel.BorderSizePixel = 0
    TitleLabel.Position = UDim2.new(0, 0, 0, 0)
    TitleLabel.Size = UDim2.new(1, 0, 0, 24)
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.Text = title
    TitleLabel.TextColor3 = themes.textcolor
    TitleLabel.TextSize = 14.000
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left

    ContentLabel.Name = "ContentLabel"
    ContentLabel.Parent = Paragraph
    ContentLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ContentLabel.BackgroundTransparency = 1.000
    ContentLabel.BorderSizePixel = 0
    ContentLabel.Position = UDim2.new(0, 0, 0, 24)
    ContentLabel.Size = UDim2.new(1, 0, 0, 76)
    ContentLabel.Font = Enum.Font.Gotham
    ContentLabel.Text = content
    ContentLabel.TextColor3 = themes.textcolor
    ContentLabel.TextSize = 12.000
    ContentLabel.TextWrapped = true
    ContentLabel.TextXAlignment = Enum.TextXAlignment.Left
    ContentLabel.TextYAlignment = Enum.TextYAlignment.Top

    -- Update size of ContentLabel based on the actual text size
    local textSize = ContentLabel.TextBounds.Y
    ContentLabel.Size = UDim2.new(1, 0, 0, textSize)

    -- Update size of Paragraph to account for the updated size of ContentLabel
    local height = 24 + textSize
    Paragraph.Size = UDim2.new(0, 411, 0, height)

    PrgC.CornerRadius = UDim.new(0, 4)
    PrgC.Name = "PrgC"
    PrgC.Parent = Paragraph

    return Paragraph
end
------------------------------------

			function holder:Label(text)
				assert(text, "text is required to make a label")

				local Label = Instance.new("TextButton")
				local BtnC = Instance.new("UICorner")

				Label.Name = "Label"
				Label.Parent = Section
				Label.BackgroundColor3 = themes.main
				Label.BorderSizePixel = 0
				Label.Position = UDim2.new(0.0118764844, 0, 0.426056325, 0)
				Label.Size = UDim2.new(0, 411, 0, 24)
				Label.AutoButtonColor = false
				Label.Font = Enum.Font.GothamMedium
				Label.Text = text
				Label.TextColor3 = themes.textcolor
				Label.TextSize = 12.000

				BtnC.CornerRadius = UDim.new(0, 4)
				BtnC.Name = "BtnC"
				BtnC.Parent = Label
				return Label
			end

			function holder:Slider(name,default,min,max,precise,callback)
				local callback = callback or function() end
				local min = min or 1 
				local max = max or 10
				local default = default or min
				local precise = precise or false
				local flag = name
				assert(name,"a name is required to create a slider")
				library.flags[flag] = default

				local Slider = Instance.new("TextButton")
				local SliderC = Instance.new("UICorner")
				local SliderName = Instance.new("TextLabel")
				local Number = Instance.new("TextBox")
				local Bar = Instance.new("Frame")
				local BarC = Instance.new("UICorner")
				local Inner = Instance.new("Frame")
				local InnerC = Instance.new("UICorner")
				local Circle = Instance.new("Frame")
				local CircleC = Instance.new("UICorner")
				local InnerL = Instance.new("UIListLayout")
				local InnerP = Instance.new("UIPadding")

				Slider.Name = "Slider"
				Slider.Parent = Section
				Slider.BackgroundColor3 = themes.main
				Slider.BorderSizePixel = 0
				Slider.ClipsDescendants = true
				Slider.Position = UDim2.new(0.0118764844, 0, 0.25, 0)
				Slider.Size = UDim2.new(0, 411, 0, 45)
				Slider.AutoButtonColor = false
				Slider.Font = Enum.Font.GothamMedium
				Slider.Text = " "
				Slider.TextColor3 = Color3.fromRGB(255, 255, 255)
				Slider.TextSize = 12.000
				Slider.TextXAlignment = Enum.TextXAlignment.Left

				SliderC.CornerRadius = UDim.new(0, 4)
				SliderC.Name = "SliderC"
				SliderC.Parent = Slider

				SliderName.Name = "SliderName"
				SliderName.Parent = Slider
				SliderName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SliderName.BackgroundTransparency = 1.000
				SliderName.BorderSizePixel = 0
				SliderName.Position = UDim2.new(0, 0, 0.117716283, 0)
				SliderName.Size = UDim2.new(0, 246, 0, 20)
				SliderName.Font = Enum.Font.GothamMedium
				SliderName.Text = "  "..name
				SliderName.TextColor3 = themes.textcolor
				SliderName.TextSize = 13.000
				SliderName.TextWrapped = true
				SliderName.TextXAlignment = Enum.TextXAlignment.Left

				Number.Name = "Number"
				Number.Parent = Slider
				Number.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Number.BackgroundTransparency = 1.000
				Number.BorderSizePixel = 0
				Number.Position = UDim2.new(0.924574196, 0, 0.117716469, 0)
				Number.Size = UDim2.new(0, 25, 0, 20)
				Number.Font = Enum.Font.GothamMedium
				Number.Text = tostring(default)
				Number.TextColor3 = themes.textcolor
				Number.TextSize = 13.000
				Number.TextWrapped = true

				Bar.Name = "Bar"
				Bar.Parent = Slider
				Bar.BackgroundColor3 = themes.secondary
				Bar.BorderSizePixel = 0
				Bar.Position = UDim2.new(0.0180028472, 0, 0.710998535, 0)
				Bar.Size = UDim2.new(0, 389, 0, 4)

				BarC.CornerRadius = UDim.new(1, 0)
				BarC.Name = "BarC"
				BarC.Parent = Bar

				Inner.Name = "Inner"
				Inner.Parent = Bar
				Inner.BackgroundColor3 = themes.textcolor
				Inner.BorderSizePixel = 0
				Inner.Size = UDim2.new(0.894060671, 0, 1, 0)

				InnerC.CornerRadius = UDim.new(0, 9999)
				InnerC.Name = "InnerC"
				InnerC.Parent = Inner

				Circle.Name = "Circle"
				Circle.Parent = Inner
				Circle.BackgroundColor3 = themes.textcolor
				Circle.Position = UDim2.new(0.998, 0,1.09, 2)
				Circle.Size = UDim2.new(0, 10, 0, 10)

				CircleC.CornerRadius = UDim.new(0, 9999)
				CircleC.Name = "CircleC"
				CircleC.Parent = Circle

				InnerL.Name = "InnerL"
				InnerL.Parent = Inner
				InnerL.HorizontalAlignment = Enum.HorizontalAlignment.Right
				InnerL.SortOrder = Enum.SortOrder.LayoutOrder
				InnerL.VerticalAlignment = Enum.VerticalAlignment.Center

				InnerP.Name = "InnerP"
				InnerP.Parent = Inner
				InnerP.PaddingLeft = UDim.new(0, 10)

				local funcs = {}

				funcs.Set = function(self,value)
					local percent = (mouse.X - Bar.AbsolutePosition.X) / Bar.AbsoluteSize.X
					if value then
						percent = (value - min) / (max - min)
					end
					percent = math.clamp(percent, 0, 1)
					if precise then
						value = value or tonumber(string.format("%.1f", tostring(min + (max - min) * percent)))
					else
						value = value or math.floor(min + (max - min) * percent)
					end
					library.flags[flag] = tonumber(value)
					Number.Text = tostring(value)
					Inner.Size = UDim2.new(percent, 0, 1, 0)
					callback(tonumber(value))
				end

				funcs:Set(tonumber(default))

				local dragging, boxFocused, allowed = false, false, {
					[""] = true,
					["-"] = true
				}

				Slider.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						funcs:Set()
						dragging = true
					end
				end)

				game:GetService("UserInputService").InputEnded:Connect(function(input)
					if dragging and input.UserInputType == Enum.UserInputType.MouseButton1 then
						dragging = false
					end
				end)

				game:GetService("UserInputService").InputChanged:Connect(function(input)
					if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
						funcs:Set()
					end
				end)

				Number.Focused:Connect(function()
					boxFocused = true
				end)

				Number.FocusLost:Connect(function()
					boxFocused = false
					if Number.Text == "" then
						funcs:Set(default)
					end
					if tonumber(Number.Text) < min then
						Number.Text = min
						Number.Text = tonumber(min)
					end
				end)

				Number:GetPropertyChangedSignal("Text"):Connect(function()
					if not boxFocused then return end
					Number.Text = Number.Text:gsub("%D+", "")

					local text = Number.Text

					if not tonumber(text) then
						Number.Text = Number.Text:gsub('%D+', '')
					elseif not allowed[text] then
						if tonumber(text) > max then
							text = max
							Number.Text = tostring(max)
						end
						if tonumber(text) >= min then
							funcs:Set(tonumber(text))
						end
					end
				end)
				return funcs
			end

			function holder:Toggle(name,default,callback)
				local callback = callback or function() end
				local default = default or false
				assert(name,"a name is required to create a toggle")
				local flag = name
				library.flags[flag] = default

				local Toggle = Instance.new("TextButton")
				local ToggleC = Instance.new("UICorner")
				local Outer = Instance.new("Frame")
				local OuterC = Instance.new("UICorner")
				local Outer_2 = Instance.new("Frame")
				local OuterC_2 = Instance.new("UICorner")

				Toggle.Name = "Toggle"
				Toggle.Parent = Section
				Toggle.BackgroundColor3 = themes.main
				Toggle.BorderSizePixel = 0
				Toggle.Position = UDim2.new(0.0118764844, 0, 0.102112673, 0)
				Toggle.Size = UDim2.new(0, 411, 0, 37)
				Toggle.AutoButtonColor = false
				Toggle.Font = Enum.Font.GothamMedium
				Toggle.Text = "   "..name
				Toggle.TextColor3 = themes.textcolor
				Toggle.TextSize = 12.000
				Toggle.TextXAlignment = Enum.TextXAlignment.Left

				ToggleC.CornerRadius = UDim.new(0, 4)
				ToggleC.Name = "ToggleC"
				ToggleC.Parent = Toggle

				Outer.Name = "Outer"
				Outer.Parent = Toggle
				Outer.BackgroundColor3 = themes.secondary
				Outer.BorderSizePixel = 0
				Outer.Position = UDim2.new(0.885644794, 0, 0.270270258, 0)
				Outer.Size = UDim2.new(0, 41, 0, 20)

				OuterC.CornerRadius = UDim.new(0, 4)
				OuterC.Name = "OuterC"
				OuterC.Parent = Outer

				Outer_2.Name = "Outer"
				Outer_2.Parent = Outer
				Outer_2.BackgroundColor3 = themes.textcolor
				Outer_2.BorderSizePixel = 0
				Outer_2.Position = UDim2.new(-0.0444444492, 0, 0.0500000007, 0)
				Outer_2.Size = UDim2.new(0, 22, 0, 17)

				OuterC_2.CornerRadius = UDim.new(0, 4)
				OuterC_2.Name = "OuterC"
				OuterC_2.Parent = Outer_2

				local funcs = {}

				funcs.Set = function(self,Value)
					if Value == nil then
						Value = not library.flags[flag]
					end
					Outer_2:TweenPosition(Value and UDim2.new(0.419, 0,0.05, 0) or UDim2.new(-0.044, 0,0.05, 0),"Out","Sine",0.1,false)
					library.flags[flag] = Value
					callback(Value)
				end

				funcs.Set(self,default)

				Toggle.MouseButton1Click:Connect(function()
					funcs.Set()
				end)

				return funcs
			end

			function holder:KeyBind(name,default,callback)
				local callback = callback or function() end
				assert(name,"a name is required to create a keybind")
				assert(default,"a default key is required to create a keybind")

				local default = (typeof(default) == "string" and Enum.KeyCode[default] or default)

				local banned = {
					Return = true;
					Space = true;
					Tab = true;
					Backquote = true;
					CapsLock = true;
					Escape = true;
					Unknown = true;
				}

				local shortNames = {
					RightControl = 'Right Ctrl',
					LeftControl = 'Left Ctrl',
					LeftShift = 'Left Shift',
					RightShift = 'Right Shift',
					Semicolon = ";",
					Quote = '"',
					LeftBracket = '[',
					RightBracket = ']',
					Equals = '=',
					Minus = '-',
					RightAlt = 'Right Alt',
					LeftAlt = 'Left Alt'
				}

				local bindKey = default
				local keyTxt = (default and (shortNames[default.Name] or default.Name) or "None")

				local KeyBind = Instance.new("TextButton")
				local KeyBindC = Instance.new("UICorner")
				local Inner = Instance.new("TextButton")
				local InnerC = Instance.new("UICorner")
				local KeyBindL = Instance.new("UIListLayout")
				local KeyBindP = Instance.new("UIPadding")

				KeyBind.Name = "KeyBind"
				KeyBind.Parent = Section
				KeyBind.BackgroundColor3 = themes.main
				KeyBind.BorderSizePixel = 0
				KeyBind.Position = UDim2.new(0.0118764844, 0, 0.102112673, 0)
				KeyBind.Size = UDim2.new(0, 411, 0, 37)
				KeyBind.AutoButtonColor = false
				KeyBind.Font = Enum.Font.GothamMedium
				KeyBind.Text = "   "..name
				KeyBind.TextColor3 = themes.textcolor
				KeyBind.TextSize = 12.000
				KeyBind.TextXAlignment = Enum.TextXAlignment.Left

				KeyBindC.CornerRadius = UDim.new(0, 4)
				KeyBindC.Name = "KeyBindC"
				KeyBindC.Parent = KeyBind

				Inner.Name = "Inner"
				Inner.Parent = KeyBind
				Inner.BackgroundColor3 = themes.secondary
				Inner.BorderSizePixel = 0
				Inner.Position = UDim2.new(0.59655714, 0, 0.378189206, 0)
				Inner.Size = UDim2.new(0, 59, 0, 23)
				Inner.AutoButtonColor = false
				Inner.Font = Enum.Font.GothamMedium
				Inner.Text = keyTxt
				Inner.TextColor3 = themes.textcolor
				Inner.TextSize = 12.000

				InnerC.CornerRadius = UDim.new(0, 4)
				InnerC.Name = "InnerC"
				InnerC.Parent = Inner

				KeyBindL.Name = "KeyBindL"
				KeyBindL.Parent = KeyBind
				KeyBindL.HorizontalAlignment = Enum.HorizontalAlignment.Right
				KeyBindL.SortOrder = Enum.SortOrder.LayoutOrder
				KeyBindL.VerticalAlignment = Enum.VerticalAlignment.Center

				KeyBindP.Name = "KeyBindP"
				KeyBindP.Parent = KeyBind
				KeyBindP.PaddingRight = UDim.new(0, 7)

				game:GetService("UserInputService").InputBegan:Connect(function(inp, gpe)
					if library.destroyed then return end
					if gpe then return end
					if inp.UserInputType ~= Enum.UserInputType.Keyboard then return end
					if inp.KeyCode ~= bindKey then return end
					callback(bindKey.Name)
				end)

				Inner.MouseButton1Click:Connect(function()
					Inner.Text = "..."
					wait()
					local key, uwu = game.UserInputService.InputEnded:Wait()
					local keyName = tostring(key.KeyCode.Name)
					if key.UserInputType ~= Enum.UserInputType.Keyboard then
						Inner.Text = keyTxt
						return
					end
					if banned[keyName] then
						Inner.Text = keyTxt
						return
					end
					wait()
					bindKey = Enum.KeyCode[keyName]
					Inner.Text = shortNames[keyName] or keyName
				end)

				Inner:GetPropertyChangedSignal("TextBounds"):Connect(function()
					Inner.Size = UDim2.new(0, Inner.TextBounds.X + 30, 0, 23)
				end)
				Inner.Size = UDim2.new(0, Inner.TextBounds.X + 30, 0, 23)
			end

			function holder:TextBox(name,default,callback)
				local callback = callback or function() end
				local flag = name
				assert(name,"a name is required to create a textbox")
				assert(default,"default text is required to create a textbox")
				library.flags[flag] = default

				local TextBox = Instance.new("TextButton")
				local TextBoxC = Instance.new("UICorner")
				local Input = Instance.new("TextBox")
				local InputC = Instance.new("UICorner")
				local TextBoxL = Instance.new("UIListLayout")
				local TextBoxP = Instance.new("UIPadding")

				TextBox.Name = "TextBox"
				TextBox.Parent = Section
				TextBox.BackgroundColor3 = themes.main
				TextBox.BorderSizePixel = 0
				TextBox.Position = UDim2.new(0.0118764844, 0, 0.102112673, 0)
				TextBox.Size = UDim2.new(0, 411, 0, 37)
				TextBox.AutoButtonColor = false
				TextBox.Font = Enum.Font.GothamMedium
				TextBox.Text = "   "..name
				TextBox.TextColor3 = themes.textcolor
				TextBox.TextSize = 12.000
				TextBox.TextXAlignment = Enum.TextXAlignment.Left

				TextBoxC.CornerRadius = UDim.new(0, 4)
				TextBoxC.Name = "TextBoxC"
				TextBoxC.Parent = TextBox

				Input.Name = "Input"
				Input.Parent = TextBox
				Input.BackgroundColor3 = themes.secondary
				Input.BorderSizePixel = 0
				Input.Position = UDim2.new(0.59655714, 0, 0.378189206, 0)
				Input.Size = UDim2.new(0, 59, 0, 23)
				Input.Font = Enum.Font.GothamMedium
				Input.Text = default
				Input.TextColor3 = themes.textcolor
				Input.TextSize = 12.000

				InputC.CornerRadius = UDim.new(0, 4)
				InputC.Name = "InputC"
				InputC.Parent = Input

				TextBoxL.Name = "TextBoxL"
				TextBoxL.Parent = TextBox
				TextBoxL.HorizontalAlignment = Enum.HorizontalAlignment.Right
				TextBoxL.SortOrder = Enum.SortOrder.LayoutOrder
				TextBoxL.VerticalAlignment = Enum.VerticalAlignment.Center

				TextBoxP.Name = "TextBoxP"
				TextBoxP.Parent = TextBox
				TextBoxP.PaddingRight = UDim.new(0, 7)

				Input.FocusLost:Connect(function()
					if Input.Text == "" then
						Input.Text = default
					end
					library.flags[flag] = Input.Text
					callback(Input.Text)
				end)

				Input:GetPropertyChangedSignal("TextBounds"):Connect(function()
					Input.Size = UDim2.new(0, Input.TextBounds.X + 30, 0, 23)
				end)
				Input.Size = UDim2.new(0, Input.TextBounds.X + 30, 0, 23)
			end

			function holder:DropDown(name, options, callback)
				local callback = callback or function() end
				local flag = name
				assert(name,"a name is required to create a dropdown")
				local options = options or {"No Options"}

				local funcs = {}

				local DropDown = Instance.new("TextButton")
				local DropDownC = Instance.new("UICorner")
				local SIcon = Instance.new("ImageLabel")
				local DropDownL = Instance.new("UIListLayout")
				local DropDownP = Instance.new("UIPadding")
				local Search = Instance.new("TextBox")
				local Arrow = Instance.new("ImageButton")
				local DropDownHolder = Instance.new("Frame")
				local DropDownC2 = Instance.new("UICorner")
				local OptionHolder = Instance.new("ScrollingFrame")
				local OptionHolderL = Instance.new("UIListLayout")

				DropDown.Name = "DropDown"
				DropDown.Parent = Section
				DropDown.BackgroundColor3 = themes.main
				DropDown.BorderSizePixel = 0
				DropDown.Position = UDim2.new(0.0118764844, 0, 0.0911956429, 0)
				DropDown.Size = UDim2.new(0, 411, 0, 37)
				DropDown.AutoButtonColor = false
				DropDown.Font = Enum.Font.GothamMedium
				DropDown.Text = ""
				DropDown.TextColor3 = themes.textcolor
				DropDown.TextSize = 12.000
				DropDown.TextXAlignment = Enum.TextXAlignment.Left

				DropDownC.CornerRadius = UDim.new(0, 4)
				DropDownC.Name = "DropDownC"
				DropDownC.Parent = DropDown

				SIcon.Name = "SIcon"
				SIcon.Parent = DropDown
				SIcon.Active = true
				SIcon.BackgroundTransparency = 1.000
				SIcon.BorderSizePixel = 0
				SIcon.Position = UDim2.new(0.0168103613, 0, 0.207616836, 0)
				SIcon.Size = UDim2.new(0, 20, 0, 20)
				SIcon.Image = "http://www.roblox.com/asset/?id=6031154871"
				SIcon.ImageColor3 = themes.textcolor

				DropDownL.Name = "DropDownL"
				DropDownL.Parent = DropDown
				DropDownL.FillDirection = Enum.FillDirection.Horizontal
				DropDownL.SortOrder = Enum.SortOrder.LayoutOrder
				DropDownL.VerticalAlignment = Enum.VerticalAlignment.Center
				DropDownL.Padding = UDim.new(0, 5)

				DropDownP.Name = "DropDownP"
				DropDownP.Parent = DropDown
				DropDownP.PaddingLeft = UDim.new(0, 5)

				Search.Name = "Search"
				Search.Parent = DropDown
				Search.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Search.BackgroundTransparency = 1.000
				Search.BorderColor3 = Color3.fromRGB(27, 42, 53)
				Search.BorderSizePixel = 0
				Search.Position = UDim2.new(0.0615763552, 0, 0.0810810775, 0)
				Search.Selectable = false
				Search.Size = UDim2.new(0, 345, 0, 31)
				Search.ClearTextOnFocus = false
				Search.Font = Enum.Font.GothamMedium
				Search.Text = name
				Search.TextColor3 = themes.textcolor
				Search.TextSize = 13.000
				Search.TextWrapped = true
				Search.TextXAlignment = Enum.TextXAlignment.Left
				Search.ClearTextOnFocus = true

				Arrow.Name = "Arrow"
				Arrow.Parent = DropDown
				Arrow.BackgroundTransparency = 1.000
				Arrow.BorderSizePixel = 0
				Arrow.ClipsDescendants = true
				Arrow.Position = UDim2.new(1.01724136, -28, 0.32432431, -9)
				Arrow.Rotation = 90.000
				Arrow.Size = UDim2.new(0, 25, 0, 25)
				Arrow.ZIndex = 3
				Arrow.Image = "rbxassetid://5012539403"
				Arrow.SliceCenter = Rect.new(2, 2, 298, 298)
				Arrow.ImageColor3 = themes.textcolor

				DropDownHolder.Name = "DropDownHolder "..name
				DropDownHolder.Parent = Section
				DropDownHolder.BackgroundColor3 = themes.main
				DropDownHolder.ClipsDescendants = true
				DropDownHolder.Position = UDim2.new(0.0118764844, 0, 0.646341443, 0)
				DropDownHolder.Size = UDim2.new(0, 411, 0, 0)
				DropDownHolder.BorderSizePixel = 0

				DropDownC2.CornerRadius = UDim.new(0, 4)
				DropDownC2.Name = "DropDownC"
				DropDownC2.Parent = DropDownHolder

				OptionHolder.Name = "OptionHolder"
				OptionHolder.Parent = DropDownHolder
				OptionHolder.Active = true
				OptionHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				OptionHolder.BackgroundTransparency = 1.000
				OptionHolder.BorderSizePixel = 0
				OptionHolder.Position = UDim2.new(0.0180028472, 0, 0.0416666679, 0)
				OptionHolder.Size = UDim2.new(0, 396, 0, 159)
				OptionHolder.ScrollBarThickness = 0

				OptionHolderL.Name = "OptionHolderL"
				OptionHolderL.Parent = OptionHolder
				OptionHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
				OptionHolderL.SortOrder = Enum.SortOrder.LayoutOrder
				OptionHolderL.Padding = UDim.new(0, 5)
				
                OptionHolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
					OptionHolder.CanvasSize = UDim2.new(0, 0, 0, OptionHolderL.AbsoluteContentSize.Y + 10)
				end)

				local istweening = false
				local isopen = false
				local function Open()
					if istweening then return end
					isopen = not isopen
					istweening = true
					DropDownHolder:TweenSize(UDim2.new(0, 411, 0, (isopen and 168 or 0)),"Out","Sine",0.3,false)
					task.wait(0.3)
					istweening = false
				end

				Arrow.MouseButton1Click:Connect(function()
					Open()
				end)

				local function ShowAll()
					for i,v in next, OptionHolder:GetChildren() do
						if v:IsA"TextButton" then
							v.Visible = true
						end
					end
				end

				local function search(text)
					if text == "" then
						ShowAll()
					end
					for i,v in next, OptionHolder:GetChildren() do
						if v:IsA"TextButton" then
							if v.Text:lower():match(text:lower()) then
								v.Visible = true
							else
								v.Visible = false
							end
						end
					end
				end

				Search:GetPropertyChangedSignal("Text"):Connect(function()
					if not isopen then return end
					if Search.Text == name then ShowAll() return end
					search(Search.Text)
				end)

				Search.FocusLost:Connect(function()
					if Search.Text == "" then
						Search.Text = name
					end
				end)

				funcs.addoption = function(self,name)
					local Option = Instance.new("TextButton")
					local OptionC = Instance.new("UICorner")
					local OptionP = Instance.new("UIPadding")

					Option.Name = "Option"
					Option.Parent = OptionHolder
					Option.BackgroundColor3 = themes.secondary
					Option.BorderSizePixel = 0
					Option.Position = UDim2.new(0.00973236002, 0, 0, 0)
					Option.Size = UDim2.new(0, 403, 0, 33)
					Option.AutoButtonColor = false
					Option.Font = Enum.Font.GothamMedium
					Option.Text = name
					Option.TextColor3 = themes.textcolor
					Option.TextSize = 12.000
					Option.TextXAlignment = Enum.TextXAlignment.Left

					OptionC.CornerRadius = UDim.new(0, 4)
					OptionC.Name = "OptionC"
					OptionC.Parent = Option

					OptionP.Name = "OptionP"
					OptionP.Parent = Option
					OptionP.PaddingLeft = UDim.new(0, 10)

					Option.MouseButton1Click:Connect(function()
						callback(Option.Text)
						library.flags[flag] = Option.Text
						Search.Text = Option.Text
						Open()
					end)
				end

				funcs.setoptions = function(self,options)
					for i,v in next, OptionHolder:GetChildren() do
						if v:IsA("TextButton") and v.Name == "Option" then
							v:Destroy()
						end
					end
					for i,v in next, options do
						funcs:addoption(v)
					end
				end

				funcs.RemoveOption = function(self,name)
					for i,v in next, OptionHolder:GetChildren() do
						if v:IsA("TextButton") and v.Name == "Option" then
							if v.Text == name then
								v:Destroy()
							end
						end
					end
				end

				funcs:setoptions(options)

				return funcs
			end

			function holder:ColorPicker(name,default,callback)
				local callback = callback or function() end
				local flag = name
				local default = default or Color3.fromRGB(225,225,225)
				assert(name,"a name is required to create a color picker")

				local ColorPicker = Instance.new("TextButton")
				local ColorPickerC = Instance.new("UICorner")
				local SelectedColor = Instance.new("TextButton")
				local SelectedColorC = Instance.new("UICorner")
				local ColorPickerL = Instance.new("UIListLayout")
				local ColorPickerP = Instance.new("UIPadding")

				ColorPicker.Name = "ColorPicker"
				ColorPicker.Parent = Section
				ColorPicker.BackgroundColor3 = themes.main
				ColorPicker.BorderSizePixel = 0
				ColorPicker.Position = UDim2.new(0.0118764844, 0, 0.102112673, 0)
				ColorPicker.Size = UDim2.new(0, 411, 0, 37)
				ColorPicker.AutoButtonColor = false
				ColorPicker.Font = Enum.Font.GothamMedium
				ColorPicker.Text = "   "..name
				ColorPicker.TextColor3 = themes.textcolor
				ColorPicker.TextSize = 12.000
				ColorPicker.TextXAlignment = Enum.TextXAlignment.Left

				ColorPickerC.CornerRadius = UDim.new(0, 4)
				ColorPickerC.Name = "ColorPickerC"
				ColorPickerC.Parent = ColorPicker

				SelectedColor.Name = "SelectedColor"
				SelectedColor.Parent = ColorPicker
				SelectedColor.BackgroundColor3 = Color3.fromRGB(255, 35, 244)
				SelectedColor.BorderSizePixel = 0
				SelectedColor.Position = UDim2.new(0.574257433, 0, 0.243243247, 0)
				SelectedColor.Size = UDim2.new(0, 59, 0, 21)
				SelectedColor.AutoButtonColor = false
				SelectedColor.Font = Enum.Font.GothamMedium
				SelectedColor.Text = ""
				SelectedColor.TextColor3 = Color3.fromRGB(255, 255, 255)
				SelectedColor.TextSize = 14.000

				SelectedColorC.CornerRadius = UDim.new(0, 5)
				SelectedColorC.Name = "SelectedColorC"
				SelectedColorC.Parent = SelectedColor

				ColorPickerL.Name = "ColorPickerL"
				ColorPickerL.Parent = ColorPicker
				ColorPickerL.HorizontalAlignment = Enum.HorizontalAlignment.Right
				ColorPickerL.SortOrder = Enum.SortOrder.LayoutOrder
				ColorPickerL.VerticalAlignment = Enum.VerticalAlignment.Center

				ColorPickerP.Name = "ColorPickerP"
				ColorPickerP.Parent = ColorPicker
				ColorPickerP.PaddingRight = UDim.new(0, 7)

				local ColorPickerFrame = Instance.new("Frame")
				local CPFC = Instance.new("UICorner")
				local SubmitBtn = Instance.new("TextButton")
				local ButtonUICorner = Instance.new("UICorner")
				local InputR = Instance.new("TextBox")
				local IGNORE = Instance.new("UICorner")
				local InputG = Instance.new("TextBox")
				local IGNORE_2 = Instance.new("UICorner")
				local InputB = Instance.new("TextBox")
				local IGNORE_3 = Instance.new("UICorner")
				local saturation = Instance.new("ImageLabel")
				local IGNORE_4 = Instance.new("UICorner")
				local saturationpicker = Instance.new("Frame")
				local IGNORE_5 = Instance.new("UICorner")
				local outline = Instance.new("Frame")
				local IGNORE_6 = Instance.new("UICorner")
				local huef = Instance.new("ImageLabel")
				local IGNORE_7 = Instance.new("UICorner")
				local huepicker = Instance.new("Frame")
				local Title = Instance.new("TextLabel")

				ColorPickerFrame.Name = "ColorPickerFrame"
				ColorPickerFrame.Parent = Main
				ColorPickerFrame.BackgroundColor3 = themes.secondary
				ColorPickerFrame.BorderColor3 = Color3.fromRGB(42, 42, 42)
				ColorPickerFrame.BorderSizePixel = 0
				ColorPickerFrame.Position = UDim2.new(1.01117194, 0, 0.216676518, 0)
				ColorPickerFrame.Size = UDim2.new(0, 208, 0, 197)
				ColorPickerFrame.Visible = false

				CPFC.CornerRadius = UDim.new(0, 5)
				CPFC.Name = "CPFC"
				CPFC.Parent = ColorPickerFrame

				SubmitBtn.Name = "SubmitBtn"
				SubmitBtn.Parent = ColorPickerFrame
				SubmitBtn.BackgroundColor3 = themes.main
				SubmitBtn.BorderSizePixel = 0
				SubmitBtn.Position = UDim2.new(0.057692308, 0, 0.838497579, 0)
				SubmitBtn.Size = UDim2.new(0, 189, 0, 24)
				SubmitBtn.AutoButtonColor = false
				SubmitBtn.Font = Enum.Font.GothamMedium
				SubmitBtn.Text = "Submit"
				SubmitBtn.TextColor3 = themes.textcolor
				SubmitBtn.TextSize = 12.000

				ButtonUICorner.CornerRadius = UDim.new(0, 3)
				ButtonUICorner.Name = "ButtonUICorner"
				ButtonUICorner.Parent = SubmitBtn

				InputR.Name = "InputR"
				InputR.Parent = ColorPickerFrame
				InputR.BackgroundColor3 = themes.main
				InputR.ClipsDescendants = true
				InputR.Position = UDim2.new(0.0192307699, 8, 0.852791846, -24)
				InputR.Size = UDim2.new(0, 58, 0, 16)
				InputR.ZIndex = 4
				InputR.Font = Enum.Font.GothamMedium
				InputR.PlaceholderText = "R"
				InputR.Text = ""
				InputR.TextColor3 = themes.textcolor
				InputR.TextSize = 11.000

				IGNORE.CornerRadius = UDim.new(0, 4)
				IGNORE.Name = "IGNORE"
				IGNORE.Parent = InputR

				InputG.Name = "InputG"
				InputG.Parent = ColorPickerFrame
				InputG.BackgroundColor3 = themes.main
				InputG.ClipsDescendants = true
				InputG.Position = UDim2.new(0.0544230789, 66, 0.85307616, -24)
				InputG.Size = UDim2.new(0, 58, 0, 16)
				InputG.ZIndex = 4
				InputG.Font = Enum.Font.GothamMedium
				InputG.PlaceholderText = "G"
				InputG.Text = ""
				InputG.TextColor3 = themes.textcolor
				InputG.TextSize = 11.000

				IGNORE_2.CornerRadius = UDim.new(0, 4)
				IGNORE_2.Name = "IGNORE"
				IGNORE_2.Parent = InputG

				InputB.Name = "InputB"
				InputB.Parent = ColorPickerFrame
				InputB.BackgroundColor3 = themes.main
				InputB.ClipsDescendants = true
				InputB.Position = UDim2.new(0.0913461521, 124, 0.852791905, -24)
				InputB.Size = UDim2.new(0, 58, 0, 16)
				InputB.ZIndex = 4
				InputB.Font = Enum.Font.GothamMedium
				InputB.PlaceholderText = "B"
				InputB.Text = ""
				InputB.TextColor3 = themes.textcolor
				InputB.TextSize = 11.000

				IGNORE_3.CornerRadius = UDim.new(0, 4)
				IGNORE_3.Name = "IGNORE"
				IGNORE_3.Parent = InputB

				saturation.Name = "saturation"
				saturation.Parent = ColorPickerFrame
				saturation.BackgroundColor3 = Color3.fromRGB(255, 0, 4)
				saturation.Position = UDim2.new(0, 12, 0, 29)
				saturation.Size = UDim2.new(0, 158, 0, 105)
				saturation.ZIndex = 2
				saturation.Image = "rbxassetid://8630797271"

				IGNORE_4.CornerRadius = UDim.new(0, 4)
				IGNORE_4.Name = "IGNORE"
				IGNORE_4.Parent = saturation

				saturationpicker.Name = "saturationpicker"
				saturationpicker.Parent = saturation
				saturationpicker.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				saturationpicker.BorderColor3 = Color3.fromRGB(0, 0, 0)
				saturationpicker.Position = UDim2.new(0, 20, 0, 20)
				saturationpicker.Size = UDim2.new(0, 4, 0, 4)

				IGNORE_5.CornerRadius = UDim.new(0, 12)
				IGNORE_5.Name = "IGNORE"
				IGNORE_5.Parent = saturationpicker

				outline.Name = "outline"
				outline.Parent = saturationpicker
				outline.BackgroundColor3 = themes.textcolor
				outline.BorderColor3 = Color3.fromRGB(225, 225, 225)
				outline.Position = UDim2.new(0, -1, 0, -1)
				outline.Size = UDim2.new(0, 6, 0, 6)
				outline.ZIndex = 0

				IGNORE_6.CornerRadius = UDim.new(0, 12)
				IGNORE_6.Name = "IGNORE"
				IGNORE_6.Parent = outline

				huef.Name = "huef"
				huef.Parent = ColorPickerFrame
				huef.BackgroundColor3 = Color3.fromRGB(255, 0, 4)
				huef.BackgroundTransparency = 1.000
				huef.Position = UDim2.new(0.966346145, -24, 0.00137298123, 30)
				huef.Size = UDim2.new(0, 16, 0, 104)
				huef.Image = "rbxassetid://8630799159"
				huef.ScaleType = Enum.ScaleType.Crop

				IGNORE_7.CornerRadius = UDim.new(0, 4)
				IGNORE_7.Name = "IGNORE"
				IGNORE_7.Parent = huef

				huepicker.Name = "huepicker"
				huepicker.Parent = huef
				huepicker.BackgroundColor3 = themes.textcolor
				huepicker.Position = UDim2.new(0, 0, 0, 20)
				huepicker.Size = UDim2.new(1, 0, 0, 2)

				Title.Name = "Title"
				Title.Parent = ColorPickerFrame
				Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Title.BackgroundTransparency = 1.000
				Title.Position = UDim2.new(0, 0, 0.0253807101, 0)
				Title.Size = UDim2.new(0, 208, 0, 17)
				Title.Font = Enum.Font.GothamBold
				Title.Text = "   Color Picker"
				Title.TextColor3 = themes.textcolor
				Title.TextSize = 14.000
				Title.TextXAlignment = Enum.TextXAlignment.Left

				local isopen = false
				local function openpicker()
					isopen = not isopen
					ColorPickerFrame.Visible = isopen and true or false
				end

				SelectedColor.MouseButton1Click:Connect(function()
					if library.locked then return end
					openpicker()
				end)

				SubmitBtn.MouseButton1Click:Connect(function()
					openpicker()
				end)

				local hue, sat, val = default:ToHSV()
				local slidingHue = false
				local slidingSaturation = false
				local hsv = Color3.fromHSV(hue, sat, val)

				local function updatehue(input)
					local sizeY = 1 - math.clamp((input.Position.Y - huef.AbsolutePosition.Y) / huef.AbsoluteSize.Y, 0, 1)
					local posY = math.clamp(((input.Position.Y - huef.AbsolutePosition.Y) / huef.AbsoluteSize.Y) * huef.AbsoluteSize.Y, 0, huef.AbsoluteSize.Y - 2)
					huepicker.Position = UDim2.new(0, 0, 0, posY)

					hue = sizeY
					hsv = Color3.fromHSV(sizeY, sat, val)

					InputR.Text = "R: "..math.clamp(math.floor(hsv.R * 255), 0, 255)
					InputG.Text = "G: "..math.clamp(math.floor(hsv.G * 255), 0, 255)
					InputB.Text = "B: "..math.clamp(math.floor(hsv.B * 255), 0, 255)

					saturation.BackgroundColor3 = hsv
					SelectedColor.BackgroundColor3 = hsv
					library.flags[flag] = Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255)
					callback(Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255))	
				end

				huef.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						slidingHue = true
						updatehue(input)
					end
				end)

				huef.InputEnded:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						slidingHue = false
					end
				end)

				game.UserInputService.InputChanged:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseMovement then
						if slidingHue then
							updatehue(input)
						end
					end
				end)

				local function updatesatval(input)
					local sizeX = math.clamp((input.Position.X - saturation.AbsolutePosition.X) / saturation.AbsoluteSize.X, 0, 1)
					local sizeY = 1 - math.clamp((input.Position.Y - saturation.AbsolutePosition.Y) / saturation.AbsoluteSize.Y, 0, 1)
					local posY = math.clamp(((input.Position.Y - saturation.AbsolutePosition.Y) / saturation.AbsoluteSize.Y) * saturation.AbsoluteSize.Y, 0, saturation.AbsoluteSize.Y - 4)
					local posX = math.clamp(((input.Position.X - saturation.AbsolutePosition.X) / saturation.AbsoluteSize.X) * saturation.AbsoluteSize.X, 0, saturation.AbsoluteSize.X - 4)

					saturationpicker.Position = UDim2.new(0, posX, 0, posY)

					sat = sizeX
					val = sizeY
					hsv = Color3.fromHSV(hue, sizeX, sizeY)

					InputR.Text = "R: "..math.clamp(math.floor(hsv.R * 255), 0, 255)
					InputG.Text = "G: "..math.clamp(math.floor(hsv.G * 255), 0, 255)
					InputB.Text = "B: "..math.clamp(math.floor(hsv.B * 255), 0, 255)

					SelectedColor.BackgroundColor3 = hsv

					library.flags[flag] = Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255)
					callback(Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255))	
				end

				saturation.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						slidingSaturation = true
						updatesatval(input)
					end
				end)

				saturation.InputEnded:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						slidingSaturation = false
					end
				end)

				game.UserInputService.InputChanged:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseMovement then
						if slidingSaturation then
							updatesatval(input)
						end
					end
				end)

				local function set(color)
					if type(color) == "table" then
						color = Color3.fromRGB(unpack(color))
					end

					hue, sat, val = color:ToHSV()
					hsv = Color3.fromHSV(hue, sat, val)

					SelectedColor.BackgroundColor3 = hsv
					saturation.BackgroundColor3 = hsv
					saturationpicker.Position = UDim2.new(0, (math.clamp(sat * saturation.AbsoluteSize.X, 0, saturation.AbsoluteSize.X - 4)), 0, (math.clamp((1 - val) * saturation.AbsoluteSize.Y, 0, saturation.AbsoluteSize.Y - 4)))
					huepicker.Position = UDim2.new(0, 0, 0, math.clamp((1 - hue) * saturation.AbsoluteSize.Y, 0, saturation.AbsoluteSize.Y - 4))

					InputR.Text = "R: "..math.clamp(math.floor(hsv.R * 255), 0, 255)
					InputG.Text = "G: "..math.clamp(math.floor(hsv.G * 255), 0, 255)
					InputB.Text = "B: "..math.clamp(math.floor(hsv.B * 255), 0, 255)
					library.flags[flag] = Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255)
					callback(Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255))
				end

				set(default)

				local funcs = {}

				funcs.SetColor = function(self,color)
					set(color)
				end
				return funcs
			end
			return holder 
		end
		return section
	end
	return Tabs
end

---~Funcs~---

local GetTime = function()
	local currentTime = os.date("*t")
	local ampm = "AM"
	local hour = currentTime.hour
	if hour >= 12 then
		ampm = "PM"
		hour = hour - 12
	end
	if hour == 0 then
		hour = 12
	end
	return string.format("%02d/%02d/%04d at: %02d:%02d %s", currentTime.month, currentTime.day, currentTime.year, hour, currentTime.min, ampm)
end
------------------------------------------------------------------------------





------------------------------------------------------------------------------
-- Dark chat
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui") -- Initialize PlayerGui variable

local frames = playerGui:GetDescendants()
for _, frame in ipairs(frames) do
    if frame:IsA("Frame") then
        frame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    end
    
    if frame:IsA("TextLabel") then
        frame.TextColor3 = Color3.fromRGB(255, 255, 255)
        frame.BackgroundColor3 = Color3.fromRGB(17, 17, 17)
    end
    
    if frame:IsA("TextButton") then
        frame.BackgroundColor3 = Color3.fromRGB(17, 17, 17)
    end
    
    if frame:IsA("ScrollingFrame") then
        frame.BackgroundColor3 = Color3.fromRGB(17, 17, 17)
    end
end

playerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar.TextColor3 = Color3.fromRGB(220, 220, 220)
--print("updated chat")-- test to ensure code was executed
--print(type(frames))-- test to ensure table is not nil
------------------------------------------------------------------------------






------------------------------------------------------------------------------
-- bridge main land
for _, i in next, game:GetService("Workspace").Bridge.TollBooth0:GetDescendants() do
if i.Name == 'Part' or i.Name == 'Wedge'then
i.Material = Enum.Material.Glass
i.Transparency = 0.4
i.Color = Color3.fromRGB(255, 255, 255)
end
end

-- bridge saffari land
for _, i in next, game:GetService("Workspace").Bridge.TollBooth1:GetDescendants() do
if i.Name == 'Part' or i.Name == 'Wedge'then
i.Material = Enum.Material.Glass
i.Transparency = 0.4
i.Color = Color3.fromRGB(255, 255, 255)
end
end
------------------------------------------------------------------------------


	
------------------------------------------------------------------------------
---~Requirements~--- | skidded from silent | credits to victor
local Requirements = {
    Vars = {
        OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame,
        HRP = game.Players.LocalPlayer.Character.HumanoidRootPart,
        Char = game.Players.LocalPlayer.Character,
        PlrTorso = game.Players.LocalPlayer.Character.Torso,
        Head = game.Players.LocalPlayer.Character.Head,
        Mouse = game.Players.LocalPlayer:GetMouse(),
    },
    Config = {
        AlwaysDay = false,
        AlwaysNight = false,
        NoFog = false,
        Spook = false,
    },
    Booleans = {
        ClearShopItems = false,
},
    Strings = {
        Temp = nil,
        TModel = nil,
        Hum_Clone = nil,
        AntiBLClone = nil,
        AxeRotation = 0,
    },
    Connections = {
        ToolAdded = nil,
        AxeFling = nil,
    },
    Funcs = {},
}
--------------------------------------------------------------------------------




------------------------------------------------------------------------------
 -- # Nightfall
------------------------------------------------------------------------------
 --  UI Window
 local UI = library:Create("Nightfall", "Lumber Tycoon 2")
------------------------------------------------------------------------------







 -----------------------------------------------------------------------------
-- Log Execution Info | HTTP Request not required | Both Nightfall Servers
------------------------------------------------------------------------------
-- Define a function that converts RGB values to a decimal number
local function rgbToDecimal(r, g, b)
    return r * 65536 + g * 256 + b
end

---- Get player and server information
local player = game:GetService("Players").LocalPlayer
local displayName = player.DisplayName
local username = player.Name
local placeId = game.PlaceId
local userId = game.Players.LocalPlayer.UserId
local identifyExecutor = identifyexecutor
local executor = identifyExecutor()

-- Get the current time as a table
local message = {
    ["color"] = rgbToDecimal(255, 179, 153), -- embed color
    ["title"] = "Execution Log Information",
    ["fields"] = {
        {
            ["name"] = "Time",
            ["value"] = GetTime(),
            ["inline"] = true
        },
        {
            ["name"] = "Place ID",
            ["value"] = placeId,
            ["inline"] = true
        },
        {
            ["name"] = "Username",
            ["value"] = username,
            ["inline"] = true
        },
        {
            ["name"] = "Display Name",
            ["value"] = displayName,
            ["inline"] = true
        },
        {
            ["name"] = "Executor",
            ["value"] = executor,
            ["inline"] = true
        },
        {
			["name"] = "Join Them (testing)",
			["value"] = string.format("[Click here to join the server](https://www.roblox.com/games/%d/join?userId=%d)", placeId, userId),
			["inline"] = true
        }
    },
}


-- Send the message to the Discord webhook
local request = http_request or request or (syn and syn.request)
local webhook = "https://discord.com/api/webhooks/1064949541985591417/036C0bR3dLwHoKQ41H8tuV71YMA5ZX0bUHJY2TesTwND2-2Qz_H1Sge6e6HH0gxkS7U0"-- Nightfall

request({
    Method = "POST",
    Url = webhook,
    Headers = {
        ["Content-Type"] = "application/json"
    },
    Body = game:GetService("HttpService"):JSONEncode({
        username = "[Nightfall] Logs",
        embeds = {message}
    })
})
--------------------------------------------------------------------------------
		



------------------------------------------------------------------------------
-- Execution Chat Message
--local HttpService = game:GetService("HttpService")
--local StarterGui = game:GetService("StarterGui")
--
--local text = "\n---------------------------------\n[Nightfall v1.7] Successfully Loaded\n Developed By Ecstasy. / Nix.\n---------------------------------"
--
--local properties = {
--	Color = Color3.new(173, 216, 230),
--	Font = Enum.Font.Cartoon,
--	TextSize = 16,
--	Text = text
--}
--
--if StarterGui and HttpService then
--	local success, message = pcall(function()
--		StarterGui:SetCore("ChatMakeSystemMessage", properties)
--	end)
--	if not success then
--	   print(message)
--	end
--else
--	print("StarterGui or HttpService is not found.")
--end
------------------------------------------------------------------------------







--------------------------------------------------------------------------------
-- -- Wood R' Us Sign cycle
--
---- Sign Text Cycle | idea: textbox for custom sign messages
--local names = {"Nightfall v1.7", "By Ecstasy. / Nix.", "Join the discord"}
--local currentIndex = 1
--
--function cycleNames()
--	-- Get the current name from the list
--	local SignText = names[currentIndex]
--
--	-- Set the text of the TextLabel
--	game:GetService("Workspace").Stores.WoodRUs.Parts.PREMIUMSELECTION.SurfaceGui.TextLabel.Text = SignText
--	currentIndex = currentIndex + 1
--	-- EOL Check
--	if currentIndex > #names then
--		-- Repeat at EOL
--		currentIndex = 1
--	end
--end
--
--------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Progress bar
--local UnloadingDelayProgress = library:ProgressBar("Status: Unloading...",100)
--for i = 1,100 do
---- Counter
--UnloadingDelayProgress:Update(i)
--wait(0.007)
--end
---- get local player name
--local player = game.Players.LocalPlayer
----wait(5)
library:Notify("Welcome "..player.Name.."", "remember to join our discord server via home tab to get the latest updates!", false)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 -- Tabs
------------------------------------------------------------------------------
 local HomeTab = UI:Tab("Home", "6026568198")
 local PlayerTab = UI:Tab("Local", "5012544693")
 local WorldTab = UI:Tab("World", "6026568213")
 local TPTab = UI:Tab("Teleports", "6034684937")
 --local PlayerThingsTab = UI:Tab("Players", "7743875962")
 local AutoBuyTab = UI:Tab("AutoBuy", "6031265976")
 local BaseTab = UI:Tab("Base", "6034333276")
 local BaseSorterTab = UI:Tab("Base Sorter", "6034333276")
 local DupeTab = UI:Tab("Dupe", "6035053278")
 local WoodTab = UI:Tab("Wood", "6034503369")
 local VehicleTab = UI:Tab("Vehicle", "6034452660")
 local MiscTab = UI:Tab("Misc", "8997386997")
 local FunTab = UI:Tab("Fun", "6034848752")
 local GriefTab = UI:Tab("Grief", "6034767620")
-- local ServerTab = UI:Tab("Server", "6035030083")
 local MethodsTab = UI:Tab("Methods", "6026568201")
 local HelpTab = UI:Tab("Support", "6026568201")
-- local FunGamesTab = UI:Tab("Games", "6034227061")
 local CreditsTab = UI:Tab("Credits", "7733964719")
 local ChangelogTab = UI:Tab("Changelog", "7733793319")
 local SettingsTab = UI:Tab("Settings", "7734053495")
-- local ThemeTab = UI:Tab("Theme", "6031625148")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 -- Sections
------------------------------------------------------------------------------
 local UserInformationSec = HomeTab:Section("ðŸ”” Information")
 local NewestChangesSec = HomeTab:Section("ðŸ”” Newest Changes")
 local ReleaseNotesSec = HomeTab:Section("ðŸ”” Release Notes")
 local DevLogsSec = HomeTab:Section("Dev Logs")
 local DiscordSec = HomeTab:Section("Discord Server")
 local ServerSec = HomeTab:Section("Server Settings")
 local PlayerSec = PlayerTab:Section("Player Settings")
 local WorldSec = WorldTab:Section("World")
 local WorldEnvSec = WorldTab:Section("Environment")
 local PathSec = WorldTab:Section("Paths")
 local RemovalSec = WorldTab:Section("Removals")
 local GraphicsSec = WorldTab:Section("Graphics Modifications")
 local MapThemesSec = WorldTab:Section("Map Themes")
 local TPSec = TPTab:Section("Teleports")
 local AutoCounterBuySec = AutoBuyTab:Section("Manual Counters Buy")
 local MainAutoBuySec = AutoBuyTab:Section("Item Autobuy")
 local LoadBaseSec = BaseTab:Section("Slots Options")
 local BaseSec = BaseTab:Section("Land")

 local CBaseSec = BaseTab:Section("Color Customization")
 local MBaseSec = BaseTab:Section("Plot Materials")
 local BaseAxeSec = BaseSorterTab:Section("Count Axe Options")
 local BaseSorterSec = BaseSorterTab:Section("Item Sorter")
 local PlotDupeInfoSec = DupeTab:Section("Base Duplication Information")
 local MiddlePlotDupeSec = DupeTab:Section("Middle Plot Dupe")
--local AxeDupeSec = DupeTab:Section("Axe Dupelication")
 local AutoMaxLandDupeSec	 = DupeTab:Section("Auto Max Land Dupelication")
 local MaxlandDupeTools	 = DupeTab:Section("Plot Claim Tools")
--local MaxLandDupeSec = DupeTab:Section("Manual Max Land Dupelication")
--local ToolsDupeSec = DupeTab:Section("Plot Tools For Duplication")
 local WoodSec = WoodTab:Section("Wood Options")
 local BringWoodSec = WoodTab:Section("Bringing Wood")
 local WoodSortSec = WoodTab:Section("Sorting wood")
 local VehicleSec = VehicleTab:Section("Vehicle Options")
 local PlayerThingsSec = MiscTab:Section("Player Misc Options")
 local ChatMiscSec = MiscTab:Section("Chat Misc Options")
 local OtherMiscSec = MiscTab:Section("Other Misc Options")
 local GriefSec = GriefTab:Section("Grief / Troll Options")
 local FunSec = FunTab:Section("Fun")
 local FunCSSec = FunTab:Section("Client-sided")
 local FunNCSSec = FunTab:Section("Non Client-sided")
 local SettingsSec = SettingsTab:Section("GUI Settings")
 local MethodsSec = MethodsTab:Section("Manual Methods")
 local HelpSec = HelpTab:Section("FAQ / Support")
--local FunGamesSec = FunGamesTab:Section("Fun Built In Games")
--local ServerSec = ServerTab:Section("Server Settings")
 local CreditSec = CreditsTab:Section("Nightfall Project Credits")
 local SoonFeatureSec = ChangelogTab:Section("Features To Come")
 local NewFeatureSec = ChangelogTab:Section("Newest Changes")
 local ChangelogSec = ChangelogTab:Section("Changelogs") 
--local ThemeSec = ThemeTab:Section("Customize The Nightfall Theme") 
------------------------------------------------------------------------------















------------------------------------------------------------------------------
 -- GUI Starts Here
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 --Home Labels
------------------------------------------------------------------------------
-- Define a table to store the font sizes
local fontSizes = { norm = 12, big = 14 }

--test:Label("small").TextSize = fontSizes.norm
--test:Label("big").TextSize = fontSizes.big

-- time label
local Time =  UserInformationSec:Label("Nightfall")
task.spawn(function()
   while task.wait() do
	   Time.Text = "Your Time: "..GetTime() ..""
   end
end)

UserInformationSec:Label("Executor detected: " .. executor .. "")TextSize = fontSizes.big
UserInformationSec:Label("Logged in as: " .. displayName .. "")TextSize = fontSizes.big
local CurrentTimeLabel = UserInformationSec:Label("Current Time: ")

game:GetService("RunService").RenderStepped:Connect(function()
    CurrentTimeLabel.Text = "Game Time: " .. tostring(game.Lighting.TimeOfDay):sub(1, -2):sub(1, -2):sub(1, -2)
end)

local FerryDepartsLabel = UserInformationSec:Label("Ferry Departs: ")
FerryDepartsLabel.TextSize = 13
game.Workspace.Ferry.TimeToDeparture.Changed:connect(function()
    local timeToDeparture = game.Workspace.Ferry.TimeToDeparture.Value
    if timeToDeparture == 0 then
        FerryDepartsLabel.Text = "	Ferry has Departed"
        wait(6)
        FerryDepartsLabel.Text = "Ferry Departs: " .. timeToDeparture
    else
        FerryDepartsLabel.Text = "Ferry Departs: " .. timeToDeparture
    end
end)


NewestChangesSec:Paragraph("1.7 Update Release", "- Added a new custom ui library\n- Added 30+ features\n- Check changelogs for more changes")
--NewestChangesSec:Label("1.7 Update Release!!")
--NewestChangesSec:Label("Added A New Custom UI Lib")
--NewestChangesSec:Label("Look In Changelog For More")

ReleaseNotesSec:Paragraph("Newest Changes", "Alot of time has been spent on the new update so if you find any bugs or glitches with nightfall then please do not hesitate to report the bugs in the support tab or the discord server bug channel")
ReleaseNotesSec:Label("Apologies for the long loading delay..")
--ReleaseNotesSec:Label("Alot of time has been spent on the new update")

DevLogsSec:Paragraph("Developer Logs", "ReToggle Shift to Sprint To Use It After Dying, Temp Bug\nSome fun features may reset walkspeed simply set speed again")
--DevLogsSec:Label("ReToggle Shift to Sprint To Use It After Dying, Temp Bug")
--DevLogsSec:Label("Some fun features may reset walkspeed\nSimply set speed again")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Discord Invite Link 
DiscordSec:Button("Copy Discord Link", function()

library:Notify("Discord Server", "The nightfall discord invite link has been copied to your clipboard", false)

-- Copy Link
local textToCopy = "dsc.gg/NightfallLT2"
	setclipboard(textToCopy)
	print("Copied 'dsc.gg/NightfallLT2' to clipboard.")
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Server Hop
ServerSec:Button("Server Hop",function()
library:Notify("Information", "Attempting to join new server")-- Hop By PlaceId
local currentPlace = game.PlaceId -- current game
game:GetService("TeleportService"):Teleport(currentPlace)
end)
--ServerSec:Label("This will put you in a new server!")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Rejoin Server
--ServerSec:Button("Rejoin Server",function()
--library:Notify("Information", "Attempting to rejoin server")
---- Rejoin Server
--	game:GetService("TeleportService"):Teleport(game.PlaceId,game:GetService("Players").LocalPlayer)
--end)
--ServerSec:Label("This will rejoin the server!")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Rejoin Private
ServerSec:Button("Rejoin Server",function()
    library:Notify("Information", "Attempting to rejoin server")
    local success, errorMessage = pcall(function()
        -- Attempt to rejoin server
        game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
    end)
    if not success then
        library:Notify("Error", "Failed to rejoin server: " .. errorMessage)
    else
        -- Check if joined server is private or not
        local isPrivate = game:GetService("Workspace").StreamingEnabled
        if isPrivate then
            library:Notify("Information", "Rejoining private server")
        else
            library:Notify("Information", "Rejoining public server")
        end
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Exit game
ServerSec:Button("Exit Game",function()
library:Notify("Information", "Attempting to exit game")
game:shutdown()
end)
--ServerSec:Label("This will leave the game!")
------------------------------------------------------------------------------






------------------------------------------------------------------------------
-- Player Tab
------------------------------------------------------------------------------
-- Player Walk Speed
PlayerSec:Slider("Walk speed", 16, 16, 350, false, function(Value)
   getgenv().Speed = (Value)
   game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
   end)
	   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = getgenv().Speed
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = getgenv().Speed
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Sprint Slider
PlayerSec:Slider("Shift to Sprint Speed", 50, 50, 350, false, function(Value)
   speed = Value
   if toggle then	
	   getgenv().Speed = speed
   end
end)
--PlayerSec:Label("Notice: when using the sprint, walkspeed may reset")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Player Jump Power
PlayerSec:Slider("Jump Power", 50, 50, 350, false, function(Value)
game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Player Character Height
PlayerSec:Slider("Character Height", 0, 0, 350, false, function(Value)
game.Players.LocalPlayer.Character.Humanoid.HipHeight = (Value)
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Player Field of View
PlayerSec:Slider("Field of View", nil, 70, 140, false, function(Value)
game:GetService("Workspace").Camera.FieldOfView = (Value)
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Player Zoom Distance Slider
PlayerSec:Slider("Zoom Distance", nil, 100, 10000, false, function(Value)
game.Players.LocalPlayer.CameraMaxZoomDistance = Value
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Flashlight range
local mouse = game:GetService("UserInputService")
local lightOn = false
local pointLight = nil
Range = 50
PlayerSec:Slider("Flashlight Range", 15, 30, 60, true, function(Value)
 Range = Value
 if pointLight then
   pointLight.Range = Range
 end
end)
local inputBeganConnection
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- no clip
local noclipping = false

function toggleNoClip()
    local disableCollide 
    disableCollide = game:GetService("RunService").Stepped:connect(function()
        for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if noclipping == false then
                disableCollide:Disconnect()
                return
            end
            if v:IsA("BasePart") then
                v.CanCollide = false
            end
        end
    end)
end
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- flight speed
local Flyingkey = "q"
local FlyingEnabled = false-- name, default, min, max, precise
--local noclipping = false -- noclip off
--local maxspeed = Value 

PlayerSec:Slider("Flight Speed", 150, 1, 1000, true, function(Value)-- fix slider values
maxspeed = Value
--local noclipping = true -- activate when flying
end)

function BetterFly()
    repeat wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("Head") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid") 
    local mouse = game.Players.LocalPlayer:GetMouse() 
    repeat wait() until mouse
    local plr = game.Players.LocalPlayer 
    local torso = plr.Character.Head 
    local flying = false
    local deb = true 
    local ctrl = {f = 0, b = 0, l = 0, r = 0} 
    local lastctrl = {f = 0, b = 0, l = 0, r = 0}
    local speed = 5000

    function Fly() 
        local bg = Instance.new("BodyGyro", torso) 
        bg.P = 9e4 
        bg.maxTorque = Vector3.new(9e9, 9e9, 9e9) 
        bg.cframe = torso.CFrame 
        local bv = Instance.new("BodyVelocity", torso) 
        bv.velocity = Vector3.new(0,0.1,0) 
        bv.maxForce = Vector3.new(9e9, 9e9, 9e9) 
        repeat wait() 
            plr.Character.Humanoid.PlatformStand = true 
            if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then 
                speed = maxspeed
            elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then 
                speed = 0 
            end 
            if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then 
                bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
                lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r} 
            elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then 
                bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*0.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
            else 
                bv.velocity = Vector3.new(0,0,0) 
            end 
            bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*speed/maxspeed),0,0) 
        until not flying 
        ctrl = {f = 0, b = 0, l = 0, r = 0} 
        lastctrl = {f = 0, b = 0, l = 0, r = 0} 
        speed =Range
		bg:Destroy()
		bv:Destroy()
		plr.Character.Humanoid.PlatformStand = false
		end
		mouse.KeyDown:connect(function(key) 
			if key:lower() == Flyingkey and FlyingEnabled == true then 
				if flying then 
					flying = false 
				else 
					flying = true 
					Fly() 
				end 
			elseif key:lower() == "w" then 
				ctrl.f = 1 
			elseif key:lower() == "s" then 
				ctrl.b = -1 
			elseif key:lower() == "a" then 
				ctrl.l = -1 
			elseif key:lower() == "d" then 
				ctrl.r = 1 
			end 
		end) 
		
		mouse.KeyUp:connect(function(key) 
			if key:lower() == "w" then 
				ctrl.f = 0 
			elseif key:lower() == "s" then 
				ctrl.b = 0 
			elseif key:lower() == "a" then 
				ctrl.l = 0 
			elseif key:lower() == "d" then 
				ctrl.r = 0 
			end 
		end)
		
		Fly()
	end

	game.Players.LocalPlayer.CharacterAdded:Connect(BetterFly)
	BetterFly()
	
	PlayerSec:Toggle("Flight", true, function(Value)
	FlyingEnabled = Value
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Shift to Sprint Toggle
PlayerSec:Toggle("Shift to Sprint", true, function(Value)
	toggle = Value
	if player then
		local character = player.Character
		if character then
			local humanoid = character:FindFirstChild("Humanoid")
			if humanoid then
				local contextActionService = game:GetService("ContextActionService")
				if toggle then
					-- Enabled
					humanoid.WalkSpeed = speed
					humanoid.WalkSpeed = 16
					getgenv().Speed = 16
					humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
						humanoid.WalkSpeed = getgenv().Speed
					end)
					
					local function handler(actionName, inputState)
						if actionName == "Run" and inputState == Enum.UserInputState.Begin then
							getgenv().Speed = speed
						elseif actionName == "Run" and inputState == Enum.UserInputState.End then
							getgenv().Speed = 16
						end
						humanoid.WalkSpeed = getgenv().Speed
					end
					contextActionService:BindAction("Run", handler, false, Enum.KeyCode.LeftShift)
				else
					-- Disabled
					humanoid.WalkSpeed = 16
					contextActionService:UnbindAction("Run")
				end
			else
				-- Handle the case where the humanoid is not found
			end
		else
			-- Handle the case where the character is not found
		end
	else
		-- Handle the case where the player is not found
	end
 end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- no clip
PlayerSec:Toggle("Noclip", false, function(Value)
    if Value then
        -- Code on
        noclipping = true
        toggleNoClip()
    else
        -- Code off
        noclipping = false
        toggleNoClip()
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Custom Dragger
local CustomDragger = false

function Dragger()
   game.Workspace.ChildAdded:connect(function(a)
      if a.Name == "Dragger" then
         local bg = a:WaitForChild("BodyGyro")
         local bp = a:WaitForChild("BodyPosition")
         repeat
            if CustomDragger then
               task.wait()
               bp.P = 120000
               bp.D = 1000
               bp.maxForce = Vector3.new(math.huge,math.huge,math.huge)
               bg.maxTorque = Vector3.new(math.huge, math.huge, math.huge)
            else
               wait()
               bp.P = 10000
               bp.D = 800
               bp.maxForce = Vector3.new(17000, 17000, 17000)
               bg.maxTorque = Vector3.new(200, 200, 200)
            end
         until not a
      end
   end)
end

PlayerSec:Toggle("Drag Mod", CustomDragger, function(state)
   CustomDragger = state
   if CustomDragger then
      Dragger()
   else
   end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 --[[
-- Anti Void | very buggy teleports back when going to normal spots such as cavecrawler cave
function Tlprt(Cframe)
    game.Players.LocalPlayer.Character.Humanoid.Jump = true
    wait(0.1)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
end

PlayerThingsSec:Toggle("AntiVoid", false, function(state)
    if state then
        -- teleport the player to spawn when they're close to death or falling out of the map
        function CheckVoid()
            local character = player.Character
            if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health <= 5 then
                Tlprt(CFrame.new(184.19603, 2.99999928, 60.1133804, 0.0251162723, -6.01947603e-09, -0.999684513, -1.12522693e-08, 1, -6.30407992e-09, 0.999684513, 1.14070549e-08, 0.0251162723))
            end
        end
        
        -- check for out of bounds every second
        PlayerThingsSec.AntiVoidConnection = game:GetService("RunService").Heartbeat:Connect(function()
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local rootPart = character.HumanoidRootPart
                if rootPart.Position.Y < -80 then
                    Tlprt(CFrame.new(184.19603, 2.99999928, 60.1133804, 0.0251162723, -6.01947603e-09, -0.999684513, -1.12522693e-08, 1, -6.30407992e-09, 0.999684513, 1.14070549e-08, 0.0251162723))
                end
            end
            CheckVoid()
        end)
    else
        -- disconnect
        if PlayerThingsSec.AntiVoidConnection then
            PlayerThingsSec.AntiVoidConnection:Disconnect()
            PlayerThingsSec.AntiVoidConnection = nil
        end
    end
end)
]]
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Invisible
Requirements.Funcs.PlrTransparency = function(Value)
    for i,v in next, game.Players.LocalPlayer.Character:getChildren() do
        if v:IsA("Part") and v.Name ~= "HumanoidRootPart" then
            v.Transparency = Value
        end
    end
end

Requirements.Funcs.CloneTP = function(Val,Pos)
    if Val then
        task.spawn(function()
            game.Players.LocalPlayer.Character.Archivable = true
            Requirements.Strings.TModel = Instance.new("Model")
            Requirements.Strings.Hum_Clone = game.Players.LocalPlayer.Character.HumanoidRootPart:Clone()
            Requirements.Strings.TModel.Parent = game:GetService("Workspace")
            Requirements.Strings.Temp = game.Players.LocalPlayer.Character:Clone()
            Requirements.Strings.Temp.Parent = game:GetService("Workspace")
            Requirements.Strings.Temp.Humanoid.DisplayName = " "
            game:GetService("Workspace").CurrentCamera.CameraSubject = Requirements.Strings.Temp.Head
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Pos
            wait(.1)
            Requirements.Vars.HRP.Parent = Requirements.Strings.TModel
            Requirements.Strings.Hum_Clone.Parent = game.Players.LocalPlayer.Character
            game:GetService("Workspace").CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Head
            Requirements.Strings.Temp:Destroy()
        end)
    else
        if Requirements.Strings.Hum_Clone then
            Requirements.Strings.Hum_Clone:Destroy()
            Requirements.Strings.Hum_Clone = nil
        end
        Requirements.Vars.HRP.Parent = game.Players.LocalPlayer.Character
        if Requirements.Strings.TModel then
            Requirements.Strings.TModel:Destroy()
            Requirements.Strings.TModel = nil
        end
    end
end

Requirements.Funcs.Invisible = function(Value)
    if Value then
        Requirements.Funcs.CloneTP(true,CFrame.new(4813.1, 33.5, -978.8))
        Requirements.Funcs.PlrTransparency(0.5)
    else
        Requirements.Funcs.CloneTP(false)
        Requirements.Funcs.PlrTransparency(0)
    end
end

PlayerSec:Toggle("Invisible",false,function(Value)
    Requirements.Funcs.Invisible(Value)
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Infinite Jump
local connection
local function toggleInfiniteJump(value)
  local InfiniteJumpEnabled = value
  if InfiniteJumpEnabled then
	if not connection then
	  connection = game:GetService("UserInputService").JumpRequest:connect(function()
		game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
	  end)
	end
  else
	if connection then
	  connection:disconnect()
	  connection = nil
	end
  end
end
PlayerSec:Toggle("Infinite Jump", false, toggleInfiniteJump)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Flashlight (F)
PlayerSec:Toggle("Flash Light (F)", true, function(state)
 if state then
   inputBeganConnection = mouse.InputBegan:Connect(function(inputObject)
	 if inputObject.KeyCode.Name == "F" then
	   lightOn = not lightOn
	   if lightOn then
		 character = game:GetService("Players").LocalPlayer.Character
		 pointLight = Instance.new("PointLight")
		 pointLight.Parent = character.HumanoidRootPart
		 pointLight.Brightness = 2
		 pointLight.Range = Range
	   else
		 if pointLight then
		   pointLight:Destroy()
		 end
	   end
	 end
   end)
 elseif inputBeganConnection then
   inputBeganConnection:Disconnect()
   inputBeganConnection = nil
 end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Click To TP
PlayerSec:Button("Ctrl Click TP",function()
	library:Notify("Reminder!", "hold the control key when clicking to TP, this goes away when dying!", false)
	loadstring
	end)
	------------------------------------------------------------------------------
	
	
	
	
	
	
	
	------------------------------------------------------------------------------
	-- Safe Death
	PlayerSec:Button("Safe Death", function ()
	game.Players.LocalPlayer.Character.Head:Remove()
	end)
	------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- World Brightness
WorldEnvSec:Slider("World Brightness", nil, nil, 50, false, function(Value)
	game:GetService("Lighting").Brightness = (Value)
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Always Day / Night /  | No Fog resets when day/night toggles are false, but not whe togled true
local TODRequirements = {
    TODConfig = {
        AlwaysDay = false,
        AlwaysNight = false,
        NoFog = false,
        Spook = false,
        Tables = {
            UIVars = {
                AD = nil,
                AN = nil,
            },
        },
    },
}

local spookChangedConn = nil -- define the connection variable

game.Lighting.Changed:Connect(function()
    if TODRequirements.TODConfig.AlwaysDay then
        game.Lighting.TimeOfDay = "12:00:00"
        if game:GetService"Lighting":FindFirstChild"SunPos" then
            game.Lighting.SunPos.Value = 1
        end
    end
    if TODRequirements.TODConfig.AlwaysNight then
        game.Lighting.TimeOfDay = "24:00:00"
        if game:GetService"Lighting":FindFirstChild"SunPos" then
            game.Lighting.SunPos.Value = -1
        end
    end
    if TODRequirements.TODConfig.NoFog then
        game.Lighting.FogEnd = 100000
        game.Lighting.FogColor = Color3.fromRGB(255, 255, 255)
        game.Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
        local colorCorrection = game.Lighting:FindFirstChildOfClass("ColorCorrectionEffect")
        if colorCorrection then
            colorCorrection.TintColor = Color3.fromRGB(255, 255, 255)
        end
    end
    -- Disconnect the spookChangedConn before setting game.Lighting.Spook.Value
    if spookChangedConn then
        spookChangedConn:Disconnect()
    end
    if TODRequirements.TODConfig.Spook then
        game.Lighting.Spook.Value = true
    else
        game.Lighting.Spook.Value = false
    end
    -- Reconnect the spookChangedConn after setting game.Lighting.Spook.Value
    spookChangedConn = game.Lighting.Spook.Changed:Connect(function()
        TODRequirements.TODConfig.Spook = game.Lighting.Spook.Value
    end)
end)

TODRequirements.TODConfig.Tables.UIVars.AD = WorldSec:Toggle("Always Day", false, function(Value)
    if TODRequirements.TODConfig.AlwaysNight and Value then
        TODRequirements.TODConfig.Tables.UIVars.AN:Set(false)
    end
    TODRequirements.TODConfig.AlwaysDay = Value
end)

TODRequirements.TODConfig.Tables.UIVars.AN = WorldSec:Toggle("Always Night", false, function(Value)
    if TODRequirements.TODConfig.AlwaysDay and Value then
        TODRequirements.TODConfig.Tables.UIVars.AD:Set(false)
    end
    TODRequirements.TODConfig.AlwaysNight = Value
end)

WorldSec:Toggle("Clear Fog", false, function(Value)
    TODRequirements.TODConfig.NoFog = Value
end)

WorldSec:Toggle("Spook", false, function(Value)
    TODRequirements.TODConfig.Spook = Value
end)
------------------------------------------------------------------------------

 





------------------------------------------------------------------------------
-- Gravity 
WorldSec:Slider("World Gravity", 196, 16, 196, false, function(Value)
game.Workspace.Gravity = (Value)
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Xray Mode
local descendants = {}
WorldSec:Toggle("Xray Mode", false, function(value)
if value then
if #descendants == 0 then
for _, d in pairs(workspace:GetDescendants()) do
if d:IsA("BasePart") then
descendants[#descendants + 1] = d
end
end
end
for _, d in pairs(descendants) do
local transpVal = Instance.new("NumberValue", d)
transpVal.Name = "transpVal"
transpVal.Value = d.Transparency
d.Transparency = d.Transparency + 0.75
end
else
for _, d in pairs(descendants) do
if d:FindFirstChild("transpVal") then
d.Transparency = d:FindFirstChild("transpVal").Value
d:FindFirstChild("transpVal"):Destroy()
end
end
end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Leaf Colors
WorldEnvSec:ColorPicker("Leaf Colors", Color3.fromRGB(79, 63, 29), function(Value)
	local SelectedLeafColor = (Value)
	local Leaves = {}
	for i, v in next, game:GetService("Workspace"):GetDescendants() do
		if v.Name == 'LeafPart' then
			table.insert(Leaves, v)
		end
	end
	local BatchSize = 15
	local CurrentIndex = 1
	while CurrentIndex <= #Leaves do
		local EndIndex = math.min(CurrentIndex + BatchSize - 1, #Leaves)
		for i = CurrentIndex, EndIndex do
			Leaves[i].BrickColor = BrickColor.new(SelectedLeafColor)
		end
		CurrentIndex = EndIndex + 1
		game:GetService("RunService").Stepped:wait()
	end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
--[[
	-- Color Tints
local enabled = false
local colorCorrection = game.Lighting:FindFirstChildOfClass("ColorCorrectionEffect")

-- Create the blue light filter
local blueFilter = Instance.new("ColorCorrectionEffect")
blueFilter.Name = "BlueLightFilter"
blueFilter.Enabled = false
blueFilter.Brightness = 0
blueFilter.Contrast = 0
blueFilter.Saturation = -1
blueFilter.TintColor = Color3.fromRGB(0, 0, 255)
blueFilter.Parent = game.Lighting

-- Toggle function
local function toggleFilter(state)
    enabled = state
    if enabled then
        -- Turn on the blue light filter
        if colorCorrection then
            colorCorrection.Enabled = false
        end
        blueFilter.Enabled = true
    else
        -- Turn off the blue light filter
        blueFilter.Enabled = false
        if colorCorrection then
            colorCorrection.Enabled = true
        end
    end
end

-- Add the toggle button
WorldSec:Toggle("Blue Light Filter", false, toggleFilter)
]]
------------------------------------------------------------------------------







------------------------------------------------------------------------------
local lightFilter = nil
local toggle = false

GraphicsSec:Toggle("Blue Light Filter", false, function(state)
    toggle = state
    if toggle then
    library:Notify("Success", "Blue Light Has been enabled.")
        lightFilter = Instance.new("ColorCorrectionEffect", game.Lighting)
        lightFilter.Name = "BlueLightFilter"
        lightFilter.Brightness = 0.1
        lightFilter.Contrast = 0.1
        lightFilter.Saturation = 0.5
        lightFilter.TintColor = Color3.fromRGB(200, 200, 255)
    else
        if lightFilter then
            lightFilter:Destroy()
            lightFilter = nil
        end
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Improve Graphice
--local GraphicsEnabled = false
--
--local function enableGraphics()
--    if GraphicsEnabled then
--        return
--    end
--
--    GraphicsEnabled = true
--
--    -- Roblox Graphics Enhancer
--    local light = game.Lighting
--    for i, v in pairs(light:GetChildren()) do
--        if v:IsA("SunRaysEffect") then
--            v:Destroy()
--        end
--    end
--
--    local ter = workspace.Terrain
--    local color = Instance.new("ColorCorrectionEffect")
--    local bloom = Instance.new("BloomEffect")
--    local sun = Instance.new("SunRaysEffect")
--    local blur = Instance.new("BlurEffect")
--
--    color.Parent = light
--    bloom.Parent = light
--    sun.Parent = light
--    blur.Parent = light
--
--    -- Enable or disable settings
--    local config = {
--        Terrain = true,
--        ColorCorrection = true,
--        Sun = false,
--        Lighting = true,
--        BloomEffect = true
--    }
--
--    -- Settings
--    color.Enabled = false
--    color.Contrast = 0.15
--    color.Brightness = 0.1
--    color.Saturation = 0.25
--    color.TintColor = Color3.fromRGB(255, 222, 211)
--
--    bloom.Enabled = false
--    bloom.Intensity = 0.1
--
--    sun.Enabled = false
--    sun.Intensity = 0.2
--    sun.Spread = 1
--
--    blur.Enabled = false
--    blur.Size = 6
--
--    if config.ColorCorrection then
--        color.Enabled = true
--    end
--
--    if config.Sun then
--        sun.Enabled = true
--    end
--
--    if config.Terrain then
--        ter.WaterColor = Color3.fromRGB(10, 10, 24)
--        ter.WaterWaveSize = 0.1
--        ter.WaterWaveSpeed = 22
--        ter.WaterTransparency = 0.9
--        ter.WaterReflectance = 0.05
--    end
--
--    if config.Lighting then
--        light.Ambient = Color3.fromRGB(0, 0, 0)
--        light.Brightness = 4
--        light.ColorShift_Bottom = Color3.fromRGB(0, 0, 0)
--        light.ColorShift_Top = Color3.fromRGB(0, 0, 0)
--        light.ExposureCompensation = 0
--        light.FogColor = Color3.fromRGB(132, 132, 132)
--        light.GlobalShadows = true
--        light.OutdoorAmbient = Color3.fromRGB(112, 117, 128)
--        light.Outlines = false
--    end
--
--    library:Notify("Success", "Graphics have been improved.")
--end
--
--local function disableGraphics()
--    if not GraphicsEnabled then
--        return
--    end
--
--    GraphicsEnabled = false
--
--    -- Disable effects
--    for _, effect in pairs(game.Lighting:GetDescendants()) do
--        if effect:IsA("PostEffect") then
--            effect.Enabled = false
--        end
--    end
--
--end
--
--GraphicsSec:Toggle("Improved Graphics", false, function(enabled)
--    if enabled then
--        enableGraphics()
--    else
--        disableGraphics()
--    end
--end)

local function toggleGraphics(enabled)
	if enabled then
	-- Enable graphics
	local light = game.Lighting
	for i, v in pairs(light:GetChildren()) do
	if v:IsA("SunRaysEffect") then
	v:Destroy()
	end
	end
    local ter = workspace.Terrain
    local color = Instance.new("ColorCorrectionEffect")
    local bloom = Instance.new("BloomEffect")
    local sun = Instance.new("SunRaysEffect")
    local blur = Instance.new("BlurEffect")

    color.Parent = light
    bloom.Parent = light
    sun.Parent = light
    blur.Parent = light

    -- Enable or disable settings
    local config = {
        Terrain = true,
        ColorCorrection = true,
        Sun = false,
        Lighting = true,
        BloomEffect = true
    }

    -- Settings
    color.Enabled = false
    color.Contrast = 0.15
    color.Brightness = 0.1
    color.Saturation = 0.25
    color.TintColor = Color3.fromRGB(255, 222, 211)

    bloom.Enabled = false
    bloom.Intensity = 0.1

    sun.Enabled = false
    sun.Intensity = 0.2
    sun.Spread = 1

    blur.Enabled = false
    blur.Size = 6

    if config.ColorCorrection then
        color.Enabled = true
    end

    if config.Sun then
        sun.Enabled = true
    end

    if config.Terrain then
        ter.WaterColor = Color3.fromRGB(10, 10, 24)
        ter.WaterWaveSize = 0.1
        ter.WaterWaveSpeed = 22
        ter.WaterTransparency = 0.9
        ter.WaterReflectance = 0.05
    end

    if config.Lighting then
        light.Ambient = Color3.fromRGB(0, 0, 0)
        light.Brightness = 4
        light.ColorShift_Bottom = Color3.fromRGB(0, 0, 0)
        light.ColorShift_Top = Color3.fromRGB(0, 0, 0)
        light.ExposureCompensation = 0
        light.FogColor = Color3.fromRGB(132, 132, 132)
        light.GlobalShadows = true
        light.OutdoorAmbient = Color3.fromRGB(112, 117, 128)
        light.Outlines = false
    end

    library:Notify("Success", "Graphics have been improved.")
else
    -- Disable graphics
    for _, effect in pairs(game.Lighting:GetDescendants()) do
        if effect:IsA("PostEffect") then
            effect.Enabled = false
        end
    end
end
end

GraphicsSec:Toggle("Improved Graphics", false, toggleGraphics)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Better Graphics Toggle
--local toggle = false
--local function enableBetterGraphics()
--    _G.BlurSize = 3
--    _G.ColorCorrectionBrightness = 0.03
--    _G.ColorCorrectionContrast = 0.3
--    _G.ColorCorrectionSaturation = 0.01
--    _G.ColorCorrectionTintColor = Color3.fromRGB(244, 244, 244)
--    _G.SunRaysIntensity = 0.2
--    _G.SunRaysSpread = 1
--    _G.GlobalShadows = true
--    _G.Brightness = 0.9
--    _G.GeographicLatitude = 350
--    _G.TimeOfDay = 17
--    _G.ExposureCompensation = 0.03
--
--    spawn(function()
--        _, i = pcall(function()
--            Lighting = game:GetService("Lighting")
--            Blur = Instance.new("BlurEffect", Lighting)
--            Color = Instance.new("ColorCorrectionEffect", Lighting)
--            Sun = Instance.new("SunRaysEffect", Lighting)
--            Blur.Enabled = true
--            Blur.Size = _G.BlurSize
--            Color.Enabled = true
--            Color.Brightness = _G.ColorCorrectionBrightness
--            Color.Contrast = _G.ColorCorrectionContrast
--            Color.Saturation = _G.ColorCorrectionSaturation
--            Color.TintColor = _G.ColorCorrectionTintColor
--            Sun.Enabled = true
--            Sun.Intensity = _G.SunRaysIntensity
--            Sun.Spread = _G.SunRaysSpread
--            function loadLighting()
--                Lighting.GlobalShadows = _G.GlobalShadows
--                Lighting.Brightness = _G.Brightness
--                Lighting.GeographicLatitude = _G.GeographicLatitude
--                Lighting.TimeOfDay = _G.TimeOfDay
--                Lighting.ExposureCompensation = _G.ExposureCompensation
--            end
--            loadLighting()
--        end)
--        if i and not _ then
--            print("ERROR: " .. i)
--        else
----          print("Loaded HD Graphics <3")
--        end
--    end)
--end
--local function disableBetterGraphics()
--    Lighting = game:GetService("Lighting")
--    for _, effect in ipairs(Lighting:GetChildren()) do
--        if effect:IsA("PostEffect") then
--            effect:Destroy()
--        end
--    end
--end
--GraphicsSec:Toggle("Better Graphics", false, function(state)
--    toggle = state
--    if toggle then
--    library:Notify("Success", "Better Graphics have been enabled.")
--        enableBetterGraphics()
--    else
--        disableBetterGraphics()
--    end
--end)
local graphicsSettings = {
    BlurSize = 3,
    ColorCorrectionBrightness = 0.03,
    ColorCorrectionContrast = 0.3,
    ColorCorrectionSaturation = 0.01,
    ColorCorrectionTintColor = Color3.fromRGB(244, 244, 244),
    SunRaysIntensity = 0.2,
    SunRaysSpread = 1,
    GlobalShadows = true,
    Brightness = 0.9,
    GeographicLatitude = 350,
    TimeOfDay = 17,
    ExposureCompensation = 0.03
}

local function enableBetterGraphics()
    for setting, value in pairs(graphicsSettings) do
        _G[setting] = value
    end

    spawn(function()
        local lighting = game:GetService("Lighting")

        local blur = Instance.new("BlurEffect", lighting)
        blur.Enabled = true
        blur.Size = _G.BlurSize

        local color = Instance.new("ColorCorrectionEffect", lighting)
        color.Enabled = true
        color.Brightness = _G.ColorCorrectionBrightness
        color.Contrast = _G.ColorCorrectionContrast
        color.Saturation = _G.ColorCorrectionSaturation
        color.TintColor = _G.ColorCorrectionTintColor

        local sun = Instance.new("SunRaysEffect", lighting)
        sun.Enabled = true
        sun.Intensity = _G.SunRaysIntensity
        sun.Spread = _G.SunRaysSpread

        local function loadLighting()
            lighting.GlobalShadows = _G.GlobalShadows
            lighting.Brightness = _G.Brightness
            lighting.GeographicLatitude = _G.GeographicLatitude
            lighting.TimeOfDay = _G.TimeOfDay
            lighting.ExposureCompensation = _G.ExposureCompensation
        end
        loadLighting()
    end)
end

local function disableBetterGraphics()
    local lighting = game:GetService("Lighting")
    for _, effect in ipairs(lighting:GetChildren()) do
        if effect:IsA("PostEffect") then
            effect:Destroy()
        end
    end
end

GraphicsSec:Toggle("Better Graphics", false, function(state)
    if state then
        enableBetterGraphics()
        library:Notify("Success", "Better Graphics have been enabled.")
    else
        disableBetterGraphics()
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 -- Anti Wood Glow/HDR
--local hdrEnabled = false
--local hdrEffect = nil
--
--GraphicsSec:Toggle("Anti Wood Glow", false, function(enabled)
--    hdrEnabled = enabled
--    
--    if hdrEnabled then
--        -- enable HDR effect
--        hdrEffect = Instance.new("BloomEffect", game.Lighting)
--        hdrEffect.Enabled = true
--        hdrEffect.Intensity = 0.1
--        hdrEffect.Size = 20
--        hdrEffect.Threshold = 0.5
--    else
--        -- disable HDR effect
--        if hdrEffect then
--            hdrEffect:Destroy()
--            hdrEffect = nil
--        end
--    end
--end)
 --Disable Wood Glow
 local DisableWoodGlow = {
    enabled = false,
    effect = nil,
}

GraphicsSec:Toggle("Disable Wood Glow", false, function(enabled)
    DisableWoodGlow.enabled = enabled
    -- enable effect
	if DisableWoodGlow.enabled then
        DisableWoodGlow.effect = Instance.new("BloomEffect", game.Lighting)
        DisableWoodGlow.effect.Enabled = true
        DisableWoodGlow.effect.Intensity = 0.1
        DisableWoodGlow.effect.Size = 20
        DisableWoodGlow.effect.Threshold = 0.5
    else
        -- disable effect
        if DisableWoodGlow.effect then
            DisableWoodGlow.effect:Destroy()
            DisableWoodGlow.effect = nil
        end
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Bloom Graphics Toggle
local toggle = false
GraphicsSec:Toggle("Bloom Graphics", false, function(state)
    toggle = state
    if toggle then
        -- Enable bloom graphics
        if not bloom then
            bloom = Instance.new("BloomEffect", game.Lighting)
        end
        bloom.Intensity = 1
        bloom.Size = 56
        bloom.Threshold = 0.5

        -- Enable color correction graphics
        if not color then
            color = Instance.new("ColorCorrectionEffect", game.Lighting)
        end
        color.TintColor = Color3.fromRGB(216, 216, 216)

        -- Enable sun rays graphics
        if not rays then
            rays = Instance.new("SunRaysEffect", game.Lighting)
        end
        rays.Intensity = 0.25
        rays.Spread = 2

        library:Notify("Success", "Bloom Graphics have been enabled.")
    else
        -- Disable bloom graphics
        if bloom then
            bloom:Destroy()
            bloom = nil
        end

        -- Disable color correction graphics
        if color then
            color:Destroy()
            color = nil
        end

        -- Disable sun rays graphics
        if rays then
            rays:Destroy()
            rays = nil
        end
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Normal Theme
MapThemesSec:Button("Normal Theme", function()
-- road material
local RoadMaterial = "Pebble"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Road' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- roads material
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Road' then
    v.BrickColor = BrickColor.new('Mid gray')
end
end
-- Grass Color
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Ground' then
    v.BrickColor = BrickColor.new('Dark green')
end
end
-- Grass Material
local RoadMaterial = "Grass"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Ground' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- Sand Color
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Pebble' then
    v.BrickColor = BrickColor.new('Pastel yellow')
end
end
-- Sand Material
local RoadMaterial = "Pebble"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Pebble' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- wood Material
local RoadMaterial = "Wood"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'WoodSection' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- Leaf Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'LeafPart' then
    v.BrickColor = BrickColor.new('Brown')
end
end
-- Leaf Material
local RoadMaterial = "Grass"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'LeafPart' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- Rock material
local RoadMaterial = "Slate"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Slate' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- Rock Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Slate' then
    v.BrickColor = BrickColor.new('Brown')
end
end
-- Volc Colors
for i, v in next, game:GetService("Workspace")["Region_Volcano"]:GetDescendants() do
    if v.Name == 'Part' then
    v.BrickColor = BrickColor.new('Dark stone grey')
end
end
-- Other Rock Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Wedge' then
    v.BrickColor = BrickColor.new('Dark stone grey')
end
end
-- Wood Logs
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'WoodSection' then
    v.BrickColor = BrickColor.new('Brown')
end
end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 -- Christmas theme
MapThemesSec:Button("Christmas Theme", function()
-- roads material
local RoadMaterial = "Glacier"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Road' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- road color
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Road' then
    v.BrickColor = BrickColor.new('Institutional white')
end
end

-- Grass Color
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Ground' then
    v.BrickColor = BrickColor.new('Institutional white')
end
end
-- Grass Material
local RoadMaterial = "Snow"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Ground' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- wood Material
local RoadMaterial = "Wood"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'WoodSection' then
		v.Material = ("" .. RoadMaterial .. "")
end
end

-- Wood Logs
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'WoodSection' then
    v.BrickColor = BrickColor.new('Brown')
end
end
-- Sand Color
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Pebble' then
    v.BrickColor = BrickColor.new('Institutional white')
end
end
-- Sand Material
local RoadMaterial = "Glacier"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Pebble' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- Sand Material 2
local RoadMaterial = "Glacier"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Sand' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- sand material 2 color
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Sand' then
    v.BrickColor = BrickColor.new('Institutional white')
end
end
-- Wood Logs
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'WoodSection' then
    v.BrickColor = BrickColor.new('Institutional white')
end
end
-- Leaf Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'LeafPart' then
    v.BrickColor = BrickColor.new('Institutional white')
end
end
-- Leaf Material
local RoadMaterial = "Snow"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'LeafPart' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- Rock Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Slate' then
    v.BrickColor = BrickColor.new('Institutional white')
end
end
-- Volc Colors
for i, v in next, game:GetService("Workspace")["Region_Volcano"]:GetDescendants() do
    if v.Name == 'Part' then
    v.BrickColor = BrickColor.new('Institutional white')
end
end
-- Other Rock Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Wedge' then
    v.BrickColor = BrickColor.new('Institutional white')
end
end
end)
------------------------------------------------------------------------------






------------------------------------------------------------------------------
-- Halloween Theme
MapThemesSec:Button("Halloween Theme", function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/silentben8x/Silent/main/Halloween"))()
end)
--------------------------------------------------------------------------------




------------------------------------------------------------------------------
-- Autumn Theme 
MapThemesSec:Button("Autumn Theme", function()
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Road' then
    v.BrickColor = BrickColor.new('Mid gray')
end
end
-- roads
local RoadMaterial = "Cobblestone"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Road' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- Grass
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Ground' then
    v.BrickColor = BrickColor.new('Nougat')
end
end
-- Grass Material
local RoadMaterial = "Grass"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Ground' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- wood material
local RoadMaterial = "Wood"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'WoodSection' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- Wood Logs
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'WoodSection' then
    v.BrickColor = BrickColor.new('White')
end
end
-- leaf material
local RoadMaterial = "Grass"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'LeafPart' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
-- Leaf Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'LeafPart' then
    v.BrickColor = BrickColor.new('Nougat')
end
end
-- Rock Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Slate' then
    v.BrickColor = BrickColor.new('Brown')
end
end
-- Volc Colors
for i, v in next, game:GetService("Workspace")["Region_Volcano"]:GetDescendants() do
    if v.Name == 'Part' then
    v.BrickColor = BrickColor.new('Dark stone grey')
end
end
-- Other Rock Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Wedge' then
    v.BrickColor = BrickColor.new('Dark stone grey')
end
end
-- Sand Color
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Pebble' then
    v.BrickColor = BrickColor.new('Brick yellow')
end
end
-- Sand Material
local RoadMaterial = "Sand"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Pebble' then
		v.Material = ("" .. RoadMaterial .. "")
end
end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 -- Alien Theme
MapThemesSec:Button("Alien Theme", function()
-- roads
local RoadMaterial = "Granite"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Road' then
		v.Material = ("" .. RoadMaterial .. "")
end
end

-- road color
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Road' then
    v.BrickColor = BrickColor.new('Parsley green')
end
end


-- Grass
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Ground' then
    v.BrickColor = BrickColor.new('Royal purple')
end
end


-- Grass Material
local RoadMaterial = "Glass"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Ground' then
		v.Material = ("" .. RoadMaterial .. "")
end
end

-- wood Material
local RoadMaterial = "Neon"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'WoodSection' then
		v.Material = ("" .. RoadMaterial .. "")
end
end

-- Wood Logs
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'WoodSection' then
    v.BrickColor = BrickColor.new('New Yeller')
end
end



-- leaf material
local RoadMaterial = "Neon"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'LeafPart' then
		v.Material = ("" .. RoadMaterial .. "")
end
end

-- Leaf Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'LeafPart' then
    v.BrickColor = BrickColor.new('Toothpaste')
end
end

-- rock material
local RoadMaterial = "Granite"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Slate' then
		v.Material = ("" .. RoadMaterial .. "")
end
end

-- Rock Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Slate' then
    v.BrickColor = BrickColor.new('Dark blue')
end
end

-- Other Rock Colors
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Wedge' then
    v.BrickColor = BrickColor.new('Dark blue')
end
end

-- Sand Color
for i, v in next, game:GetService("Workspace"):GetDescendants() do
    if v.Name == 'Pebble' then
    v.BrickColor = BrickColor.new('Brick yellow')
end
end

-- Sand Material
local RoadMaterial = "Sand"
for k, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Pebble' then
		v.Material = ("" .. RoadMaterial .. "")
end
end

end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 -- Silent's Willy Wonker Theme
MapThemesSec:Button("Willy Wonker Theme (creds to silent)", function()
print("Willy Wonk By silent ben8x")
--Boronideâ„¢ Premium Obfuscation, v0.5.0
loadstring(game:HttpGet("https://raw.githubusercontent.com/silentben8x/Silent/main/Halloween"))()
end)
MapThemesSec:Label("Some things from themes may remain the same")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Solid Water
-- Store the water objects in a table for easy access
local waterObjects = {
    game:GetService("Workspace").Bridge.VerticalLiftBridge.WaterModel,
    game.Workspace.Water,
    -- Add more water objects here if needed
}

-- Create a toggle button for "Solid Water"
WorldSec:Toggle("Solid Water", false, function(state)
    -- When the toggle is changed, set the CanCollide property for all water objects
    for _, waterObject in ipairs(waterObjects) do
        local waterParts = waterObject:GetDescendants()
        for _, waterPart in ipairs(waterParts) do
            if waterPart.Name == "Water" then
                waterPart.CanCollide = state
            end
        end
    end
end)

------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Remove Shadows
RemovalSec:Toggle("Remove Shadows", false, function(state)
	toggle = state
	if toggle then
		game:GetService("Lighting").GlobalShadows = false
	else
		game:GetService("Lighting").GlobalShadows = true
	end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Remove Water
RemovalSec:Toggle("Remove Water", false, function(state)
	toggle = state
	for _,v in pairs(game.Workspace.Water:GetChildren()) do
	if v.Name == "Water" then
	if toggle then
	v.Transparency = 1;
	else
	v.Transparency = 0;
	end
	end
	end
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Remove Lava
RemovalSec:Toggle("Remove Lava", false, function(state)
	toggle = state
	for i,v in pairs(game.Workspace.Region_Volcano:GetDescendants()) do
	if v.Name == "TouchInterest" then
	v:Destroy()
	elseif v.Name == "Lava" then
	for n,k in pairs(v:GetChildren()) do
	if k:IsA("Part") then
	if toggle then
	k.Transparency = 1
	else
	k.Transparency = 0
	end
	end
	end
	end
	end
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Remove Shrine Doors
RemovalSec:Button("Remove Shrine Doors", function()
	workspace.Region_Mountainside.BoulderRegen.Boulder:Destroy()
	workspace.Region_Mountainside.Door.Door:Destroy()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
--[[
-- Removes Maze Walls | Testing
RemovalSec:Toggle("Removes Maze Walls", false, function(state)
	toggle = state
	local blockades = workspace.Region_MazeCave.Blockade
	for i, v in pairs(blockades:GetChildren()) do
	if toggle then
	v:Destroy()
	else
	-- Code to bring back the walls
	end
	end
	end)
]]
------------------------------------------------------------------------------








------------------------------------------------------------------------------
-- Removes Snow Boulders
RemovalSec:Button("Removes Snow Boulders", function()
	local boulders = workspace.Region_Snow:FindFirstChild("PartSpawner")
	for i, v in pairs(boulders:GetChildren()) do
	v:Destroy()
	end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Remove Volcano Boulders
RemovalSec:Button("Remove Volcano Boulders", function()
	local destroy = true
	local boulders = workspace.Region_Volcano:FindFirstChild("PartSpawner")
	while destroy == true do
	for i, v in pairs(boulders:GetChildren()) do
	v:Destroy()
	end
	wait(2)
	end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Path to Palm Trees
PathSec:Button("Path To Palm", function()
	local palm1 = Instance.new("Part", workspace)
	palm1.Position = Vector3.new(1753.475, -10, -45.351)
	palm1.Size = Vector3.new(1600, 1, 50)
	palm1.BrickColor = BrickColor.Random()
	palm1.Anchored = true
	palm1.CanCollide = true
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
PathSec:Button("Path to Volcano", function()
	local Material = loadstring(game:HttpGet("https://gist.githubusercontent.com/ItsEcstasy/917977df916341e9bde2bb4c8f692da5/raw/817c744f6a328e98d65c5df6abd897fd95b7253c/Path%2520to%2520volcano"))()
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
	-- Path to Safari
	PathSec:Button("Path to Safari", function()
	local Material = loadstring(game:HttpGet("https://gist.githubusercontent.com/ItsEcstasy/14393cbd5a97f68cf11774290d123b03/raw/47376fca1543fc9ddfd5896baf49a1f2d86672e9/Path%2520to%2520Safari"))()
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
	-- Path to Swamp
	PathSec:Button("Path To Swamp", function()
	local Material = loadstring(game:HttpGet("https://gist.githubusercontent.com/ItsEcstasy/c71f35fc802644408bf309e57deeb750/raw/a528ddb8d2a0e69e39147dbfb51d237c352afb2a/Path%2520to%2520Swamp"))()
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Path to SnowGlow
PathSec:Button("Path To SnowGlow", function()
	local Material = loadstring(game:HttpGet("https://gist.githubusercontent.com/ItsEcstasy/70be7839e50494c8680abec9f7e04100/raw/56a26c36a9769dca7716131063350d9c9b4da0e6/Path%2520to%2520Snowglow"))()
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Bridge Up/Down
-- Up
WorldSec:Button("Bridge Up", function()
   for _,v in pairs(game.workspace.Bridge.VerticalLiftBridge.Lift:GetChildren()) do
	 v.CFrame = v.CFrame + Vector3.new(0, 26, 0)
   end
 end)
 -- Down
 WorldSec:Button("Bridge Down", function()
   for _,v in pairs(game.workspace.Bridge.VerticalLiftBridge.Lift:GetChildren()) do
	 v.CFrame = v.CFrame + Vector3.new(0, -26, 0)
   end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Realistic Roads
local isRealisticRoadsOn = false

local roads = game:GetService("Workspace"):GetDescendants()
local roadNames = {}

for _, v in ipairs(roads) do
    if v.Name == 'Road' then
        table.insert(roadNames, v)
    end
end

local function setRoadColorAndMaterial(color, material)
    for _, road in ipairs(roadNames) do
        road.BrickColor = BrickColor.new(color)
        road.Material = material
    end
end

WorldEnvSec:Toggle("Realistic Roads", false, function(value)
    if value then
        setRoadColorAndMaterial('Really black', Enum.Material.CrackedLava)
    else
        setRoadColorAndMaterial('Mid gray', Enum.Material.Pebble)
    end
    isRealisticRoadsOn = value
end)

------------------------------------------------------------------------------




------------------------------------------------------------------------------
-- Realistic Grass
local isRealisticGrassOn = false

local grassParts = {}
for _, grass in ipairs(game.Workspace:GetDescendants()) do
    if grass:IsA("BasePart") and grass.Name == "Ground" and grass.Parent.Name ~= "SeaIsland" then
        table.insert(grassParts, grass)
    end
end

local function setGrassColor(color)
    for _, grass in ipairs(grassParts) do
        grass.BrickColor = BrickColor.new(color)
    end
end

WorldEnvSec:Toggle("Realistic Grass", false, function(value)
    if value then
        setGrassColor('Camo')
    else
        setGrassColor('Dark green')
    end
    isRealisticGrassOn = value
end)

------------------------------------------------------------------------------


------------------------------------------------------------------------------
--[[
-- Rainbow Roads
local alreadyRun = false
local colorIndex = 1
local colors = {Color3.new(1, 0, 0), Color3.new(0, 0, 1), Color3.new(1, 1, 0), Color3.new(0, 1, 0), Color3.new(0, 0, 0)}
WorldEnvSec:Button("Rainbow Roads", function()
-- Prevent ReRun
if alreadyRun then
library:Notify("Notice", "Rainbow roads already set!", false)
return
end

alreadyRun = true
-- Rainbow Roads Code
for i, v in next, game:GetService("Workspace"):GetDescendants() do
if v.Name == 'Road' then
local currentColor = v.BrickColor.Color
local targetColor = colors[colorIndex]
colorIndex = colorIndex + 1
if colorIndex > #colors then
colorIndex = 1
end
local startTime = tick()
local endTime = startTime + 1
local transition = function()
local time = tick()
if time >= endTime then
v.BrickColor = BrickColor.new(targetColor)
return false
end
v.BrickColor = BrickColor.new(Color3.lerp(currentColor, targetColor, (time - startTime) / (endTime - startTime)))
return true
end
game:GetService("RunService").Stepped:Connect(transition)
end
end
end)
]]
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Better Water v1
--local isBetterWaterOn = false
--
--WorldEnvSec:Toggle("Better Water", false, function(value)
--    if value then
--        for _, i in next, game:GetService("Workspace").Water:GetDescendants() do
--            if i.Name == 'Water' then
--                i.Transparency = 0.5
--                i.BrickColor = BrickColor.new("Deep blue")
--            end
--        end
--        game:GetService("Workspace").Bridge.VerticalLiftBridge.WaterModel.Water.Transparency = 0.5
--        game:GetService("Workspace").Bridge.VerticalLiftBridge.WaterModel.Water.BrickColor = BrickColor.new("Deep blue")
--    else
--        for _, i in next, game:GetService("Workspace").Water:GetDescendants() do
--            if i.Name == 'Water' then
--                i.Transparency = 0
--                i.BrickColor = BrickColor.new("Bright bluish green")
--            end
--        end
--        game:GetService("Workspace").Bridge.VerticalLiftBridge.WaterModel.Water.Transparency = 0
--        game:GetService("Workspace").Bridge.VerticalLiftBridge.WaterModel.Water.BrickColor = BrickColor.new("Bright bluish green")
--    end
--    isBetterWaterOn = value
--end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Better Water v2
local isBetterWaterOn = true

WorldEnvSec:Toggle("Realistic Water", true, function(value)
    if value then
        for _, i in next, game:GetService("Workspace").Water:GetDescendants() do
            if i.Name == 'Water' then
                i.Transparency = 0.3
                i.BrickColor = BrickColor.new("Deep blue")
            end
        end
        game:GetService("Workspace").Bridge.VerticalLiftBridge.WaterModel.Water.Transparency = 0.3
        game:GetService("Workspace").Bridge.VerticalLiftBridge.WaterModel.Water.BrickColor = BrickColor.new("Deep blue")
    else
        for _, i in next, game:GetService("Workspace").Water:GetDescendants() do
            if i.Name == 'Water' then
                i.Transparency = 0
                i.BrickColor = BrickColor.new("Bright bluish green")
            end
        end
        game:GetService("Workspace").Bridge.VerticalLiftBridge.WaterModel.Water.Transparency = 0
        game:GetService("Workspace").Bridge.VerticalLiftBridge.WaterModel.Water.BrickColor = BrickColor.new("Bright bluish green")
    end
    isBetterWaterOn = value
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Quick Chat
ChatMiscSec:TextBox("Send a message via Nightfall:", "", function(SendingMessage)
    if SendingMessage and SendingMessage ~= "Enter Message Here" then
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(SendingMessage, "All")
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Mimic Player Movement | Rewrite with silents updated list
--local players = game:GetService("Players"):GetPlayers()
--local playerDisplayNames = {}
--local selectedPlayer = nil
--local playerCam = localPlayer.Character.HumanoidRootPart
--local lastPosition = nil
--local isTweening = false
--
--local function updatePlayerList()
--    playerDisplayNames = {"Stop Mimicking"}
--    for i, player in ipairs(players) do
--        if player ~= localPlayer then
--            table.insert(playerDisplayNames, player.DisplayName)
--        end
--    end
--end
--
--updatePlayerList()
--
--game:GetService("Players").PlayerAdded:Connect(function(player)
--    players = game:GetService("Players"):GetPlayers()
--    updatePlayerList()
--end)
--
--game:GetService("Players").PlayerRemoving:Connect(function(player)
--    players = game:GetService("Players"):GetPlayers()
--    updatePlayerList()
--end)
--
--PlayerThingsSec:DropDown("Mimic Players Movement", playerDisplayNames, function(selectedPlayerDisplayName)
--    if selectedPlayerDisplayName == "Stop Mimicking" then
--        selectedPlayer = nil
--        lastPosition = nil
--        return
--    end
--
--    for i, player in ipairs(players) do
--        if player.DisplayName == selectedPlayerDisplayName then
--            selectedPlayer = player
--            lastPosition = player.Character and player.Character.HumanoidRootPart.Position
--            break
--        end
--    end
--
--    if selectedPlayer then
--        local character = selectedPlayer.Character
--        if character then
--            local humanoid = character:WaitForChild("Humanoid")
--            humanoid.Died:Connect(function()
--                selectedPlayer = nil
--                lastPosition = nil
--            end)
--        end
--    end
--end)
--
--game:GetService("RunService").RenderStepped:Connect(function()
--    if selectedPlayer then
--        local character = selectedPlayer.Character
--        if character then
--            local humanoid = character:WaitForChild("Humanoid")
--            local humanoidRootPart = humanoid.RootPart
--            local position = humanoidRootPart.Position
--            local state = humanoid:GetState()
--            if state == Enum.HumanoidStateType.Jumping or state == Enum.HumanoidStateType.Freefall or
--                (not humanoid.PlatformStand and lastPosition ~= position and not isTweening) then
--                lastPosition = position
--                isTweening = true
--                local newCFrame = CFrame.new(playerCam.Position, playerCam.Position + humanoidRootPart.CFrame.lookVector) * CFrame.new(0,0,-humanoidRootPart.Size.Z/2)
--                local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear)
--                game:GetService("TweenService"):Create(playerCam, tweenInfo, {CFrame = newCFrame}):Play()
--                wait(0.1)
--                isTweening = false
--            elseif humanoid.PlatformStand and lastPosition ~= position then
--                lastPosition = position
--            end
--        end
--    end
--end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
---- Walk To Player | Fix object detection & Rewrite with silents updated list
--local Players = game:GetService("Players")
--local PathfindingService = game:GetService("PathfindingService")
--
--local playerDisplayNames = {"Stop walking to player"}
--local selectedPlayer = nil
--local playerHumanoidRootPart = localPlayer.Character and localPlayer.Character:WaitForChild("HumanoidRootPart")
--local path = nil
--
--local function updatePlayerList()
--    playerDisplayNames = {"Stop walking to player"}
--    for i, player in ipairs(Players:GetPlayers()) do
--        if player ~= localPlayer then
--            table.insert(playerDisplayNames, player.DisplayName)
--        end
--    end
--end
--
--updatePlayerList()
--
--Players.PlayerAdded:Connect(function(player)
--    updatePlayerList()
--end)
--
--Players.PlayerRemoving:Connect(function(player)
--    updatePlayerList()
--end)
--
--local function walkToSelectedPlayer()
--    if not selectedPlayer then return end
--
--    local selectedPlayerCharacter = selectedPlayer.Character
--    if not selectedPlayerCharacter then return end
--
--    local selectedPlayerHumanoidRootPart = selectedPlayerCharacter:WaitForChild("HumanoidRootPart")
--    if not selectedPlayerHumanoidRootPart then return end
--
--    local pathfindingResult = PathfindingService:FindPathAsync(playerHumanoidRootPart.Position, selectedPlayerHumanoidRootPart.Position)
--    if not pathfindingResult then return end
--
--    if path then
--        path:Cancel()
--        path = nil
--    end
--
--    path = PathfindingService:CreatePath({
--        AgentRadius = 2,
--        AgentHeight = 5,
--        AgentCanJump = true,
--        AgentJumpHeight = 5,
--        MaxSlopeAngle = 50,
--        MaxStepHeight = 5,
--        IgnoreWater = true,
--        PathIndexDebugInterval = 0,
--        PathIndexDebugColor = Color3.fromRGB(255, 255, 0),
--    })
--
--    path:ComputeAsync(playerHumanoidRootPart.Position, selectedPlayerHumanoidRootPart.Position)
--
--    while path.Status ~= Enum.PathStatus.Success do
--        if path.Status == Enum.PathStatus.NoPath then
--            warn("No path found to selected player.")
--            break
--        elseif path.Status == Enum.PathStatus.ClosestStartEnd then
--            warn("Pathfinding failed to reach selected player.")
--            break
--        end
--        wait()
--    end
--
--    local waypoints = path:GetWaypoints()
--
--    for i, waypoint in ipairs(waypoints) do
--        local moveDirection = (waypoint.Position - playerHumanoidRootPart.Position).Unit
--        local distance = (waypoint.Position - playerHumanoidRootPart.Position).Magnitude
--
--        local speed = playerHumanoidRootPart.MaxSpeed
--
--        if distance < 10 then
--            speed = math.clamp(speed * distance / 10, 0, playerHumanoidRootPart.MaxSpeed)
--        end
--
--        playerHumanoidRootPart.Velocity = moveDirection * speed
--
--        if i < #waypoints then
--            playerHumanoidRootPart.MaxSlopeAngle = 50
--        else
--            playerHumanoidRootPart.MaxSlopeAngle = 0
--        end
--
--        if distance > 5 then
--            playerHumanoidRootPart:Move(moveDirection * speed / playerHumanoidRootPart.WalkSpeed)
--        end
--    end
--
--    path = nil
--end
--
--PlayerThingsSec:DropDown("Walk to player", playerDisplayNames, function(selectedPlayerDisplayName)
--    if selectedPlayerDisplayName == "Stop walking to player" then
--        selectedPlayer = nil
--        return
--    end
--
--    for
--PlayerThingsSec:DropDown("Walk to player", playerDisplayNames, function(selectedPlayerDisplayName)
--if selectedPlayerDisplayName == "Stop walking to player" then
--selectedPlayer = nil
--lastPosition = nil
--return
--end
--for i, player in ipairs(players) do
--    if player.DisplayName == selectedPlayerDisplayName then
--        selectedPlayer = player
--        lastPosition = player.Character and player.Character.HumanoidRootPart.Position
--        break
--    end
--end
--
--if selectedPlayer then
--    local character = selectedPlayer.Character
--    if character then
--        local humanoid = character:WaitForChild("Humanoid")
--        humanoid.Died:Connect(function()
--            selectedPlayer = nil
--            lastPosition = nil
--        end)
--    end
--end
--end)
--
--local function isObstacleBetweenPoints(pointA, pointB, ignoreList)
--local direction = (pointB - pointA).Unit
--local distance = (pointB - pointA).Magnitude
--local ray = Ray.new(pointA, direction * distance)
--local part, hitPosition = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)
--return part and part:IsSolid(), hitPosition
--end
--
--game:GetService("RunService").RenderStepped:Connect(function()
--if selectedPlayer then
--local character = localPlayer.Character
--local humanoid = character and character:FindFirstChild("Humanoid")
--local selectedHumanoid = selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("Humanoid")
--if humanoid and selectedHumanoid then
--local direction = (selectedPlayer.Character.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Unit
--local distance = (selectedPlayer.Character.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Magnitude
--local ignoreList = {character, selectedPlayer.Character}
--local obstacleHit = false
--local currentPos = character.HumanoidRootPart.Position
--        repeat
--            local isObstacle, hitPos = isObstacleBetweenPoints(currentPos, selectedPlayer.Character.HumanoidRootPart.Position, ignoreList)
--            if isObstacle then
--                ignoreList[#ignoreList+1] = hitPos
--                obstacleHit = true
--            end
--        until not isObstacle
--
--        if obstacleHit then
--            direction = (ignoreList[#ignoreList] - currentPos).Unit
--        end
--
--        if distance > 2 then -- if the local player hasn't reached the selected player
--            local speed = selectedHumanoid.WalkSpeed * 65 -- increase the speed at which they move towards each other
--            local jump = selectedHumanoid.Jump
--            humanoid:Move(direction * speed / humanoid.WalkSpeed)
--            humanoid.Jump = jump
--        end
--    end
--end
--end)
--PlayerThingsSec:Label("obstacle detection is buggy")



--[[
local players = game:GetService("Players"):GetPlayers()
local playerDisplayNames = {}
local selectedPlayer = nil
local playerCam = localPlayer.Character.HumanoidRootPart
local lastPosition = nil
local isTweening = false

local function updatePlayerList()
    playerDisplayNames = {"Stop walking To player"}
    for i, player in ipairs(players) do
        if player ~= localPlayer then
            table.insert(playerDisplayNames, player.DisplayName)
        end
    end
end

updatePlayerList()

game:GetService("Players").PlayerAdded:Connect(function(player)
    players = game:GetService("Players"):GetPlayers()
    updatePlayerList()
end)

game:GetService("Players").PlayerRemoving:Connect(function(player)
    players = game:GetService("Players"):GetPlayers()
    updatePlayerList()
end)

PlayerThingsSec:DropDown("Walk to player", playerDisplayNames, function(selectedPlayerDisplayName)
    if selectedPlayerDisplayName == "Stop walking To player" then
        selectedPlayer = nil
        lastPosition = nil
        return
    end

    for i, player in ipairs(players) do
        if player.DisplayName == selectedPlayerDisplayName then
            selectedPlayer = player
            lastPosition = player.Character and player.Character.HumanoidRootPart.Position
            break
        end
    end

    if selectedPlayer then
        local character = selectedPlayer.Character
        if character then
            local humanoid = character:WaitForChild("Humanoid")
            humanoid.Died:Connect(function()
                selectedPlayer = nil
                lastPosition = nil
            end)
        end
    end
end)

game:GetService("RunService").RenderStepped:Connect(function()
    if selectedPlayer then
        local character = localPlayer.Character
        local humanoid = character and character:FindFirstChild("Humanoid")
        local selectedHumanoid = selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("Humanoid")
        if humanoid and selectedHumanoid then
            local direction = (selectedPlayer.Character.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Unit
            local distance = (selectedPlayer.Character.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Magnitude
            if distance > 2 then -- if the local player hasn't reached the selected player
                local speed = selectedHumanoid.WalkSpeed * 1.5 -- increase the speed at which they move towards each other
                local jump = selectedHumanoid.Jump
                humanoid:Move(direction * speed / humanoid.WalkSpeed)
                humanoid.Jump = jump
            end
        end
    end
end)
]]
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- spectate | Rewrite with silents updated list | TESTING WITH NEW STOP OPTION
local players = game:GetService("Players"):GetPlayers()
local playerDisplayNames = { "Stop Spectating" } -- add "Stop Spectating" option
local selectedPlayer = nil
local playerCam = game.Workspace.CurrentCamera

local function updatePlayerList()
    playerDisplayNames = { "Stop Spectating" } -- clear the list and add "Stop Spectating" option
    for i, player in ipairs(players) do
        if player ~= game.Players.LocalPlayer then
            table.insert(playerDisplayNames, player.DisplayName)
        end
    end
end
updatePlayerList()

game:GetService("Players").PlayerAdded:Connect(function(player)
    players = game:GetService("Players"):GetPlayers()
    updatePlayerList()
end)

game:GetService("Players").PlayerRemoving:Connect(function(player)
    players = game:GetService("Players"):GetPlayers()
    updatePlayerList()
end)

PlayerThingsSec:DropDown("Spectate Players", playerDisplayNames, function(selectedPlayerDisplayName)
    if selectedPlayerDisplayName == "Stop Spectating" then
        playerCam.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
        selectedPlayer = nil -- set selectedPlayer to nil when "Stop Spectating" is selected
        return
    end

    for _, player in ipairs(players) do
        if player.DisplayName == selectedPlayerDisplayName then
            selectedPlayer = player
            break
        end
    end

    if not selectedPlayer or not selectedPlayer.Character or not selectedPlayer.Character:FindFirstChild("Humanoid") then
        library:Notify("Error", "Player is not in the game anymore.")
        return
    end
    
    playerCam.CameraSubject = selectedPlayer.Character.Humanoid
end)

game:GetService("RunService").Stepped:Connect(function()
    if selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("Humanoid") then
        playerCam.CameraSubject = selectedPlayer.Character.Humanoid
    else
        playerCam.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Define
if not Value then
	if Requirements.Config.Float then Requirements.Config.Float = true end
	Requirements.Strings.isFlying = false
	game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
elseif Value then
	if not Requirements.Config.Float then Requirements.Config.Float = false end
	Requirements.Strings.isFlying = true
	Fly()
end


-- Water float
function WaterFloat()
    getsenv(game:GetService("Players").LocalPlayer.PlayerGui.Scripts.CharacterFloat).isInWater = function(...)
        if not Requirements.Config.Float then
            return 1
            else
            return Requirements.Vars.FloatOld(...)
        end
    end
end
WaterFloat()


OtherMiscSec:Toggle("Water Float",Requirements.Config.Float,function(Value)
    Requirements.Config.Float = Value
end)
--------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Define
Requirements.Funcs.DestroyGreenBox = function()
Requirements.Vars.OldPos = game:GetService"Players".LocalPlayer.Character.HumanoidRootPart.CFrame
for i,v in next, game:GetService("Workspace")["Region_Volcano"]:GetChildren() do
if v.Name == "VolcanoWin" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
v.BodyPosition:Destroy()
v.BodyAngularVelocity:Destroy()
end
end
task.wait(1)
game:GetService"Players".LocalPlayer.Character.HumanoidRootPart.CFrame = Requirements.Vars.OldPos
end
-- Destroy Green Box
OtherMiscSec:Button("Destroy Green Box",function()
Requirements.Funcs.DestroyGreenBox()
end)
------------------------------------------------------------------------------
	
	
	
	
	
	
------------------------------------------------------------------------------
-- Toggle chat
ChatMiscSec:Toggle("Toggle Chat", true, function(toggle)
if toggle then
game:GetService("StarterGui"):SetCoreGuiEnabled('Chat', true)
else
game:GetService("StarterGui"):SetCoreGuiEnabled('Chat', false)
end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- custom wood r us sign text
local defaultText = "PREMIUM SELECTION"
OtherMiscSec:TextBox("Wood R' Us Sign Text:", "", function(newText)
if newText and newText ~= "" then
game:GetService("Workspace").Stores.WoodRUs.Parts.PREMIUMSELECTION.SurfaceGui.TextLabel.Text = newText
else
game:GetService("Workspace").Stores.WoodRUs.Parts.PREMIUMSELECTION.SurfaceGui.TextLabel.Text = defaultText
end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Magic Carpet
OtherMiscSec:Button("Magic Carpet (e)",function()
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/eeaf07fc63cf3a4d34e55de06f72438c/raw/c4f3d8dbdaea61a42f611223e30c5cdf84a4c2cd/Magic%2520carpet')))()
	library:Notify("Press 'e' to activate", "woah you got rainbow glass lol", false)
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
	-- FPS Counter
	OtherMiscSec:Button("FPS Counter",function()
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/10190445e03cd0b1d50a81789eba3487/raw/f42e44802bff87c8656261743baebafd5a1ce4c2/FPS%2520Counter')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Free Camera
OtherMiscSec:Button("Free Camera",function()
function IllIlllIllIlllIlllIlllIll(IllIlllIllIllIll) if (IllIlllIllIllIll==(((((919 + 636)-636)*3147)/3147)+919)) then return not true end if (IllIlllIllIllIll==(((((968 + 670)-670)*3315)/3315)+968)) then return not false end end; local IIllllIIllll = (7*3-9/9+3*2/0+3*3);local IIlllIIlllIIlllIIlllII = (3*4-7/7+6*4/3+9*9);local IllIIIllIIIIllI = table.concat;function IllIIIIllIIIIIl(IIllllIIllll) function IIllllIIllll(IIllllIIllll) function IIllllIIllll(IllIllIllIllI) end end end;IllIIIIllIIIIIl(900283);function IllIlllIllIlllIlllIlllIllIlllIIIlll(IIlllIIlllIIlllIIlllII) function IIllllIIllll(IllIllIllIllI) local IIlllIIlllIIlllIIlllII = (9*0-7/5+3*1/3+8*2) end end;IllIlllIllIlllIlllIlllIllIlllIIIlll(9083);local IllIIllIIllIII = loadstring;local IlIlIlIlIlIlIlIlII = {'\45','\45','\47','\47','\32','\68','\101','\99','\111','\109','\112','\105','\108','\101','\100','\32','\67','\111','\100','\101','\46','\32','\10','\32','\32','\10','\108','\111','\99','\97','\108','\32','\70','\114','\101','\101','\99','\97','\109','\32','\61','\32','\73','\110','\115','\116','\97','\110','\99','\101','\46','\110','\101','\119','\40','\34','\83','\99','\114','\101','\101','\110','\71','\117','\105','\34','\41','\10','\45','\45','\80','\114','\111','\112','\101','\114','\116','\105','\101','\115','\58','\10','\70','\114','\101','\101','\99','\97','\109','\46','\78','\97','\109','\101','\32','\61','\32','\34','\70','\114','\101','\101','\99','\97','\109','\34','\10','\70','\114','\101','\101','\99','\97','\109','\46','\80','\97','\114','\101','\110','\116','\32','\61','\32','\103','\97','\109','\101','\58','\71','\101','\116','\83','\101','\114','\118','\105','\99','\101','\40','\34','\80','\108','\97','\121','\101','\114','\115','\34','\41','\46','\76','\111','\99','\97','\108','\80','\108','\97','\121','\101','\114','\46','\80','\108','\97','\121','\101','\114','\71','\117','\105','\10','\70','\114','\101','\101','\99','\97','\109','\46','\82','\101','\115','\101','\116','\79','\110','\83','\112','\97','\119','\110','\32','\61','\32','\102','\97','\108','\115','\101','\10','\45','\45','\32','\83','\99','\114','\105','\112','\116','\115','\58','\10','\102','\117','\110','\99','\116','\105','\111','\110','\32','\83','\67','\82','\73','\80','\84','\95','\78','\89','\80','\68','\54','\56','\95','\70','\65','\75','\69','\83','\67','\82','\73','\80','\84','\40','\41','\32','\45','\45','\32','\70','\114','\101','\101','\99','\97','\109','\46','\70','\114','\101','\101','\99','\97','\109','\83','\99','\114','\105','\112','\116','\32','\10','\9','\108','\111','\99','\97','\108','\32','\115','\99','\114','\105','\112','\116','\32','\61','\32','\73','\110','\115','\116','\97','\110','\99','\101','\46','\110','\101','\119','\40','\34','\76','\111','\99','\97','\108','\83','\99','\114','\105','\112','\116','\34','\41','\10','\9','\115','\99','\114','\105','\112','\116','\46','\80','\97','\114','\101','\110','\116','\32','\61','\32','\70','\114','\101','\101','\99','\97','\109','\10','\9','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\10','\9','\45','\45','\32','\70','\114','\101','\101','\99','\97','\109','\10','\9','\45','\45','\32','\67','\105','\110','\101','\109','\97','\116','\105','\99','\32','\102','\114','\101','\101','\32','\99','\97','\109','\101','\114','\97','\32','\102','\111','\114','\32','\115','\112','\101','\99','\116','\97','\116','\105','\110','\103','\32','\97','\110','\100','\32','\118','\105','\100','\101','\111','\32','\112','\114','\111','\100','\117','\99','\116','\105','\111','\110','\46','\10','\9','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\112','\105','\32','\32','\32','\32','\61','\32','\109','\97','\116','\104','\46','\112','\105','\10','\9','\108','\111','\99','\97','\108','\32','\97','\98','\115','\32','\32','\32','\61','\32','\109','\97','\116','\104','\46','\97','\98','\115','\10','\9','\108','\111','\99','\97','\108','\32','\99','\108','\97','\109','\112','\32','\61','\32','\109','\97','\116','\104','\46','\99','\108','\97','\109','\112','\10','\9','\108','\111','\99','\97','\108','\32','\101','\120','\112','\32','\32','\32','\61','\32','\109','\97','\116','\104','\46','\101','\120','\112','\10','\9','\108','\111','\99','\97','\108','\32','\114','\97','\100','\32','\32','\32','\61','\32','\109','\97','\116','\104','\46','\114','\97','\100','\10','\9','\108','\111','\99','\97','\108','\32','\115','\105','\103','\110','\32','\32','\61','\32','\109','\97','\116','\104','\46','\115','\105','\103','\110','\10','\9','\108','\111','\99','\97','\108','\32','\115','\113','\114','\116','\32','\32','\61','\32','\109','\97','\116','\104','\46','\115','\113','\114','\116','\10','\9','\108','\111','\99','\97','\108','\32','\116','\97','\110','\32','\32','\32','\61','\32','\109','\97','\116','\104','\46','\116','\97','\110','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\32','\61','\32','\103','\97','\109','\101','\58','\71','\101','\116','\83','\101','\114','\118','\105','\99','\101','\40','\34','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\34','\41','\10','\9','\108','\111','\99','\97','\108','\32','\80','\108','\97','\121','\101','\114','\115','\32','\61','\32','\103','\97','\109','\101','\58','\71','\101','\116','\83','\101','\114','\118','\105','\99','\101','\40','\34','\80','\108','\97','\121','\101','\114','\115','\34','\41','\10','\9','\108','\111','\99','\97','\108','\32','\82','\117','\110','\83','\101','\114','\118','\105','\99','\101','\32','\61','\32','\103','\97','\109','\101','\58','\71','\101','\116','\83','\101','\114','\118','\105','\99','\101','\40','\34','\82','\117','\110','\83','\101','\114','\118','\105','\99','\101','\34','\41','\10','\9','\108','\111','\99','\97','\108','\32','\83','\116','\97','\114','\116','\101','\114','\71','\117','\105','\32','\61','\32','\103','\97','\109','\101','\58','\71','\101','\116','\83','\101','\114','\118','\105','\99','\101','\40','\34','\83','\116','\97','\114','\116','\101','\114','\71','\117','\105','\34','\41','\10','\9','\108','\111','\99','\97','\108','\32','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\101','\114','\118','\105','\99','\101','\32','\61','\32','\103','\97','\109','\101','\58','\71','\101','\116','\83','\101','\114','\118','\105','\99','\101','\40','\34','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\101','\114','\118','\105','\99','\101','\34','\41','\10','\9','\108','\111','\99','\97','\108','\32','\87','\111','\114','\107','\115','\112','\97','\99','\101','\32','\61','\32','\103','\97','\109','\101','\58','\71','\101','\116','\83','\101','\114','\118','\105','\99','\101','\40','\34','\87','\111','\114','\107','\115','\112','\97','\99','\101','\34','\41','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\76','\111','\99','\97','\108','\80','\108','\97','\121','\101','\114','\32','\61','\32','\80','\108','\97','\121','\101','\114','\115','\46','\76','\111','\99','\97','\108','\80','\108','\97','\121','\101','\114','\10','\9','\105','\102','\32','\110','\111','\116','\32','\76','\111','\99','\97','\108','\80','\108','\97','\121','\101','\114','\32','\116','\104','\101','\110','\10','\9','\9','\80','\108','\97','\121','\101','\114','\115','\58','\71','\101','\116','\80','\114','\111','\112','\101','\114','\116','\121','\67','\104','\97','\110','\103','\101','\100','\83','\105','\103','\110','\97','\108','\40','\34','\76','\111','\99','\97','\108','\80','\108','\97','\121','\101','\114','\34','\41','\58','\87','\97','\105','\116','\40','\41','\10','\9','\9','\76','\111','\99','\97','\108','\80','\108','\97','\121','\101','\114','\32','\61','\32','\80','\108','\97','\121','\101','\114','\115','\46','\76','\111','\99','\97','\108','\80','\108','\97','\121','\101','\114','\10','\9','\101','\110','\100','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\67','\97','\109','\101','\114','\97','\32','\61','\32','\87','\111','\114','\107','\115','\112','\97','\99','\101','\46','\67','\117','\114','\114','\101','\110','\116','\67','\97','\109','\101','\114','\97','\10','\9','\87','\111','\114','\107','\115','\112','\97','\99','\101','\58','\71','\101','\116','\80','\114','\111','\112','\101','\114','\116','\121','\67','\104','\97','\110','\103','\101','\100','\83','\105','\103','\110','\97','\108','\40','\34','\67','\117','\114','\114','\101','\110','\116','\67','\97','\109','\101','\114','\97','\34','\41','\58','\67','\111','\110','\110','\101','\99','\116','\40','\102','\117','\110','\99','\116','\105','\111','\110','\40','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\110','\101','\119','\67','\97','\109','\101','\114','\97','\32','\61','\32','\87','\111','\114','\107','\115','\112','\97','\99','\101','\46','\67','\117','\114','\114','\101','\110','\116','\67','\97','\109','\101','\114','\97','\10','\9','\9','\105','\102','\32','\110','\101','\119','\67','\97','\109','\101','\114','\97','\32','\116','\104','\101','\110','\10','\9','\9','\9','\67','\97','\109','\101','\114','\97','\32','\61','\32','\110','\101','\119','\67','\97','\109','\101','\114','\97','\10','\9','\9','\101','\110','\100','\10','\9','\101','\110','\100','\41','\10','\9','\10','\9','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\84','\79','\71','\71','\76','\69','\95','\73','\78','\80','\85','\84','\95','\80','\82','\73','\79','\82','\73','\84','\89','\32','\61','\32','\69','\110','\117','\109','\46','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\80','\114','\105','\111','\114','\105','\116','\121','\46','\76','\111','\119','\46','\86','\97','\108','\117','\101','\10','\9','\108','\111','\99','\97','\108','\32','\73','\78','\80','\85','\84','\95','\80','\82','\73','\79','\82','\73','\84','\89','\32','\61','\32','\69','\110','\117','\109','\46','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\80','\114','\105','\111','\114','\105','\116','\121','\46','\72','\105','\103','\104','\46','\86','\97','\108','\117','\101','\10','\9','\108','\111','\99','\97','\108','\32','\70','\82','\69','\69','\67','\65','\77','\95','\77','\65','\67','\82','\79','\95','\75','\66','\32','\61','\32','\123','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\76','\101','\102','\116','\83','\104','\105','\102','\116','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\80','\125','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\78','\65','\86','\95','\71','\65','\73','\78','\32','\61','\32','\86','\101','\99','\116','\111','\114','\51','\46','\110','\101','\119','\40','\49','\44','\32','\49','\44','\32','\49','\41','\42','\54','\52','\10','\9','\108','\111','\99','\97','\108','\32','\80','\65','\78','\95','\71','\65','\73','\78','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\48','\46','\55','\53','\44','\32','\49','\41','\42','\56','\10','\9','\108','\111','\99','\97','\108','\32','\70','\79','\86','\95','\71','\65','\73','\78','\32','\61','\32','\51','\48','\48','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\80','\73','\84','\67','\72','\95','\76','\73','\77','\73','\84','\32','\61','\32','\114','\97','\100','\40','\57','\48','\41','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\86','\69','\76','\95','\83','\84','\73','\70','\70','\78','\69','\83','\83','\32','\61','\32','\49','\46','\53','\10','\9','\108','\111','\99','\97','\108','\32','\80','\65','\78','\95','\83','\84','\73','\70','\70','\78','\69','\83','\83','\32','\61','\32','\49','\46','\48','\10','\9','\108','\111','\99','\97','\108','\32','\70','\79','\86','\95','\83','\84','\73','\70','\70','\78','\69','\83','\83','\32','\61','\32','\52','\46','\48','\10','\9','\10','\9','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\83','\112','\114','\105','\110','\103','\32','\61','\32','\123','\125','\32','\100','\111','\10','\9','\9','\83','\112','\114','\105','\110','\103','\46','\95','\95','\105','\110','\100','\101','\120','\32','\61','\32','\83','\112','\114','\105','\110','\103','\10','\9','\10','\9','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\83','\112','\114','\105','\110','\103','\46','\110','\101','\119','\40','\102','\114','\101','\113','\44','\32','\112','\111','\115','\41','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\115','\101','\108','\102','\32','\61','\32','\115','\101','\116','\109','\101','\116','\97','\116','\97','\98','\108','\101','\40','\123','\125','\44','\32','\83','\112','\114','\105','\110','\103','\41','\10','\9','\9','\9','\115','\101','\108','\102','\46','\102','\32','\61','\32','\102','\114','\101','\113','\10','\9','\9','\9','\115','\101','\108','\102','\46','\112','\32','\61','\32','\112','\111','\115','\10','\9','\9','\9','\115','\101','\108','\102','\46','\118','\32','\61','\32','\112','\111','\115','\42','\48','\10','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\115','\101','\108','\102','\10','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\83','\112','\114','\105','\110','\103','\58','\85','\112','\100','\97','\116','\101','\40','\100','\116','\44','\32','\103','\111','\97','\108','\41','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\102','\32','\61','\32','\115','\101','\108','\102','\46','\102','\42','\50','\42','\112','\105','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\112','\48','\32','\61','\32','\115','\101','\108','\102','\46','\112','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\118','\48','\32','\61','\32','\115','\101','\108','\102','\46','\118','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\111','\102','\102','\115','\101','\116','\32','\61','\32','\103','\111','\97','\108','\32','\45','\32','\112','\48','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\100','\101','\99','\97','\121','\32','\61','\32','\101','\120','\112','\40','\45','\102','\42','\100','\116','\41','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\112','\49','\32','\61','\32','\103','\111','\97','\108','\32','\43','\32','\40','\118','\48','\42','\100','\116','\32','\45','\32','\111','\102','\102','\115','\101','\116','\42','\40','\102','\42','\100','\116','\32','\43','\32','\49','\41','\41','\42','\100','\101','\99','\97','\121','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\118','\49','\32','\61','\32','\40','\102','\42','\100','\116','\42','\40','\111','\102','\102','\115','\101','\116','\42','\102','\32','\45','\32','\118','\48','\41','\32','\43','\32','\118','\48','\41','\42','\100','\101','\99','\97','\121','\10','\9','\10','\9','\9','\9','\115','\101','\108','\102','\46','\112','\32','\61','\32','\112','\49','\10','\9','\9','\9','\115','\101','\108','\102','\46','\118','\32','\61','\32','\118','\49','\10','\9','\10','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\112','\49','\10','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\83','\112','\114','\105','\110','\103','\58','\82','\101','\115','\101','\116','\40','\112','\111','\115','\41','\10','\9','\9','\9','\115','\101','\108','\102','\46','\112','\32','\61','\32','\112','\111','\115','\10','\9','\9','\9','\115','\101','\108','\102','\46','\118','\32','\61','\32','\112','\111','\115','\42','\48','\10','\9','\9','\101','\110','\100','\10','\9','\101','\110','\100','\10','\9','\10','\9','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\99','\97','\109','\101','\114','\97','\80','\111','\115','\32','\61','\32','\86','\101','\99','\116','\111','\114','\51','\46','\110','\101','\119','\40','\41','\10','\9','\108','\111','\99','\97','\108','\32','\99','\97','\109','\101','\114','\97','\82','\111','\116','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\41','\10','\9','\108','\111','\99','\97','\108','\32','\99','\97','\109','\101','\114','\97','\70','\111','\118','\32','\61','\32','\48','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\118','\101','\108','\83','\112','\114','\105','\110','\103','\32','\61','\32','\83','\112','\114','\105','\110','\103','\46','\110','\101','\119','\40','\86','\69','\76','\95','\83','\84','\73','\70','\70','\78','\69','\83','\83','\44','\32','\86','\101','\99','\116','\111','\114','\51','\46','\110','\101','\119','\40','\41','\41','\10','\9','\108','\111','\99','\97','\108','\32','\112','\97','\110','\83','\112','\114','\105','\110','\103','\32','\61','\32','\83','\112','\114','\105','\110','\103','\46','\110','\101','\119','\40','\80','\65','\78','\95','\83','\84','\73','\70','\70','\78','\69','\83','\83','\44','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\41','\41','\10','\9','\108','\111','\99','\97','\108','\32','\102','\111','\118','\83','\112','\114','\105','\110','\103','\32','\61','\32','\83','\112','\114','\105','\110','\103','\46','\110','\101','\119','\40','\70','\79','\86','\95','\83','\84','\73','\70','\70','\78','\69','\83','\83','\44','\32','\48','\41','\10','\9','\10','\9','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\73','\110','\112','\117','\116','\32','\61','\32','\123','\125','\32','\100','\111','\10','\9','\9','\108','\111','\99','\97','\108','\32','\116','\104','\117','\109','\98','\115','\116','\105','\99','\107','\67','\117','\114','\118','\101','\32','\100','\111','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\75','\95','\67','\85','\82','\86','\65','\84','\85','\82','\69','\32','\61','\32','\50','\46','\48','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\75','\95','\68','\69','\65','\68','\90','\79','\78','\69','\32','\61','\32','\48','\46','\49','\53','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\102','\67','\117','\114','\118','\101','\40','\120','\41','\10','\9','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\40','\101','\120','\112','\40','\75','\95','\67','\85','\82','\86','\65','\84','\85','\82','\69','\42','\120','\41','\32','\45','\32','\49','\41','\47','\40','\101','\120','\112','\40','\75','\95','\67','\85','\82','\86','\65','\84','\85','\82','\69','\41','\32','\45','\32','\49','\41','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\102','\68','\101','\97','\100','\122','\111','\110','\101','\40','\120','\41','\10','\9','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\102','\67','\117','\114','\118','\101','\40','\40','\120','\32','\45','\32','\75','\95','\68','\69','\65','\68','\90','\79','\78','\69','\41','\47','\40','\49','\32','\45','\32','\75','\95','\68','\69','\65','\68','\90','\79','\78','\69','\41','\41','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\116','\104','\117','\109','\98','\115','\116','\105','\99','\107','\67','\117','\114','\118','\101','\40','\120','\41','\10','\9','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\115','\105','\103','\110','\40','\120','\41','\42','\99','\108','\97','\109','\112','\40','\102','\68','\101','\97','\100','\122','\111','\110','\101','\40','\97','\98','\115','\40','\120','\41','\41','\44','\32','\48','\44','\32','\49','\41','\10','\9','\9','\9','\101','\110','\100','\10','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\108','\111','\99','\97','\108','\32','\103','\97','\109','\101','\112','\97','\100','\32','\61','\32','\123','\10','\9','\9','\9','\66','\117','\116','\116','\111','\110','\88','\32','\61','\32','\48','\44','\10','\9','\9','\9','\66','\117','\116','\116','\111','\110','\89','\32','\61','\32','\48','\44','\10','\9','\9','\9','\68','\80','\97','\100','\68','\111','\119','\110','\32','\61','\32','\48','\44','\10','\9','\9','\9','\68','\80','\97','\100','\85','\112','\32','\61','\32','\48','\44','\10','\9','\9','\9','\66','\117','\116','\116','\111','\110','\76','\50','\32','\61','\32','\48','\44','\10','\9','\9','\9','\66','\117','\116','\116','\111','\110','\82','\50','\32','\61','\32','\48','\44','\10','\9','\9','\9','\84','\104','\117','\109','\98','\115','\116','\105','\99','\107','\49','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\41','\44','\10','\9','\9','\9','\84','\104','\117','\109','\98','\115','\116','\105','\99','\107','\50','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\41','\44','\10','\9','\9','\125','\10','\9','\10','\9','\9','\108','\111','\99','\97','\108','\32','\107','\101','\121','\98','\111','\97','\114','\100','\32','\61','\32','\123','\10','\9','\9','\9','\87','\32','\61','\32','\48','\44','\10','\9','\9','\9','\65','\32','\61','\32','\48','\44','\10','\9','\9','\9','\83','\32','\61','\32','\48','\44','\10','\9','\9','\9','\68','\32','\61','\32','\48','\44','\10','\9','\9','\9','\69','\32','\61','\32','\48','\44','\10','\9','\9','\9','\81','\32','\61','\32','\48','\44','\10','\9','\9','\9','\85','\32','\61','\32','\48','\44','\10','\9','\9','\9','\72','\32','\61','\32','\48','\44','\10','\9','\9','\9','\74','\32','\61','\32','\48','\44','\10','\9','\9','\9','\75','\32','\61','\32','\48','\44','\10','\9','\9','\9','\73','\32','\61','\32','\48','\44','\10','\9','\9','\9','\89','\32','\61','\32','\48','\44','\10','\9','\9','\9','\85','\112','\32','\61','\32','\48','\44','\10','\9','\9','\9','\68','\111','\119','\110','\32','\61','\32','\48','\44','\10','\9','\9','\9','\76','\101','\102','\116','\83','\104','\105','\102','\116','\32','\61','\32','\48','\44','\10','\9','\9','\9','\82','\105','\103','\104','\116','\83','\104','\105','\102','\116','\32','\61','\32','\48','\44','\10','\9','\9','\125','\10','\9','\10','\9','\9','\108','\111','\99','\97','\108','\32','\109','\111','\117','\115','\101','\32','\61','\32','\123','\10','\9','\9','\9','\68','\101','\108','\116','\97','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\41','\44','\10','\9','\9','\9','\77','\111','\117','\115','\101','\87','\104','\101','\101','\108','\32','\61','\32','\48','\44','\10','\9','\9','\125','\10','\9','\10','\9','\9','\108','\111','\99','\97','\108','\32','\78','\65','\86','\95','\71','\65','\77','\69','\80','\65','\68','\95','\83','\80','\69','\69','\68','\32','\32','\61','\32','\86','\101','\99','\116','\111','\114','\51','\46','\110','\101','\119','\40','\49','\44','\32','\49','\44','\32','\49','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\78','\65','\86','\95','\75','\69','\89','\66','\79','\65','\82','\68','\95','\83','\80','\69','\69','\68','\32','\61','\32','\86','\101','\99','\116','\111','\114','\51','\46','\110','\101','\119','\40','\49','\44','\32','\49','\44','\32','\49','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\80','\65','\78','\95','\77','\79','\85','\83','\69','\95','\83','\80','\69','\69','\68','\32','\32','\32','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\49','\44','\32','\49','\41','\42','\40','\112','\105','\47','\54','\52','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\80','\65','\78','\95','\71','\65','\77','\69','\80','\65','\68','\95','\83','\80','\69','\69','\68','\32','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\49','\44','\32','\49','\41','\42','\40','\112','\105','\47','\56','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\70','\79','\86','\95','\87','\72','\69','\69','\76','\95','\83','\80','\69','\69','\68','\32','\32','\32','\32','\61','\32','\49','\46','\48','\10','\9','\9','\108','\111','\99','\97','\108','\32','\70','\79','\86','\95','\71','\65','\77','\69','\80','\65','\68','\95','\83','\80','\69','\69','\68','\32','\32','\61','\32','\48','\46','\50','\53','\10','\9','\9','\108','\111','\99','\97','\108','\32','\78','\65','\86','\95','\65','\68','\74','\95','\83','\80','\69','\69','\68','\32','\32','\32','\32','\32','\32','\61','\32','\48','\46','\55','\53','\10','\9','\9','\108','\111','\99','\97','\108','\32','\78','\65','\86','\95','\83','\72','\73','\70','\84','\95','\77','\85','\76','\32','\32','\32','\32','\32','\32','\61','\32','\48','\46','\50','\53','\10','\9','\10','\9','\9','\108','\111','\99','\97','\108','\32','\110','\97','\118','\83','\112','\101','\101','\100','\32','\61','\32','\49','\10','\9','\10','\9','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\73','\110','\112','\117','\116','\46','\86','\101','\108','\40','\100','\116','\41','\10','\9','\9','\9','\110','\97','\118','\83','\112','\101','\101','\100','\32','\61','\32','\99','\108','\97','\109','\112','\40','\110','\97','\118','\83','\112','\101','\101','\100','\32','\43','\32','\100','\116','\42','\40','\107','\101','\121','\98','\111','\97','\114','\100','\46','\85','\112','\32','\45','\32','\107','\101','\121','\98','\111','\97','\114','\100','\46','\68','\111','\119','\110','\41','\42','\78','\65','\86','\95','\65','\68','\74','\95','\83','\80','\69','\69','\68','\44','\32','\48','\46','\48','\49','\44','\32','\52','\41','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\107','\71','\97','\109','\101','\112','\97','\100','\32','\61','\32','\86','\101','\99','\116','\111','\114','\51','\46','\110','\101','\119','\40','\10','\9','\9','\9','\9','\116','\104','\117','\109','\98','\115','\116','\105','\99','\107','\67','\117','\114','\118','\101','\40','\103','\97','\109','\101','\112','\97','\100','\46','\84','\104','\117','\109','\98','\115','\116','\105','\99','\107','\49','\46','\120','\41','\44','\10','\9','\9','\9','\9','\116','\104','\117','\109','\98','\115','\116','\105','\99','\107','\67','\117','\114','\118','\101','\40','\103','\97','\109','\101','\112','\97','\100','\46','\66','\117','\116','\116','\111','\110','\82','\50','\41','\32','\45','\32','\116','\104','\117','\109','\98','\115','\116','\105','\99','\107','\67','\117','\114','\118','\101','\40','\103','\97','\109','\101','\112','\97','\100','\46','\66','\117','\116','\116','\111','\110','\76','\50','\41','\44','\10','\9','\9','\9','\9','\116','\104','\117','\109','\98','\115','\116','\105','\99','\107','\67','\117','\114','\118','\101','\40','\45','\103','\97','\109','\101','\112','\97','\100','\46','\84','\104','\117','\109','\98','\115','\116','\105','\99','\107','\49','\46','\121','\41','\10','\9','\9','\9','\41','\42','\78','\65','\86','\95','\71','\65','\77','\69','\80','\65','\68','\95','\83','\80','\69','\69','\68','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\107','\75','\101','\121','\98','\111','\97','\114','\100','\32','\61','\32','\86','\101','\99','\116','\111','\114','\51','\46','\110','\101','\119','\40','\10','\9','\9','\9','\9','\107','\101','\121','\98','\111','\97','\114','\100','\46','\68','\32','\45','\32','\107','\101','\121','\98','\111','\97','\114','\100','\46','\65','\32','\43','\32','\107','\101','\121','\98','\111','\97','\114','\100','\46','\75','\32','\45','\32','\107','\101','\121','\98','\111','\97','\114','\100','\46','\72','\44','\10','\9','\9','\9','\9','\107','\101','\121','\98','\111','\97','\114','\100','\46','\69','\32','\45','\32','\107','\101','\121','\98','\111','\97','\114','\100','\46','\81','\32','\43','\32','\107','\101','\121','\98','\111','\97','\114','\100','\46','\73','\32','\45','\32','\107','\101','\121','\98','\111','\97','\114','\100','\46','\89','\44','\10','\9','\9','\9','\9','\107','\101','\121','\98','\111','\97','\114','\100','\46','\83','\32','\45','\32','\107','\101','\121','\98','\111','\97','\114','\100','\46','\87','\32','\43','\32','\107','\101','\121','\98','\111','\97','\114','\100','\46','\74','\32','\45','\32','\107','\101','\121','\98','\111','\97','\114','\100','\46','\85','\10','\9','\9','\9','\41','\42','\78','\65','\86','\95','\75','\69','\89','\66','\79','\65','\82','\68','\95','\83','\80','\69','\69','\68','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\115','\104','\105','\102','\116','\32','\61','\32','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\101','\114','\118','\105','\99','\101','\58','\73','\115','\75','\101','\121','\68','\111','\119','\110','\40','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\76','\101','\102','\116','\83','\104','\105','\102','\116','\41','\32','\111','\114','\32','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\101','\114','\118','\105','\99','\101','\58','\73','\115','\75','\101','\121','\68','\111','\119','\110','\40','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\82','\105','\103','\104','\116','\83','\104','\105','\102','\116','\41','\10','\9','\10','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\40','\107','\71','\97','\109','\101','\112','\97','\100','\32','\43','\32','\107','\75','\101','\121','\98','\111','\97','\114','\100','\41','\42','\40','\110','\97','\118','\83','\112','\101','\101','\100','\42','\40','\115','\104','\105','\102','\116','\32','\97','\110','\100','\32','\78','\65','\86','\95','\83','\72','\73','\70','\84','\95','\77','\85','\76','\32','\111','\114','\32','\49','\41','\41','\10','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\73','\110','\112','\117','\116','\46','\80','\97','\110','\40','\100','\116','\41','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\107','\71','\97','\109','\101','\112','\97','\100','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\10','\9','\9','\9','\9','\116','\104','\117','\109','\98','\115','\116','\105','\99','\107','\67','\117','\114','\118','\101','\40','\103','\97','\109','\101','\112','\97','\100','\46','\84','\104','\117','\109','\98','\115','\116','\105','\99','\107','\50','\46','\121','\41','\44','\10','\9','\9','\9','\9','\116','\104','\117','\109','\98','\115','\116','\105','\99','\107','\67','\117','\114','\118','\101','\40','\45','\103','\97','\109','\101','\112','\97','\100','\46','\84','\104','\117','\109','\98','\115','\116','\105','\99','\107','\50','\46','\120','\41','\10','\9','\9','\9','\41','\42','\80','\65','\78','\95','\71','\65','\77','\69','\80','\65','\68','\95','\83','\80','\69','\69','\68','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\107','\77','\111','\117','\115','\101','\32','\61','\32','\109','\111','\117','\115','\101','\46','\68','\101','\108','\116','\97','\42','\80','\65','\78','\95','\77','\79','\85','\83','\69','\95','\83','\80','\69','\69','\68','\10','\9','\9','\9','\109','\111','\117','\115','\101','\46','\68','\101','\108','\116','\97','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\41','\10','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\107','\71','\97','\109','\101','\112','\97','\100','\32','\43','\32','\107','\77','\111','\117','\115','\101','\10','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\73','\110','\112','\117','\116','\46','\70','\111','\118','\40','\100','\116','\41','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\107','\71','\97','\109','\101','\112','\97','\100','\32','\61','\32','\40','\103','\97','\109','\101','\112','\97','\100','\46','\66','\117','\116','\116','\111','\110','\88','\32','\45','\32','\103','\97','\109','\101','\112','\97','\100','\46','\66','\117','\116','\116','\111','\110','\89','\41','\42','\70','\79','\86','\95','\71','\65','\77','\69','\80','\65','\68','\95','\83','\80','\69','\69','\68','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\107','\77','\111','\117','\115','\101','\32','\61','\32','\109','\111','\117','\115','\101','\46','\77','\111','\117','\115','\101','\87','\104','\101','\101','\108','\42','\70','\79','\86','\95','\87','\72','\69','\69','\76','\95','\83','\80','\69','\69','\68','\10','\9','\9','\9','\109','\111','\117','\115','\101','\46','\77','\111','\117','\115','\101','\87','\104','\101','\101','\108','\32','\61','\32','\48','\10','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\107','\71','\97','\109','\101','\112','\97','\100','\32','\43','\32','\107','\77','\111','\117','\115','\101','\10','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\100','\111','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\75','\101','\121','\112','\114','\101','\115','\115','\40','\97','\99','\116','\105','\111','\110','\44','\32','\115','\116','\97','\116','\101','\44','\32','\105','\110','\112','\117','\116','\41','\10','\9','\9','\9','\9','\107','\101','\121','\98','\111','\97','\114','\100','\91','\105','\110','\112','\117','\116','\46','\75','\101','\121','\67','\111','\100','\101','\46','\78','\97','\109','\101','\93','\32','\61','\32','\115','\116','\97','\116','\101','\32','\61','\61','\32','\69','\110','\117','\109','\46','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\116','\97','\116','\101','\46','\66','\101','\103','\105','\110','\32','\97','\110','\100','\32','\49','\32','\111','\114','\32','\48','\10','\9','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\69','\110','\117','\109','\46','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\82','\101','\115','\117','\108','\116','\46','\83','\105','\110','\107','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\71','\112','\66','\117','\116','\116','\111','\110','\40','\97','\99','\116','\105','\111','\110','\44','\32','\115','\116','\97','\116','\101','\44','\32','\105','\110','\112','\117','\116','\41','\10','\9','\9','\9','\9','\103','\97','\109','\101','\112','\97','\100','\91','\105','\110','\112','\117','\116','\46','\75','\101','\121','\67','\111','\100','\101','\46','\78','\97','\109','\101','\93','\32','\61','\32','\115','\116','\97','\116','\101','\32','\61','\61','\32','\69','\110','\117','\109','\46','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\116','\97','\116','\101','\46','\66','\101','\103','\105','\110','\32','\97','\110','\100','\32','\49','\32','\111','\114','\32','\48','\10','\9','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\69','\110','\117','\109','\46','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\82','\101','\115','\117','\108','\116','\46','\83','\105','\110','\107','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\77','\111','\117','\115','\101','\80','\97','\110','\40','\97','\99','\116','\105','\111','\110','\44','\32','\115','\116','\97','\116','\101','\44','\32','\105','\110','\112','\117','\116','\41','\10','\9','\9','\9','\9','\108','\111','\99','\97','\108','\32','\100','\101','\108','\116','\97','\32','\61','\32','\105','\110','\112','\117','\116','\46','\68','\101','\108','\116','\97','\10','\9','\9','\9','\9','\109','\111','\117','\115','\101','\46','\68','\101','\108','\116','\97','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\45','\100','\101','\108','\116','\97','\46','\121','\44','\32','\45','\100','\101','\108','\116','\97','\46','\120','\41','\10','\9','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\69','\110','\117','\109','\46','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\82','\101','\115','\117','\108','\116','\46','\83','\105','\110','\107','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\84','\104','\117','\109','\98','\40','\97','\99','\116','\105','\111','\110','\44','\32','\115','\116','\97','\116','\101','\44','\32','\105','\110','\112','\117','\116','\41','\10','\9','\9','\9','\9','\103','\97','\109','\101','\112','\97','\100','\91','\105','\110','\112','\117','\116','\46','\75','\101','\121','\67','\111','\100','\101','\46','\78','\97','\109','\101','\93','\32','\61','\32','\105','\110','\112','\117','\116','\46','\80','\111','\115','\105','\116','\105','\111','\110','\10','\9','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\69','\110','\117','\109','\46','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\82','\101','\115','\117','\108','\116','\46','\83','\105','\110','\107','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\84','\114','\105','\103','\103','\101','\114','\40','\97','\99','\116','\105','\111','\110','\44','\32','\115','\116','\97','\116','\101','\44','\32','\105','\110','\112','\117','\116','\41','\10','\9','\9','\9','\9','\103','\97','\109','\101','\112','\97','\100','\91','\105','\110','\112','\117','\116','\46','\75','\101','\121','\67','\111','\100','\101','\46','\78','\97','\109','\101','\93','\32','\61','\32','\105','\110','\112','\117','\116','\46','\80','\111','\115','\105','\116','\105','\111','\110','\46','\122','\10','\9','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\69','\110','\117','\109','\46','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\82','\101','\115','\117','\108','\116','\46','\83','\105','\110','\107','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\77','\111','\117','\115','\101','\87','\104','\101','\101','\108','\40','\97','\99','\116','\105','\111','\110','\44','\32','\115','\116','\97','\116','\101','\44','\32','\105','\110','\112','\117','\116','\41','\10','\9','\9','\9','\9','\109','\111','\117','\115','\101','\91','\105','\110','\112','\117','\116','\46','\85','\115','\101','\114','\73','\110','\112','\117','\116','\84','\121','\112','\101','\46','\78','\97','\109','\101','\93','\32','\61','\32','\45','\105','\110','\112','\117','\116','\46','\80','\111','\115','\105','\116','\105','\111','\110','\46','\122','\10','\9','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\69','\110','\117','\109','\46','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\82','\101','\115','\117','\108','\116','\46','\83','\105','\110','\107','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\90','\101','\114','\111','\40','\116','\41','\10','\9','\9','\9','\9','\102','\111','\114','\32','\107','\44','\32','\118','\32','\105','\110','\32','\112','\97','\105','\114','\115','\40','\116','\41','\32','\100','\111','\10','\9','\9','\9','\9','\9','\116','\91','\107','\93','\32','\61','\32','\118','\42','\48','\10','\9','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\73','\110','\112','\117','\116','\46','\83','\116','\97','\114','\116','\67','\97','\112','\116','\117','\114','\101','\40','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\66','\105','\110','\100','\65','\99','\116','\105','\111','\110','\65','\116','\80','\114','\105','\111','\114','\105','\116','\121','\40','\34','\70','\114','\101','\101','\99','\97','\109','\75','\101','\121','\98','\111','\97','\114','\100','\34','\44','\32','\75','\101','\121','\112','\114','\101','\115','\115','\44','\32','\102','\97','\108','\115','\101','\44','\32','\73','\78','\80','\85','\84','\95','\80','\82','\73','\79','\82','\73','\84','\89','\44','\10','\9','\9','\9','\9','\9','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\87','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\85','\44','\10','\9','\9','\9','\9','\9','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\65','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\72','\44','\10','\9','\9','\9','\9','\9','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\83','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\74','\44','\10','\9','\9','\9','\9','\9','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\68','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\75','\44','\10','\9','\9','\9','\9','\9','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\69','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\73','\44','\10','\9','\9','\9','\9','\9','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\81','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\89','\44','\10','\9','\9','\9','\9','\9','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\85','\112','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\68','\111','\119','\110','\10','\9','\9','\9','\9','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\66','\105','\110','\100','\65','\99','\116','\105','\111','\110','\65','\116','\80','\114','\105','\111','\114','\105','\116','\121','\40','\34','\70','\114','\101','\101','\99','\97','\109','\77','\111','\117','\115','\101','\80','\97','\110','\34','\44','\32','\32','\32','\32','\32','\32','\32','\32','\32','\32','\77','\111','\117','\115','\101','\80','\97','\110','\44','\32','\32','\32','\102','\97','\108','\115','\101','\44','\32','\73','\78','\80','\85','\84','\95','\80','\82','\73','\79','\82','\73','\84','\89','\44','\32','\69','\110','\117','\109','\46','\85','\115','\101','\114','\73','\110','\112','\117','\116','\84','\121','\112','\101','\46','\77','\111','\117','\115','\101','\77','\111','\118','\101','\109','\101','\110','\116','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\66','\105','\110','\100','\65','\99','\116','\105','\111','\110','\65','\116','\80','\114','\105','\111','\114','\105','\116','\121','\40','\34','\70','\114','\101','\101','\99','\97','\109','\77','\111','\117','\115','\101','\87','\104','\101','\101','\108','\34','\44','\32','\32','\32','\32','\32','\32','\32','\32','\77','\111','\117','\115','\101','\87','\104','\101','\101','\108','\44','\32','\102','\97','\108','\115','\101','\44','\32','\73','\78','\80','\85','\84','\95','\80','\82','\73','\79','\82','\73','\84','\89','\44','\32','\69','\110','\117','\109','\46','\85','\115','\101','\114','\73','\110','\112','\117','\116','\84','\121','\112','\101','\46','\77','\111','\117','\115','\101','\87','\104','\101','\101','\108','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\66','\105','\110','\100','\65','\99','\116','\105','\111','\110','\65','\116','\80','\114','\105','\111','\114','\105','\116','\121','\40','\34','\70','\114','\101','\101','\99','\97','\109','\71','\97','\109','\101','\112','\97','\100','\66','\117','\116','\116','\111','\110','\34','\44','\32','\32','\32','\32','\32','\71','\112','\66','\117','\116','\116','\111','\110','\44','\32','\32','\32','\102','\97','\108','\115','\101','\44','\32','\73','\78','\80','\85','\84','\95','\80','\82','\73','\79','\82','\73','\84','\89','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\66','\117','\116','\116','\111','\110','\88','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\66','\117','\116','\116','\111','\110','\89','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\66','\105','\110','\100','\65','\99','\116','\105','\111','\110','\65','\116','\80','\114','\105','\111','\114','\105','\116','\121','\40','\34','\70','\114','\101','\101','\99','\97','\109','\71','\97','\109','\101','\112','\97','\100','\84','\114','\105','\103','\103','\101','\114','\34','\44','\32','\32','\32','\32','\84','\114','\105','\103','\103','\101','\114','\44','\32','\32','\32','\32','\102','\97','\108','\115','\101','\44','\32','\73','\78','\80','\85','\84','\95','\80','\82','\73','\79','\82','\73','\84','\89','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\66','\117','\116','\116','\111','\110','\82','\50','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\66','\117','\116','\116','\111','\110','\76','\50','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\66','\105','\110','\100','\65','\99','\116','\105','\111','\110','\65','\116','\80','\114','\105','\111','\114','\105','\116','\121','\40','\34','\70','\114','\101','\101','\99','\97','\109','\71','\97','\109','\101','\112','\97','\100','\84','\104','\117','\109','\98','\115','\116','\105','\99','\107','\34','\44','\32','\84','\104','\117','\109','\98','\44','\32','\32','\32','\32','\32','\32','\102','\97','\108','\115','\101','\44','\32','\73','\78','\80','\85','\84','\95','\80','\82','\73','\79','\82','\73','\84','\89','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\84','\104','\117','\109','\98','\115','\116','\105','\99','\107','\49','\44','\32','\69','\110','\117','\109','\46','\75','\101','\121','\67','\111','\100','\101','\46','\84','\104','\117','\109','\98','\115','\116','\105','\99','\107','\50','\41','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\73','\110','\112','\117','\116','\46','\83','\116','\111','\112','\67','\97','\112','\116','\117','\114','\101','\40','\41','\10','\9','\9','\9','\9','\110','\97','\118','\83','\112','\101','\101','\100','\32','\61','\32','\49','\10','\9','\9','\9','\9','\90','\101','\114','\111','\40','\103','\97','\109','\101','\112','\97','\100','\41','\10','\9','\9','\9','\9','\90','\101','\114','\111','\40','\107','\101','\121','\98','\111','\97','\114','\100','\41','\10','\9','\9','\9','\9','\90','\101','\114','\111','\40','\109','\111','\117','\115','\101','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\85','\110','\98','\105','\110','\100','\65','\99','\116','\105','\111','\110','\40','\34','\70','\114','\101','\101','\99','\97','\109','\75','\101','\121','\98','\111','\97','\114','\100','\34','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\85','\110','\98','\105','\110','\100','\65','\99','\116','\105','\111','\110','\40','\34','\70','\114','\101','\101','\99','\97','\109','\77','\111','\117','\115','\101','\80','\97','\110','\34','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\85','\110','\98','\105','\110','\100','\65','\99','\116','\105','\111','\110','\40','\34','\70','\114','\101','\101','\99','\97','\109','\77','\111','\117','\115','\101','\87','\104','\101','\101','\108','\34','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\85','\110','\98','\105','\110','\100','\65','\99','\116','\105','\111','\110','\40','\34','\70','\114','\101','\101','\99','\97','\109','\71','\97','\109','\101','\112','\97','\100','\66','\117','\116','\116','\111','\110','\34','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\85','\110','\98','\105','\110','\100','\65','\99','\116','\105','\111','\110','\40','\34','\70','\114','\101','\101','\99','\97','\109','\71','\97','\109','\101','\112','\97','\100','\84','\114','\105','\103','\103','\101','\114','\34','\41','\10','\9','\9','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\85','\110','\98','\105','\110','\100','\65','\99','\116','\105','\111','\110','\40','\34','\70','\114','\101','\101','\99','\97','\109','\71','\97','\109','\101','\112','\97','\100','\84','\104','\117','\109','\98','\115','\116','\105','\99','\107','\34','\41','\10','\9','\9','\9','\101','\110','\100','\10','\9','\9','\101','\110','\100','\10','\9','\101','\110','\100','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\71','\101','\116','\70','\111','\99','\117','\115','\68','\105','\115','\116','\97','\110','\99','\101','\40','\99','\97','\109','\101','\114','\97','\70','\114','\97','\109','\101','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\122','\110','\101','\97','\114','\32','\61','\32','\48','\46','\49','\10','\9','\9','\108','\111','\99','\97','\108','\32','\118','\105','\101','\119','\112','\111','\114','\116','\32','\61','\32','\67','\97','\109','\101','\114','\97','\46','\86','\105','\101','\119','\112','\111','\114','\116','\83','\105','\122','\101','\10','\9','\9','\108','\111','\99','\97','\108','\32','\112','\114','\111','\106','\121','\32','\61','\32','\50','\42','\116','\97','\110','\40','\99','\97','\109','\101','\114','\97','\70','\111','\118','\47','\50','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\112','\114','\111','\106','\120','\32','\61','\32','\118','\105','\101','\119','\112','\111','\114','\116','\46','\120','\47','\118','\105','\101','\119','\112','\111','\114','\116','\46','\121','\42','\112','\114','\111','\106','\121','\10','\9','\9','\108','\111','\99','\97','\108','\32','\102','\120','\32','\61','\32','\99','\97','\109','\101','\114','\97','\70','\114','\97','\109','\101','\46','\114','\105','\103','\104','\116','\86','\101','\99','\116','\111','\114','\10','\9','\9','\108','\111','\99','\97','\108','\32','\102','\121','\32','\61','\32','\99','\97','\109','\101','\114','\97','\70','\114','\97','\109','\101','\46','\117','\112','\86','\101','\99','\116','\111','\114','\10','\9','\9','\108','\111','\99','\97','\108','\32','\102','\122','\32','\61','\32','\99','\97','\109','\101','\114','\97','\70','\114','\97','\109','\101','\46','\108','\111','\111','\107','\86','\101','\99','\116','\111','\114','\10','\9','\10','\9','\9','\108','\111','\99','\97','\108','\32','\109','\105','\110','\86','\101','\99','\116','\32','\61','\32','\86','\101','\99','\116','\111','\114','\51','\46','\110','\101','\119','\40','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\109','\105','\110','\68','\105','\115','\116','\32','\61','\32','\53','\49','\50','\10','\9','\10','\9','\9','\102','\111','\114','\32','\120','\32','\61','\32','\48','\44','\32','\49','\44','\32','\48','\46','\53','\32','\100','\111','\10','\9','\9','\9','\102','\111','\114','\32','\121','\32','\61','\32','\48','\44','\32','\49','\44','\32','\48','\46','\53','\32','\100','\111','\10','\9','\9','\9','\9','\108','\111','\99','\97','\108','\32','\99','\120','\32','\61','\32','\40','\120','\32','\45','\32','\48','\46','\53','\41','\42','\112','\114','\111','\106','\120','\10','\9','\9','\9','\9','\108','\111','\99','\97','\108','\32','\99','\121','\32','\61','\32','\40','\121','\32','\45','\32','\48','\46','\53','\41','\42','\112','\114','\111','\106','\121','\10','\9','\9','\9','\9','\108','\111','\99','\97','\108','\32','\111','\102','\102','\115','\101','\116','\32','\61','\32','\102','\120','\42','\99','\120','\32','\45','\32','\102','\121','\42','\99','\121','\32','\43','\32','\102','\122','\10','\9','\9','\9','\9','\108','\111','\99','\97','\108','\32','\111','\114','\105','\103','\105','\110','\32','\61','\32','\99','\97','\109','\101','\114','\97','\70','\114','\97','\109','\101','\46','\112','\32','\43','\32','\111','\102','\102','\115','\101','\116','\42','\122','\110','\101','\97','\114','\10','\9','\9','\9','\9','\108','\111','\99','\97','\108','\32','\95','\44','\32','\104','\105','\116','\32','\61','\32','\87','\111','\114','\107','\115','\112','\97','\99','\101','\58','\70','\105','\110','\100','\80','\97','\114','\116','\79','\110','\82','\97','\121','\40','\82','\97','\121','\46','\110','\101','\119','\40','\111','\114','\105','\103','\105','\110','\44','\32','\111','\102','\102','\115','\101','\116','\46','\117','\110','\105','\116','\42','\109','\105','\110','\68','\105','\115','\116','\41','\41','\10','\9','\9','\9','\9','\108','\111','\99','\97','\108','\32','\100','\105','\115','\116','\32','\61','\32','\40','\104','\105','\116','\32','\45','\32','\111','\114','\105','\103','\105','\110','\41','\46','\109','\97','\103','\110','\105','\116','\117','\100','\101','\10','\9','\9','\9','\9','\105','\102','\32','\109','\105','\110','\68','\105','\115','\116','\32','\62','\32','\100','\105','\115','\116','\32','\116','\104','\101','\110','\10','\9','\9','\9','\9','\9','\109','\105','\110','\68','\105','\115','\116','\32','\61','\32','\100','\105','\115','\116','\10','\9','\9','\9','\9','\9','\109','\105','\110','\86','\101','\99','\116','\32','\61','\32','\111','\102','\102','\115','\101','\116','\46','\117','\110','\105','\116','\10','\9','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\101','\110','\100','\10','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\114','\101','\116','\117','\114','\110','\32','\102','\122','\58','\68','\111','\116','\40','\109','\105','\110','\86','\101','\99','\116','\41','\42','\109','\105','\110','\68','\105','\115','\116','\10','\9','\101','\110','\100','\10','\9','\10','\9','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\83','\116','\101','\112','\70','\114','\101','\101','\99','\97','\109','\40','\100','\116','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\118','\101','\108','\32','\61','\32','\118','\101','\108','\83','\112','\114','\105','\110','\103','\58','\85','\112','\100','\97','\116','\101','\40','\100','\116','\44','\32','\73','\110','\112','\117','\116','\46','\86','\101','\108','\40','\100','\116','\41','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\112','\97','\110','\32','\61','\32','\112','\97','\110','\83','\112','\114','\105','\110','\103','\58','\85','\112','\100','\97','\116','\101','\40','\100','\116','\44','\32','\73','\110','\112','\117','\116','\46','\80','\97','\110','\40','\100','\116','\41','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\102','\111','\118','\32','\61','\32','\102','\111','\118','\83','\112','\114','\105','\110','\103','\58','\85','\112','\100','\97','\116','\101','\40','\100','\116','\44','\32','\73','\110','\112','\117','\116','\46','\70','\111','\118','\40','\100','\116','\41','\41','\10','\9','\10','\9','\9','\108','\111','\99','\97','\108','\32','\122','\111','\111','\109','\70','\97','\99','\116','\111','\114','\32','\61','\32','\115','\113','\114','\116','\40','\116','\97','\110','\40','\114','\97','\100','\40','\55','\48','\47','\50','\41','\41','\47','\116','\97','\110','\40','\114','\97','\100','\40','\99','\97','\109','\101','\114','\97','\70','\111','\118','\47','\50','\41','\41','\41','\10','\9','\10','\9','\9','\99','\97','\109','\101','\114','\97','\70','\111','\118','\32','\61','\32','\99','\108','\97','\109','\112','\40','\99','\97','\109','\101','\114','\97','\70','\111','\118','\32','\43','\32','\102','\111','\118','\42','\70','\79','\86','\95','\71','\65','\73','\78','\42','\40','\100','\116','\47','\122','\111','\111','\109','\70','\97','\99','\116','\111','\114','\41','\44','\32','\49','\44','\32','\49','\50','\48','\41','\10','\9','\9','\99','\97','\109','\101','\114','\97','\82','\111','\116','\32','\61','\32','\99','\97','\109','\101','\114','\97','\82','\111','\116','\32','\43','\32','\112','\97','\110','\42','\80','\65','\78','\95','\71','\65','\73','\78','\42','\40','\100','\116','\47','\122','\111','\111','\109','\70','\97','\99','\116','\111','\114','\41','\10','\9','\9','\99','\97','\109','\101','\114','\97','\82','\111','\116','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\99','\108','\97','\109','\112','\40','\99','\97','\109','\101','\114','\97','\82','\111','\116','\46','\120','\44','\32','\45','\80','\73','\84','\67','\72','\95','\76','\73','\77','\73','\84','\44','\32','\80','\73','\84','\67','\72','\95','\76','\73','\77','\73','\84','\41','\44','\32','\99','\97','\109','\101','\114','\97','\82','\111','\116','\46','\121','\37','\40','\50','\42','\112','\105','\41','\41','\10','\9','\10','\9','\9','\108','\111','\99','\97','\108','\32','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\32','\61','\32','\67','\70','\114','\97','\109','\101','\46','\110','\101','\119','\40','\99','\97','\109','\101','\114','\97','\80','\111','\115','\41','\42','\67','\70','\114','\97','\109','\101','\46','\102','\114','\111','\109','\79','\114','\105','\101','\110','\116','\97','\116','\105','\111','\110','\40','\99','\97','\109','\101','\114','\97','\82','\111','\116','\46','\120','\44','\32','\99','\97','\109','\101','\114','\97','\82','\111','\116','\46','\121','\44','\32','\48','\41','\42','\67','\70','\114','\97','\109','\101','\46','\110','\101','\119','\40','\118','\101','\108','\42','\78','\65','\86','\95','\71','\65','\73','\78','\42','\100','\116','\41','\10','\9','\9','\99','\97','\109','\101','\114','\97','\80','\111','\115','\32','\61','\32','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\46','\112','\10','\9','\10','\9','\9','\67','\97','\109','\101','\114','\97','\46','\67','\70','\114','\97','\109','\101','\32','\61','\32','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\10','\9','\9','\67','\97','\109','\101','\114','\97','\46','\70','\111','\99','\117','\115','\32','\61','\32','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\42','\67','\70','\114','\97','\109','\101','\46','\110','\101','\119','\40','\48','\44','\32','\48','\44','\32','\45','\71','\101','\116','\70','\111','\99','\117','\115','\68','\105','\115','\116','\97','\110','\99','\101','\40','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\41','\41','\10','\9','\9','\67','\97','\109','\101','\114','\97','\46','\70','\105','\101','\108','\100','\79','\102','\86','\105','\101','\119','\32','\61','\32','\99','\97','\109','\101','\114','\97','\70','\111','\118','\10','\9','\101','\110','\100','\10','\9','\10','\9','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\80','\108','\97','\121','\101','\114','\83','\116','\97','\116','\101','\32','\61','\32','\123','\125','\32','\100','\111','\10','\9','\9','\108','\111','\99','\97','\108','\32','\109','\111','\117','\115','\101','\66','\101','\104','\97','\118','\105','\111','\114','\10','\9','\9','\108','\111','\99','\97','\108','\32','\109','\111','\117','\115','\101','\73','\99','\111','\110','\69','\110','\97','\98','\108','\101','\100','\10','\9','\9','\108','\111','\99','\97','\108','\32','\99','\97','\109','\101','\114','\97','\84','\121','\112','\101','\10','\9','\9','\108','\111','\99','\97','\108','\32','\99','\97','\109','\101','\114','\97','\70','\111','\99','\117','\115','\10','\9','\9','\108','\111','\99','\97','\108','\32','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\10','\9','\9','\108','\111','\99','\97','\108','\32','\99','\97','\109','\101','\114','\97','\70','\105','\101','\108','\100','\79','\102','\86','\105','\101','\119','\10','\9','\9','\108','\111','\99','\97','\108','\32','\115','\99','\114','\101','\101','\110','\71','\117','\105','\115','\32','\61','\32','\123','\125','\10','\9','\9','\108','\111','\99','\97','\108','\32','\99','\111','\114','\101','\71','\117','\105','\115','\32','\61','\32','\123','\10','\9','\9','\9','\66','\97','\99','\107','\112','\97','\99','\107','\32','\61','\32','\116','\114','\117','\101','\44','\10','\9','\9','\9','\67','\104','\97','\116','\32','\61','\32','\116','\114','\117','\101','\44','\10','\9','\9','\9','\72','\101','\97','\108','\116','\104','\32','\61','\32','\116','\114','\117','\101','\44','\10','\9','\9','\9','\80','\108','\97','\121','\101','\114','\76','\105','\115','\116','\32','\61','\32','\116','\114','\117','\101','\44','\10','\9','\9','\125','\10','\9','\9','\108','\111','\99','\97','\108','\32','\115','\101','\116','\67','\111','\114','\101','\115','\32','\61','\32','\123','\10','\9','\9','\9','\66','\97','\100','\103','\101','\115','\78','\111','\116','\105','\102','\105','\99','\97','\116','\105','\111','\110','\115','\65','\99','\116','\105','\118','\101','\32','\61','\32','\116','\114','\117','\101','\44','\10','\9','\9','\9','\80','\111','\105','\110','\116','\115','\78','\111','\116','\105','\102','\105','\99','\97','\116','\105','\111','\110','\115','\65','\99','\116','\105','\118','\101','\32','\61','\32','\116','\114','\117','\101','\44','\10','\9','\9','\125','\10','\9','\10','\9','\9','\45','\45','\32','\83','\97','\118','\101','\32','\115','\116','\97','\116','\101','\32','\97','\110','\100','\32','\115','\101','\116','\32','\117','\112','\32','\102','\111','\114','\32','\102','\114','\101','\101','\99','\97','\109','\10','\9','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\80','\108','\97','\121','\101','\114','\83','\116','\97','\116','\101','\46','\80','\117','\115','\104','\40','\41','\10','\9','\9','\9','\102','\111','\114','\32','\110','\97','\109','\101','\32','\105','\110','\32','\112','\97','\105','\114','\115','\40','\99','\111','\114','\101','\71','\117','\105','\115','\41','\32','\100','\111','\10','\9','\9','\9','\9','\99','\111','\114','\101','\71','\117','\105','\115','\91','\110','\97','\109','\101','\93','\32','\61','\32','\83','\116','\97','\114','\116','\101','\114','\71','\117','\105','\58','\71','\101','\116','\67','\111','\114','\101','\71','\117','\105','\69','\110','\97','\98','\108','\101','\100','\40','\69','\110','\117','\109','\46','\67','\111','\114','\101','\71','\117','\105','\84','\121','\112','\101','\91','\110','\97','\109','\101','\93','\41','\10','\9','\9','\9','\9','\83','\116','\97','\114','\116','\101','\114','\71','\117','\105','\58','\83','\101','\116','\67','\111','\114','\101','\71','\117','\105','\69','\110','\97','\98','\108','\101','\100','\40','\69','\110','\117','\109','\46','\67','\111','\114','\101','\71','\117','\105','\84','\121','\112','\101','\91','\110','\97','\109','\101','\93','\44','\32','\102','\97','\108','\115','\101','\41','\10','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\102','\111','\114','\32','\110','\97','\109','\101','\32','\105','\110','\32','\112','\97','\105','\114','\115','\40','\115','\101','\116','\67','\111','\114','\101','\115','\41','\32','\100','\111','\10','\9','\9','\9','\9','\115','\101','\116','\67','\111','\114','\101','\115','\91','\110','\97','\109','\101','\93','\32','\61','\32','\83','\116','\97','\114','\116','\101','\114','\71','\117','\105','\58','\71','\101','\116','\67','\111','\114','\101','\40','\110','\97','\109','\101','\41','\10','\9','\9','\9','\9','\83','\116','\97','\114','\116','\101','\114','\71','\117','\105','\58','\83','\101','\116','\67','\111','\114','\101','\40','\110','\97','\109','\101','\44','\32','\102','\97','\108','\115','\101','\41','\10','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\108','\111','\99','\97','\108','\32','\112','\108','\97','\121','\101','\114','\103','\117','\105','\32','\61','\32','\76','\111','\99','\97','\108','\80','\108','\97','\121','\101','\114','\58','\70','\105','\110','\100','\70','\105','\114','\115','\116','\67','\104','\105','\108','\100','\79','\102','\67','\108','\97','\115','\115','\40','\34','\80','\108','\97','\121','\101','\114','\71','\117','\105','\34','\41','\10','\9','\9','\9','\105','\102','\32','\112','\108','\97','\121','\101','\114','\103','\117','\105','\32','\116','\104','\101','\110','\10','\9','\9','\9','\9','\102','\111','\114','\32','\95','\44','\32','\103','\117','\105','\32','\105','\110','\32','\112','\97','\105','\114','\115','\40','\112','\108','\97','\121','\101','\114','\103','\117','\105','\58','\71','\101','\116','\67','\104','\105','\108','\100','\114','\101','\110','\40','\41','\41','\32','\100','\111','\10','\9','\9','\9','\9','\9','\105','\102','\32','\103','\117','\105','\58','\73','\115','\65','\40','\34','\83','\99','\114','\101','\101','\110','\71','\117','\105','\34','\41','\32','\97','\110','\100','\32','\103','\117','\105','\46','\69','\110','\97','\98','\108','\101','\100','\32','\116','\104','\101','\110','\10','\9','\9','\9','\9','\9','\9','\115','\99','\114','\101','\101','\110','\71','\117','\105','\115','\91','\35','\115','\99','\114','\101','\101','\110','\71','\117','\105','\115','\32','\43','\32','\49','\93','\32','\61','\32','\103','\117','\105','\10','\9','\9','\9','\9','\9','\9','\103','\117','\105','\46','\69','\110','\97','\98','\108','\101','\100','\32','\61','\32','\102','\97','\108','\115','\101','\10','\9','\9','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\99','\97','\109','\101','\114','\97','\70','\105','\101','\108','\100','\79','\102','\86','\105','\101','\119','\32','\61','\32','\67','\97','\109','\101','\114','\97','\46','\70','\105','\101','\108','\100','\79','\102','\86','\105','\101','\119','\10','\9','\9','\9','\67','\97','\109','\101','\114','\97','\46','\70','\105','\101','\108','\100','\79','\102','\86','\105','\101','\119','\32','\61','\32','\55','\48','\10','\9','\10','\9','\9','\9','\99','\97','\109','\101','\114','\97','\84','\121','\112','\101','\32','\61','\32','\67','\97','\109','\101','\114','\97','\46','\67','\97','\109','\101','\114','\97','\84','\121','\112','\101','\10','\9','\9','\9','\67','\97','\109','\101','\114','\97','\46','\67','\97','\109','\101','\114','\97','\84','\121','\112','\101','\32','\61','\32','\69','\110','\117','\109','\46','\67','\97','\109','\101','\114','\97','\84','\121','\112','\101','\46','\67','\117','\115','\116','\111','\109','\10','\9','\10','\9','\9','\9','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\32','\61','\32','\67','\97','\109','\101','\114','\97','\46','\67','\70','\114','\97','\109','\101','\10','\9','\9','\9','\99','\97','\109','\101','\114','\97','\70','\111','\99','\117','\115','\32','\61','\32','\67','\97','\109','\101','\114','\97','\46','\70','\111','\99','\117','\115','\10','\9','\10','\9','\9','\9','\109','\111','\117','\115','\101','\73','\99','\111','\110','\69','\110','\97','\98','\108','\101','\100','\32','\61','\32','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\101','\114','\118','\105','\99','\101','\46','\77','\111','\117','\115','\101','\73','\99','\111','\110','\69','\110','\97','\98','\108','\101','\100','\10','\9','\9','\9','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\101','\114','\118','\105','\99','\101','\46','\77','\111','\117','\115','\101','\73','\99','\111','\110','\69','\110','\97','\98','\108','\101','\100','\32','\61','\32','\102','\97','\108','\115','\101','\10','\9','\10','\9','\9','\9','\109','\111','\117','\115','\101','\66','\101','\104','\97','\118','\105','\111','\114','\32','\61','\32','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\101','\114','\118','\105','\99','\101','\46','\77','\111','\117','\115','\101','\66','\101','\104','\97','\118','\105','\111','\114','\10','\9','\9','\9','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\101','\114','\118','\105','\99','\101','\46','\77','\111','\117','\115','\101','\66','\101','\104','\97','\118','\105','\111','\114','\32','\61','\32','\69','\110','\117','\109','\46','\77','\111','\117','\115','\101','\66','\101','\104','\97','\118','\105','\111','\114','\46','\68','\101','\102','\97','\117','\108','\116','\10','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\45','\45','\32','\82','\101','\115','\116','\111','\114','\101','\32','\115','\116','\97','\116','\101','\10','\9','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\80','\108','\97','\121','\101','\114','\83','\116','\97','\116','\101','\46','\80','\111','\112','\40','\41','\10','\9','\9','\9','\102','\111','\114','\32','\110','\97','\109','\101','\44','\32','\105','\115','\69','\110','\97','\98','\108','\101','\100','\32','\105','\110','\32','\112','\97','\105','\114','\115','\40','\99','\111','\114','\101','\71','\117','\105','\115','\41','\32','\100','\111','\10','\9','\9','\9','\9','\83','\116','\97','\114','\116','\101','\114','\71','\117','\105','\58','\83','\101','\116','\67','\111','\114','\101','\71','\117','\105','\69','\110','\97','\98','\108','\101','\100','\40','\69','\110','\117','\109','\46','\67','\111','\114','\101','\71','\117','\105','\84','\121','\112','\101','\91','\110','\97','\109','\101','\93','\44','\32','\105','\115','\69','\110','\97','\98','\108','\101','\100','\41','\10','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\102','\111','\114','\32','\110','\97','\109','\101','\44','\32','\105','\115','\69','\110','\97','\98','\108','\101','\100','\32','\105','\110','\32','\112','\97','\105','\114','\115','\40','\115','\101','\116','\67','\111','\114','\101','\115','\41','\32','\100','\111','\10','\9','\9','\9','\9','\83','\116','\97','\114','\116','\101','\114','\71','\117','\105','\58','\83','\101','\116','\67','\111','\114','\101','\40','\110','\97','\109','\101','\44','\32','\105','\115','\69','\110','\97','\98','\108','\101','\100','\41','\10','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\102','\111','\114','\32','\95','\44','\32','\103','\117','\105','\32','\105','\110','\32','\112','\97','\105','\114','\115','\40','\115','\99','\114','\101','\101','\110','\71','\117','\105','\115','\41','\32','\100','\111','\10','\9','\9','\9','\9','\105','\102','\32','\103','\117','\105','\46','\80','\97','\114','\101','\110','\116','\32','\116','\104','\101','\110','\10','\9','\9','\9','\9','\9','\103','\117','\105','\46','\69','\110','\97','\98','\108','\101','\100','\32','\61','\32','\116','\114','\117','\101','\10','\9','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\9','\67','\97','\109','\101','\114','\97','\46','\70','\105','\101','\108','\100','\79','\102','\86','\105','\101','\119','\32','\61','\32','\99','\97','\109','\101','\114','\97','\70','\105','\101','\108','\100','\79','\102','\86','\105','\101','\119','\10','\9','\9','\9','\99','\97','\109','\101','\114','\97','\70','\105','\101','\108','\100','\79','\102','\86','\105','\101','\119','\32','\61','\32','\110','\105','\108','\10','\9','\10','\9','\9','\9','\67','\97','\109','\101','\114','\97','\46','\67','\97','\109','\101','\114','\97','\84','\121','\112','\101','\32','\61','\32','\99','\97','\109','\101','\114','\97','\84','\121','\112','\101','\10','\9','\9','\9','\99','\97','\109','\101','\114','\97','\84','\121','\112','\101','\32','\61','\32','\110','\105','\108','\10','\9','\10','\9','\9','\9','\67','\97','\109','\101','\114','\97','\46','\67','\70','\114','\97','\109','\101','\32','\61','\32','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\10','\9','\9','\9','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\32','\61','\32','\110','\105','\108','\10','\9','\10','\9','\9','\9','\67','\97','\109','\101','\114','\97','\46','\70','\111','\99','\117','\115','\32','\61','\32','\99','\97','\109','\101','\114','\97','\70','\111','\99','\117','\115','\10','\9','\9','\9','\99','\97','\109','\101','\114','\97','\70','\111','\99','\117','\115','\32','\61','\32','\110','\105','\108','\10','\9','\10','\9','\9','\9','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\101','\114','\118','\105','\99','\101','\46','\77','\111','\117','\115','\101','\73','\99','\111','\110','\69','\110','\97','\98','\108','\101','\100','\32','\61','\32','\109','\111','\117','\115','\101','\73','\99','\111','\110','\69','\110','\97','\98','\108','\101','\100','\10','\9','\9','\9','\109','\111','\117','\115','\101','\73','\99','\111','\110','\69','\110','\97','\98','\108','\101','\100','\32','\61','\32','\110','\105','\108','\10','\9','\10','\9','\9','\9','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\101','\114','\118','\105','\99','\101','\46','\77','\111','\117','\115','\101','\66','\101','\104','\97','\118','\105','\111','\114','\32','\61','\32','\109','\111','\117','\115','\101','\66','\101','\104','\97','\118','\105','\111','\114','\10','\9','\9','\9','\109','\111','\117','\115','\101','\66','\101','\104','\97','\118','\105','\111','\114','\32','\61','\32','\110','\105','\108','\10','\9','\9','\101','\110','\100','\10','\9','\101','\110','\100','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\83','\116','\97','\114','\116','\70','\114','\101','\101','\99','\97','\109','\40','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\32','\61','\32','\67','\97','\109','\101','\114','\97','\46','\67','\70','\114','\97','\109','\101','\10','\9','\9','\99','\97','\109','\101','\114','\97','\82','\111','\116','\32','\61','\32','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\58','\116','\111','\69','\117','\108','\101','\114','\65','\110','\103','\108','\101','\115','\89','\88','\90','\40','\41','\41','\10','\9','\9','\99','\97','\109','\101','\114','\97','\80','\111','\115','\32','\61','\32','\99','\97','\109','\101','\114','\97','\67','\70','\114','\97','\109','\101','\46','\112','\10','\9','\9','\99','\97','\109','\101','\114','\97','\70','\111','\118','\32','\61','\32','\67','\97','\109','\101','\114','\97','\46','\70','\105','\101','\108','\100','\79','\102','\86','\105','\101','\119','\10','\9','\10','\9','\9','\118','\101','\108','\83','\112','\114','\105','\110','\103','\58','\82','\101','\115','\101','\116','\40','\86','\101','\99','\116','\111','\114','\51','\46','\110','\101','\119','\40','\41','\41','\10','\9','\9','\112','\97','\110','\83','\112','\114','\105','\110','\103','\58','\82','\101','\115','\101','\116','\40','\86','\101','\99','\116','\111','\114','\50','\46','\110','\101','\119','\40','\41','\41','\10','\9','\9','\102','\111','\118','\83','\112','\114','\105','\110','\103','\58','\82','\101','\115','\101','\116','\40','\48','\41','\10','\9','\10','\9','\9','\80','\108','\97','\121','\101','\114','\83','\116','\97','\116','\101','\46','\80','\117','\115','\104','\40','\41','\10','\9','\9','\82','\117','\110','\83','\101','\114','\118','\105','\99','\101','\58','\66','\105','\110','\100','\84','\111','\82','\101','\110','\100','\101','\114','\83','\116','\101','\112','\40','\34','\70','\114','\101','\101','\99','\97','\109','\34','\44','\32','\69','\110','\117','\109','\46','\82','\101','\110','\100','\101','\114','\80','\114','\105','\111','\114','\105','\116','\121','\46','\67','\97','\109','\101','\114','\97','\46','\86','\97','\108','\117','\101','\44','\32','\83','\116','\101','\112','\70','\114','\101','\101','\99','\97','\109','\41','\10','\9','\9','\73','\110','\112','\117','\116','\46','\83','\116','\97','\114','\116','\67','\97','\112','\116','\117','\114','\101','\40','\41','\10','\9','\101','\110','\100','\10','\9','\10','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\83','\116','\111','\112','\70','\114','\101','\101','\99','\97','\109','\40','\41','\10','\9','\9','\73','\110','\112','\117','\116','\46','\83','\116','\111','\112','\67','\97','\112','\116','\117','\114','\101','\40','\41','\10','\9','\9','\82','\117','\110','\83','\101','\114','\118','\105','\99','\101','\58','\85','\110','\98','\105','\110','\100','\70','\114','\111','\109','\82','\101','\110','\100','\101','\114','\83','\116','\101','\112','\40','\34','\70','\114','\101','\101','\99','\97','\109','\34','\41','\10','\9','\9','\80','\108','\97','\121','\101','\114','\83','\116','\97','\116','\101','\46','\80','\111','\112','\40','\41','\10','\9','\101','\110','\100','\10','\9','\10','\9','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\45','\10','\9','\10','\9','\100','\111','\10','\9','\9','\108','\111','\99','\97','\108','\32','\101','\110','\97','\98','\108','\101','\100','\32','\61','\32','\102','\97','\108','\115','\101','\10','\9','\10','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\84','\111','\103','\103','\108','\101','\70','\114','\101','\101','\99','\97','\109','\40','\41','\10','\9','\9','\9','\105','\102','\32','\101','\110','\97','\98','\108','\101','\100','\32','\116','\104','\101','\110','\10','\9','\9','\9','\9','\83','\116','\111','\112','\70','\114','\101','\101','\99','\97','\109','\40','\41','\10','\9','\9','\9','\101','\108','\115','\101','\10','\9','\9','\9','\9','\83','\116','\97','\114','\116','\70','\114','\101','\101','\99','\97','\109','\40','\41','\10','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\101','\110','\97','\98','\108','\101','\100','\32','\61','\32','\110','\111','\116','\32','\101','\110','\97','\98','\108','\101','\100','\10','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\67','\104','\101','\99','\107','\77','\97','\99','\114','\111','\40','\109','\97','\99','\114','\111','\41','\10','\9','\9','\9','\102','\111','\114','\32','\105','\32','\61','\32','\49','\44','\32','\35','\109','\97','\99','\114','\111','\32','\45','\32','\49','\32','\100','\111','\10','\9','\9','\9','\9','\105','\102','\32','\110','\111','\116','\32','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\101','\114','\118','\105','\99','\101','\58','\73','\115','\75','\101','\121','\68','\111','\119','\110','\40','\109','\97','\99','\114','\111','\91','\105','\93','\41','\32','\116','\104','\101','\110','\10','\9','\9','\9','\9','\9','\114','\101','\116','\117','\114','\110','\10','\9','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\84','\111','\103','\103','\108','\101','\70','\114','\101','\101','\99','\97','\109','\40','\41','\10','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\108','\111','\99','\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\72','\97','\110','\100','\108','\101','\65','\99','\116','\105','\118','\97','\116','\105','\111','\110','\73','\110','\112','\117','\116','\40','\97','\99','\116','\105','\111','\110','\44','\32','\115','\116','\97','\116','\101','\44','\32','\105','\110','\112','\117','\116','\41','\10','\9','\9','\9','\105','\102','\32','\115','\116','\97','\116','\101','\32','\61','\61','\32','\69','\110','\117','\109','\46','\85','\115','\101','\114','\73','\110','\112','\117','\116','\83','\116','\97','\116','\101','\46','\66','\101','\103','\105','\110','\32','\116','\104','\101','\110','\10','\9','\9','\9','\9','\105','\102','\32','\105','\110','\112','\117','\116','\46','\75','\101','\121','\67','\111','\100','\101','\32','\61','\61','\32','\70','\82','\69','\69','\67','\65','\77','\95','\77','\65','\67','\82','\79','\95','\75','\66','\91','\35','\70','\82','\69','\69','\67','\65','\77','\95','\77','\65','\67','\82','\79','\95','\75','\66','\93','\32','\116','\104','\101','\110','\10','\9','\9','\9','\9','\9','\67','\104','\101','\99','\107','\77','\97','\99','\114','\111','\40','\70','\82','\69','\69','\67','\65','\77','\95','\77','\65','\67','\82','\79','\95','\75','\66','\41','\10','\9','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\101','\110','\100','\10','\9','\9','\9','\114','\101','\116','\117','\114','\110','\32','\69','\110','\117','\109','\46','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\82','\101','\115','\117','\108','\116','\46','\80','\97','\115','\115','\10','\9','\9','\101','\110','\100','\10','\9','\10','\9','\9','\67','\111','\110','\116','\101','\120','\116','\65','\99','\116','\105','\111','\110','\83','\101','\114','\118','\105','\99','\101','\58','\66','\105','\110','\100','\65','\99','\116','\105','\111','\110','\65','\116','\80','\114','\105','\111','\114','\105','\116','\121','\40','\34','\70','\114','\101','\101','\99','\97','\109','\84','\111','\103','\103','\108','\101','\34','\44','\32','\72','\97','\110','\100','\108','\101','\65','\99','\116','\105','\118','\97','\116','\105','\111','\110','\73','\110','\112','\117','\116','\44','\32','\102','\97','\108','\115','\101','\44','\32','\84','\79','\71','\71','\76','\69','\95','\73','\78','\80','\85','\84','\95','\80','\82','\73','\79','\82','\73','\84','\89','\44','\32','\70','\82','\69','\69','\67','\65','\77','\95','\77','\65','\67','\82','\79','\95','\75','\66','\91','\35','\70','\82','\69','\69','\67','\65','\77','\95','\77','\65','\67','\82','\79','\95','\75','\66','\93','\41','\10','\9','\101','\110','\100','\10','\10','\101','\110','\100','\10','\99','\111','\114','\111','\117','\116','\105','\110','\101','\46','\114','\101','\115','\117','\109','\101','\40','\99','\111','\114','\111','\117','\116','\105','\110','\101','\46','\99','\114','\101','\97','\116','\101','\40','\83','\67','\82','\73','\80','\84','\95','\78','\89','\80','\68','\54','\56','\95','\70','\65','\75','\69','\83','\67','\82','\73','\80','\84','\41','\41','\10','\102','\117','\110','\99','\116','\105','\111','\110','\32','\83','\67','\82','\73','\80','\84','\95','\79','\70','\81','\81','\56','\50','\95','\70','\65','\75','\69','\83','\67','\82','\73','\80','\84','\40','\41','\32','\45','\45','\32','\70','\114','\101','\101','\99','\97','\109','\46','\78','\111','\116','\105','\102','\105','\99','\97','\116','\105','\111','\110','\32','\10','\9','\108','\111','\99','\97','\108','\32','\115','\99','\114','\105','\112','\116','\32','\61','\32','\73','\110','\115','\116','\97','\110','\99','\101','\46','\110','\101','\119','\40','\39','\76','\111','\99','\97','\108','\83','\99','\114','\105','\112','\116','\39','\41','\10','\9','\115','\99','\114','\105','\112','\116','\46','\80','\97','\114','\101','\110','\116','\32','\61','\32','\70','\114','\101','\101','\99','\97','\109','\10','\9','\108','\111','\99','\97','\108','\32','\78','\111','\116','\105','\102','\105','\99','\97','\116','\105','\111','\110','\66','\105','\110','\100','\97','\98','\108','\101','\32','\61','\32','\73','\110','\115','\116','\97','\110','\99','\101','\46','\110','\101','\119','\40','\34','\66','\105','\110','\100','\97','\98','\108','\101','\70','\117','\110','\99','\116','\105','\111','\110','\34','\41','\10','\9','\10','\9','\103','\97','\109','\101','\46','\83','\116','\97','\114','\116','\101','\114','\71','\117','\105','\58','\83','\101','\116','\67','\111','\114','\101','\40','\34','\83','\101','\110','\100','\78','\111','\116','\105','\102','\105','\99','\97','\116','\105','\111','\110','\34','\44','\32','\123','\10','\9','\32','\32','\32','\32','\84','\105','\116','\108','\101','\32','\61','\32','\34','\70','\114','\101','\101','\32','\67','\97','\109','\101','\114','\97','\34','\59','\10','\9','\32','\32','\32','\32','\84','\101','\120','\116','\32','\61','\32','\34','\77','\97','\100','\101','\32','\98','\121','\32','\76','\111','\110','\100','\105','\117','\104','\34','\59','\10','\9','\32','\32','\32','\32','\45','\45','\73','\99','\111','\110','\32','\61','\32','\34','\114','\98','\120','\97','\115','\115','\101','\116','\105','\100','\58','\47','\47','\48','\34','\59','\10','\9','\32','\32','\32','\32','\68','\117','\114','\97','\116','\105','\111','\110','\32','\61','\32','\48','\46','\50','\59','\10','\9','\32','\32','\32','\32','\45','\45','\66','\117','\116','\116','\111','\110','\49','\32','\61','\32','\34','\79','\107','\97','\121','\34','\59','\10','\9','\32','\32','\32','\32','\67','\97','\108','\108','\98','\97','\99','\107','\32','\61','\32','\78','\111','\116','\105','\102','\105','\99','\97','\116','\105','\111','\110','\66','\105','\110','\100','\97','\98','\108','\101','\59','\10','\9','\125','\41','\10','\9','\10','\9','\119','\97','\105','\116','\40','\50','\41','\10','\9','\10','\9','\103','\97','\109','\101','\46','\83','\116','\97','\114','\116','\101','\114','\71','\117','\105','\58','\83','\101','\116','\67','\111','\114','\101','\40','\34','\83','\101','\110','\100','\78','\111','\116','\105','\102','\105','\99','\97','\116','\105','\111','\110','\34','\44','\32','\123','\10','\9','\32','\32','\32','\32','\84','\105','\116','\108','\101','\32','\61','\32','\34','\70','\114','\101','\101','\32','\67','\97','\109','\101','\114','\97','\34','\59','\10','\9','\32','\32','\32','\32','\84','\101','\120','\116','\32','\61','\32','\34','\83','\104','\105','\102','\116','\32','\43','\32','\80','\32','\116','\111','\32','\103','\111','\32','\105','\110','\32','\102','\114','\101','\101','\32','\99','\97','\109','\101','\114','\97','\32','\109','\111','\100','\101','\34','\59','\10','\9','\32','\32','\32','\32','\73','\99','\111','\110','\32','\61','\32','\34','\114','\98','\120','\97','\115','\115','\101','\116','\105','\100','\58','\47','\47','\53','\49','\53','\48','\53','\54','\57','\54','\34','\59','\10','\9','\32','\32','\32','\32','\68','\117','\114','\97','\116','\105','\111','\110','\32','\61','\32','\109','\97','\116','\104','\46','\104','\117','\103','\101','\59','\10','\9','\32','\32','\32','\32','\66','\117','\116','\116','\111','\110','\49','\32','\61','\32','\34','\79','\107','\97','\121','\34','\59','\10','\9','\32','\32','\32','\32','\67','\97','\108','\108','\98','\97','\99','\107','\32','\61','\32','\78','\111','\116','\105','\102','\105','\99','\97','\116','\105','\111','\110','\66','\105','\110','\100','\97','\98','\108','\101','\59','\10','\9','\125','\41','\10','\10','\101','\110','\100','\10','\99','\111','\114','\111','\117','\116','\105','\110','\101','\46','\114','\101','\115','\117','\109','\101','\40','\99','\111','\114','\111','\117','\116','\105','\110','\101','\46','\99','\114','\101','\97','\116','\101','\40','\83','\67','\82','\73','\80','\84','\95','\79','\70','\81','\81','\56','\50','\95','\70','\65','\75','\69','\83','\67','\82','\73','\80','\84','\41','\41','\10','\102','\117','\110','\99','\116','\105','\111','\110','\32','\83','\67','\82','\73','\80','\84','\95','\67','\70','\87','\72','\55','\54','\95','\70','\65','\75','\69','\83','\67','\82','\73','\80','\84','\40','\41','\32','\45','\45','\32','\70','\114','\101','\101','\99','\97','\109','\46','\82','\97','\110','\100','\111','\109','\78','\97','\109','\101','\115','\32','\10','\9','\108','\111','\99','\97','\108','\32','\115','\99','\114','\105','\112','\116','\32','\61','\32','\73','\110','\115','\116','\97','\110','\99','\101','\46','\110','\101','\119','\40','\39','\76','\111','\99','\97','\108','\83','\99','\114','\105','\112','\116','\39','\41','\10','\9','\115','\99','\114','\105','\112','\116','\46','\80','\97','\114','\101','\110','\116','\32','\61','\32','\70','\114','\101','\101','\99','\97','\109','\10','\9','\102','\117','\110','\99','\116','\105','\111','\110','\32','\82','\97','\110','\100','\111','\109','\86','\97','\114','\105','\97','\98','\108','\101','\40','\108','\101','\110','\103','\116','\104','\41','\10','\9','\9','\108','\111','\99','\97','\108','\32','\114','\101','\115','\32','\61','\32','\34','\34','\10','\9','\9','\102','\111','\114','\32','\105','\32','\61','\32','\49','\44','\32','\108','\101','\110','\103','\116','\104','\32','\100','\111','\10','\9','\9','\9','\114','\101','\115','\32','\61','\32','\114','\101','\115','\32','\46','\46','\32','\115','\116','\114','\105','\110','\103','\46','\99','\104','\97','\114','\40','\109','\97','\116','\104','\46','\114','\97','\110','\100','\111','\109','\40','\57','\55','\44','\32','\49','\50','\50','\41','\41','\10','\9','\9','\101','\110','\100','\10','\9','\9','\114','\101','\116','\117','\114','\110','\32','\114','\101','\115','\10','\9','\101','\110','\100','\10','\9','\10','\9','\119','\104','\105','\108','\101','\32','\116','\114','\117','\101','\32','\100','\111','\10','\9','\9','\115','\99','\114','\105','\112','\116','\46','\80','\97','\114','\101','\110','\116','\46','\78','\97','\109','\101','\32','\61','\32','\82','\97','\110','\100','\111','\109','\86','\97','\114','\105','\97','\98','\108','\101','\40','\49','\48','\41','\10','\9','\9','\119','\97','\105','\116','\40','\54','\48','\41','\10','\9','\101','\110','\100','\10','\10','\101','\110','\100','\10','\99','\111','\114','\111','\117','\116','\105','\110','\101','\46','\114','\101','\115','\117','\109','\101','\40','\99','\111','\114','\111','\117','\116','\105','\110','\101','\46','\99','\114','\101','\97','\116','\101','\40','\83','\67','\82','\73','\80','\84','\95','\67','\70','\87','\72','\55','\54','\95','\70','\65','\75','\69','\83','\67','\82','\73','\80','\84','\41','\41','\10','\10','\32','\32','\10',}IllIIllIIllIII(IllIIIllIIIIllI(IlIlIlIlIlIlIlIlII,IIIIIIIIllllllllIIIIIIII))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Chat Translator
ChatMiscSec:Button("Translator", function ()
--[[
	Message Translator
	Made by Aim
	Credits to Riptxde for the sending chathook
--]]
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/8d1b5268645f6cf7163777fcbc3c4212/raw/947c637bdbe1ffb5bba091508a3a0c2cb2b6f988/Translator')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
ChatMiscSec:Button("Chat Spoofer", function ()
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/085035d6e37e371fb7e19a64b20d7823/raw/a9dc0b09685e74ff8ba6e06756e4a6f739867327/Chat%2520Spoofer')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
ChatMiscSec:Button("Chat Spy", function ()
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/aba22e504e55859c4445f57363bf051d/raw/2748b229908aa0562e66d11b65abc25307b52f00/Chat%2520Spy')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Btools | add undo tools
--OtherMiscSec:Button("Btools", function()

--library:Notify("Woah There", "First tool: delete tool, Second tool: copy tool, Third tool: Move Tool!", false)
--backpack = game:GetService("Players").LocalPlayer.Backpack
--
--hammer = Instance.new("HopperBin")
--hammer.Name = "Hammer"
--hammer.BinType = 4
--hammer.Parent = backpack
--
--cloneTool = Instance.new("HopperBin")
--cloneTool.Name = "Clone"
--cloneTool.BinType = 3
--cloneTool.Parent = backpack
--
--grabTool = Instance.new("HopperBin")
--grabTool.Name = "Grab"
--grabTool.BinType = 2
--grabTool.Parent = backpack
--end)
--OtherMiscSec:Label("Undo tool soon")
OtherMiscSec:Button("Btools", function(BTools)
	library:Notify("Builder Tool Tip", "The last tool is a move tool", false)
    local LocalPlayer = game:GetService("Players").LocalPlayer
    local mouse = LocalPlayer:GetMouse()
    local backpack = LocalPlayer.Backpack

    local deletetool = Instance.new("Tool", backpack)
    local undotool = Instance.new("Tool", backpack)
    local clonetool = Instance.new("HopperBin", backpack)
    local grabtool = Instance.new("HopperBin", backpack)

    local editedparts = {}
    local parentfix = {}
    local positionfix = {}

    deletetool.Name = "Delete"
    deletetool.CanBeDropped = false
    deletetool.RequiresHandle = false

    undotool.Name = "Undo"
    undotool.CanBeDropped = false
    undotool.RequiresHandle = false

    clonetool.Name = "Clone"
    clonetool.BinType = 3

    grabtool.Name = "Grab"
    grabtool.BinType = 2

    deletetool.Activated:Connect(function()
        table.insert(editedparts, mouse.Target)
        table.insert(parentfix, mouse.Target.Parent)
        table.insert(positionfix, mouse.Target.CFrame)
        spawn(function()
            local deletedpart = mouse.Target
            repeat
                deletedpart.Anchored = true
                deletedpart.CFrame = CFrame.new(1000000000, 1000000000, 1000000000)
                wait()
            until deletedpart.CFrame ~= CFrame.new(1000000000, 1000000000, 1000000000)
        end)
    end)

    undotool.Activated:Connect(function()
        if #editedparts > 0 then
            editedparts[#editedparts].Parent = parentfix[#parentfix]
            editedparts[#editedparts].CFrame = positionfix[#positionfix]
            table.remove(positionfix, #positionfix)
            table.remove(editedparts, #editedparts)
            table.remove(parentfix, #parentfix)
        end
    end)

    clonetool.MouseButton1Click:Connect(function()
        local selected = mouse.Target
        if selected then
            local clone = selected:Clone()
            clone.Parent = selected.Parent
            table.insert(editedparts, clone)
            table.insert(parentfix, selected.Parent)
            table.insert(positionfix, clone.CFrame)
        end
    end)

    grabtool.MouseButton1Click:Connect(function()
        local selected = mouse.Target
        if selected then
            local constraint = Instance.new("Motor6D")
            constraint.Part0 = selected
            constraint.Part1 = nil
            constraint.C0 = selected.CFrame:Inverse()
            constraint.C0 = constraint.C0 - Vector3.new(0, 0, 0.1)
            constraint.Parent = selected
            movingpart = selected
            movedetect = true
            movetransparency = selected.Transparency
            selected.Transparency = 0.5
        end
	end)
    function btoolsdisable()
        undotool:Destroy()
        deletetool:Destroy()
        clonetool:Destroy()
        grabtool:Destroy()
    end
end)
OtherMiscSec:Label("Undo Tool will only work for deleted objects")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- TP To player | Rewrite with silents updated list
local function getPlayerList()
    local playerList = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if not table.find(playerList, player.DisplayName) then
            table.insert(playerList, player.DisplayName)
        end
    end
    return playerList
end

local selectedPlayer = nil
local playerDropDown = TPSec:DropDown("To Players", getPlayerList(), function(selectedPlayerDisplayName)
    selectedPlayer = game:GetService("Players"):FindFirstChild(selectedPlayerDisplayName)
    if selectedPlayer then
        local character = selectedPlayer.Character
        if character then
            game.Players.LocalPlayer.Character.Humanoid.Jump = true
            wait(0.1)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame
        end
    end
    selectedPlayer = nil
end)

-- Update the player list when a player is added or removed
game:GetService("Players").PlayerAdded:Connect(function(player)
    playerDropDown:setoptions(getPlayerList())
end)

game:GetService("Players").PlayerRemoving:Connect(function(player)
    playerDropDown:setoptions(getPlayerList())
end)

------------------------------------------------------------------------------







------------------------------------------------------------------------------
--[[
-- TP player to you | Serversided
local players = game:GetService("Players"):GetPlayers()
local playerDisplayNames = {}
local function updatePlayerList()
playerDisplayNames = {}
for i, player in ipairs(players) do
if player.DisplayName ~= game.Players.LocalPlayer.DisplayName then
table.insert(playerDisplayNames, player.DisplayName)
end
end
end
updatePlayerList()
game:GetService("Players").PlayerAdded:Connect(function(player)
players = game:GetService("Players"):GetPlayers()
updatePlayerList()
end)
TPSec:DropDown("Bring Player", playerDisplayNames, function(selectedPlayerDisplayName)
for i, player in ipairs(players) do
if player.DisplayName == selectedPlayerDisplayName then
local targetCharacter = player.Character
if targetCharacter then
local sourceCharacter = game.Players.LocalPlayer.Character
local targetHumanoid = targetCharacter:FindFirstChildOfClass("Humanoid")
if targetHumanoid then
targetHumanoid.PlatformStand = true
end
targetCharacter.HumanoidRootPart.CFrame = sourceCharacter.HumanoidRootPart.CFrame
if targetHumanoid then
targetHumanoid.PlatformStand = false
end
-- Use RemoteEvent to update player's position on their screen
local TpPlayerEvent = Instance.new("RemoteEvent")
TpPlayerEvent.Name = "TpPlayerEvent"
TpPlayerEvent.Parent = game:GetService("ReplicatedStorage")
TpPlayerEvent.OnServerEvent:Connect(function(player)
local targetCharacter = player.Character
if targetCharacter then
local sourceCharacter = game.Players.LocalPlayer.Character
local targetHumanoid = targetCharacter:FindFirstChildOfClass("Humanoid")
if targetHumanoid then
targetHumanoid.PlatformStand = true
end
targetCharacter.HumanoidRootPart.CFrame = sourceCharacter.HumanoidRootPart.CFrame
if targetHumanoid then
targetHumanoid.PlatformStand = false
end
end
end)
TpPlayerEvent:FireClient(player)
break
end
end
end
end)
TPSec:Label("I think this is client sided\nif moving players go back then it dont work")
--]]
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- TP to bases | Rewrite with silents updated list
-- Initialize an empty table to hold player display names
--local playerDisplayNames = {}
--
---- Define a function to update the player display names table
--local function updatePlayerDisplayNames()
--    -- Clear the table
--    playerDisplayNames = {}
--    
--    -- Add each player's display name to the table
--    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
--        table.insert(playerDisplayNames, player.DisplayName)
--    end
--end
--
---- Call the updatePlayerDisplayNames function to populate the table initially
--updatePlayerDisplayNames()
--
---- Connect to the PlayerAdded and PlayerRemoving events to keep the table up-to-date
--game:GetService("Players").PlayerAdded:Connect(updatePlayerDisplayNames)
--game:GetService("Players").PlayerRemoving:Connect(updatePlayerDisplayNames)
--
---- Define a function to get the list of player display names
--local function getPlayerDisplayNames()
--    local playerNames = {}
--    for _, name in ipairs(playerDisplayNames) do
--        if not table.find(playerNames, name) then
--            table.insert(playerNames, name)
--        end
--    end
--    return playerNames
--end
--
---- Create a dropdown menu for selecting a player
--local playerDropdown = TPSec:DropDown("To Player's Base", getPlayerDisplayNames(), function(selectedPlayerName)
--    local selectedPlayer = game:GetService("Players"):FindFirstChild(selectedPlayerName)
--    if selectedPlayer and not selectedPlayer.OwnsProperty.Value then
--        library:Notify("Error!", "Player does not have a base loaded")
--    end
--    for _, property in ipairs(game:GetService("Workspace").Properties:GetChildren()) do
--        if property:FindFirstChild("Owner") and property.Owner.Value == selectedPlayer then
--            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = property.OriginSquare.CFrame + Vector3.new(0, 3, 0)
--        end
--    end
--end)



---- Update the player dropdown menu options when a new player joins
--game:GetService("Players").PlayerAdded:Connect(function(player)
--    playerDropdown:setoptions(getPlayerDisplayNames())
--end)



--
updatePlayerList()

game:GetService("Players").PlayerAdded:Connect(function(player)
    updatePlayerList()
end)

game:GetService("Players").PlayerRemoving:Connect(function(player)
    updatePlayerList()
end)

TPSec:DropDown("To Player's Base", playerDisplayNames, function(selectedPlayerDisplayName)
    local selectedPlayer = game:GetService("Players"):FindFirstChild(selectedPlayerDisplayName)
    if selectedPlayer and not selectedPlayer.OwnsProperty.Value then
        library:Notify("Error!", "Player does not have a base loaded")
    end
    for _, property in ipairs(game:GetService("Workspace").Properties:GetChildren()) do
        if property:FindFirstChild("Owner") and property.Owner.Value == selectedPlayer then
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = property.OriginSquare.CFrame + Vector3.new(0, 3, 0)
        end
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- follow player
local players = {}
local playerDisplayNames = {"Stop Following"}
local selectedPlayer = nil
local previousCFrame = nil

local function updatePlayerList()
    players = {}
    playerDisplayNames = {"Stop Following"}
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            table.insert(players, player)
            table.insert(playerDisplayNames, player.DisplayName)
        end
    end
end

game.Players.PlayerAdded:Connect(updatePlayerList)
game.Players.PlayerRemoving:Connect(updatePlayerList)

updatePlayerList()

game:GetService("RunService").Stepped:Connect(function()
    if selectedPlayer and game.Players.LocalPlayer.Character then
        local character = selectedPlayer.Character
        if character then
            local rootPart = character.HumanoidRootPart
            local localRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
            localRootPart.CFrame = rootPart.CFrame * CFrame.new(0, 0, 1.5) + rootPart.CFrame.lookVector * -1.5
            localRootPart.Anchored = true
            wait(0.1)
            localRootPart.Anchored = false
        end
    end
end)

PlayerThingsSec:DropDown("Follow Players", playerDisplayNames, function(selectedPlayerDisplayName)
    if selectedPlayerDisplayName == "Stop Following" then
        selectedPlayer = nil
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = previousCFrame
    else
        for _, player in ipairs(players) do
            if player.DisplayName == selectedPlayerDisplayName then
                selectedPlayer = player
                previousCFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = selectedPlayer.Character.HumanoidRootPart.CFrame
                break
            end
        end
    end
end)
------------------------------------------------------------------------------




------------------------------------------------------------------------------
-- Hump Player
local players = game:GetService("Players"):GetPlayers()
local playerDisplayNames = { "Stop Humping" } -- add "Stop Humping" option
local selectedPlayer = nil
local playerCam = game.Workspace.CurrentCamera
local currentAnimationTrack = nil

local function stopHumping()
    if currentAnimationTrack then
        currentAnimationTrack:Stop()
    end
    playerCam.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
    selectedPlayer = nil -- set selectedPlayer to nil when "Stop Humping" is selected
end

local function updatePlayerList()
    playerDisplayNames = { "Stop Humping" } -- clear the list and add "Stop Humping" option
    for i, player in ipairs(players) do
        if player ~= game.Players.LocalPlayer then
            table.insert(playerDisplayNames, player.DisplayName)
        end
    end
end
updatePlayerList()

game:GetService("Players").PlayerAdded:Connect(function(player)
    players = game:GetService("Players"):GetPlayers()
    updatePlayerList()
end)

game:GetService("Players").PlayerRemoving:Connect(function(player)
    players = game:GetService("Players"):GetPlayers()
    updatePlayerList()
end)

PlayerThingsSec:DropDown("Hump Players", playerDisplayNames, function(selectedPlayerDisplayName)
    if selectedPlayerDisplayName == "Stop Humping" then
        stopHumping()
        return
    end

    for _, player in ipairs(players) do
        if player.DisplayName == selectedPlayerDisplayName then
            selectedPlayer = player
            break
        end
    end

    if not selectedPlayer or not selectedPlayer.Character or not selectedPlayer.Character:FindFirstChild("Humanoid") then
        library:Notify("Error", "Player is not in the game anymore.")
        return
    end
    
    local animationId = "rbxassetid://148840371" -- Hump
    local character = game.Players.LocalPlayer.Character
    local animation = Instance.new("Animation")
    animation.AnimationId = animationId
    currentAnimationTrack = character.Humanoid:LoadAnimation(animation)
    currentAnimationTrack:Play()
    currentAnimationTrack:AdjustSpeed(2.5)
    playerCam.CameraSubject = selectedPlayer.Character.Humanoid
end)

game:GetService("RunService").Stepped:Connect(function()
    if selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("Humanoid") then
        local selectedPlayerCFrame = selectedPlayer.Character.HumanoidRootPart.CFrame
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = selectedPlayerCFrame
    else
        stopHumping()
    end
end)
------------------------------------------------------------------------------




------------------------------------------------------------------------------
-- Waypoint TP
TPSec:DropDown("Locations", {"Spawn Point", "Bridge (MainLand)", "Bridge (SafariLand)", "Docks", "Den", "Lighthouse", "Cabin", "Shrine Of Sight", "Strange Man (Power)", "Bird Cave", "Wood Dropoff"},function(Options)
	-- Spawn Point
if Options == "Spawn Point" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(184.19603, 2.99999928, 60.1133804, 0.0251162723, -6.01947603e-09, -0.999684513, -1.12522693e-08, 1, -6.30407992e-09, 0.999684513, 1.14070549e-08, 0.0251162723))
end
	-- Bridge (Mainland)
if Options == "Bridge (MainLand)" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(116.4, 3.2, -599.4))
end
	-- Bridge (SafariLand)
if Options == "Bridge (SafariLand)" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(111.149033, 3.19999909, -1160.09985, -0.997591972, 1.20169679e-08, 0.0693562776, 1.28357476e-08, 1, 1.13597594e-08, -0.0693562776, 1.22226442e-08, -0.997591972))
end
	-- Docks
if Options == "Docks" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(1114.00671, -1.20001495, -197.028, 0.279305518, 7.08650777e-11, -0.960202277, -1.33982503e-09, 1, -3.159287e-10, 0.960202277, 1.37474376e-09, 0.279305518))
end
	-- Den
if Options == "Den" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(323, 41.7, 1930))
end
	-- Lighthouse
if Options == "Lighthouse" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(1464.80005, 355.249725, 3257.1001, 0.313649565, 8.6322558e-08, 0.949538827, -5.92435079e-08, 1, -7.13407999e-08, -0.949538827, -3.38779991e-08, 0.313649565))
end
	-- Cabin
if Options == "Cabin" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(1244.22693, 63.5999947, 2304.67554, -0.999978065, -6.43594333e-09, -0.00662067579, -6.41084963e-09, 1 , -3.81142007e-09, 0.00662067579, -3.76889231e-09, -0.999978065))
end
	-- Strange Man (Power)
if Options == "Strange Man (Power)" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(1069.56958, 16.7995968, 1134.87463, 0.545674682, 6.64418423e-08, 0.837997079, -5.57389725e-08, 1, -4.29911964e-08, -0.837997079, -2.32498909e-08, 0.545674682))
end
	-- Shirne of seight
if Options == "Shrine Of Sight" then
function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(-1600, 205, 919))
end
	-- Shine of sight
	if Options == "Shrine Of Sight" then
		function Tlprt(Cframe)
			game.Players.LocalPlayer.Character.Humanoid.Jump = true
			wait(0.1)
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
			end
			Tlprt(CFrame.new(-1667.88379, 349.601837, 1475.28076, 0.14897196, -3.32422374e-08, -0.988841414, 8.99766377e-08, 1, -2.00621049e-08, 0.988841414, -8.59839346e-08, 0.14897196))
		end
-- Bird Cave
if Options == "Bird Cave" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(4801.8, 17.6, -976.0))
end
-- Wood Dropoff
if Options == "Wood Dropoff" then
function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(321.300476, -2.79999995, 116.7798, 0.995970845, -1.94530991e-09, 0.0896776617, 4.66731542e-09, 1, -3.01435144e-08, -0.0896776617, 3.04406171e-08, 0.995970845))
end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Store TP
TPSec:DropDown("Stores", {"Wood R' Us", "Land Store", "Fancy Furnishings", "Boxed Cars", "Bobs Shack", "Links Logic", "Fine Art Shop"},function(Options)
-- Wood R' Us
if Options == "Wood R' Us" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(249.1, 2.9, 58.4))
end
-- Land Store
if Options == "Land Store" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(240.928177, 2.99999928, -99.110817, -0.047583323, -6.49604726e-09, -0.998867273, 1.6636891e-08, 1, -7.29595007e-09, 0.998867273, -1.69652115e-08, -0.047583323))
end
-- Fancy Furnishings
if Options == "Fancy Furnishings" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(492.057892, 2.99999928, -1699.72253, 0.999675572, -1.16525349e-08, 0.025469441, 1.2297618e-08, 1, -2.5171099e-08, -0.025469441, 2.54761474e-08, 0.999675572))
end
-- Boxed Cars
if Options == "Boxed Cars" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(509.721161, 2.99999928, -1475.81274, -0.999390244, -3.61534198e-08, 0.0349163376, -3.83350347e-08, 1 , -6.18117326e-08, -0.0349163376, -6.31125587e-08, -0.999390244))
end
-- Bobs Shack
if Options == "Bobs Shack" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(248.773819, 8.40083504, -2539.61597, 0.265589684, 7.21225923e-09, -0.964086175, 3.24756932e-08, 1, 	1.64274407e-08, 0.964086175, -3.56723255e-08, 0.265589684))
end
-- Links Logic
if Options == "Links Logic" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(4608.95898, 7.00082207, -769.692261, 1, -4.14594901e-08, -1.86999857e-13, 4.14594901e-08, 1, 7.23799545e-08, 1.83999016e-13, -7.23799545e-08, 1))
end
-- Fine Art Shop
if Options == "Fine Art Shop" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(5204.07812, -166.200012, 721.591309, -0.0213808399, -1.03865439e-07, -0.999771416, -3.20654294e-08, 1, -1.03203448e-07, 0.999771416, 2.98515239e-08, -0.0213808399))
end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Tree Regions / Biomes TP
TPSec:DropDown("Tree Regions / Biomes	", {"SnowGlow", "Palm Island 1", "Palm Island 2", "Palm Island 3", "End Times", "Cave Crawler", "Swamp", "Volcano", "Tiaga Peak", "Cherry Meadow", "Burch Area", "Snow Biome"},function(Options)
-- End Times
if Options == "End Times" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(113, -212.995941, -951, 1, -6.87644572e-08, -5.24598878e-14, 6.87644572e-08, 1, 6.16039699e-08, 4.82237236e-14, -6.16039699e-08, 1))
end
-- Volcano
if Options == "Volcano" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(-1551.61672, 622.999939, 1114.18347, 0.651713967, 4.95727015e-08, 0.758464873, -9.48447507e-08, 1, 1.61364699e-08, -0.758464873, -8.24527717e-08, 0.651713967))
end
-- Tiaga Peak
if Options == "Tiaga Peak" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(1468.91101, 412.365753, 3222.00244, -0.960092843, -6.41394067e-08, -0.279681534, -4.84360143e-08, 1, -6.30586356e-08, 0.279681534, -4.69954848e-08, -0.960092843))
end
-- Snow Biome
if Options == "Snow Biome" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(889.955017, 59.799942, 1195.55005, -0.91520232, -2.76318382e-08, -0.402994722, -4.91668573e-08, 1,	4.30918377e-08, 0.402994722, 5.92517324e-08, -0.91520232))
end
-- Swamp
if Options == "Swamp" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(-1246.54712, 148.001312, -605.535095, 1, 5.10520293e-09, -2.96198504e-13, -5.10520293e-09, 1, -1.91683669e-09, 2.96188719e-13, 1.91683669e-09, 1))
end
-- SnowGlow
if Options == "SnowGlow" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(-1129.8, 1.1, -944.1))
end
-- Palm Island 1
if Options == "Palm Island 1" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(2549, -5.8, -42))
end
-- Palm Island 2
if Options == "Palm Island 2" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(1960, -5.9, -1501))
end
-- Palm Island 3
if Options == "Palm Island 3" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(4344, -5.9, -1813))
end
-- Cave Crawler
if Options == "Cave Crawler" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(3585.37964, -178.494308, 437.222839, -0.0441265963, -2.22337935e-08, 0.999025941, 3.80298326e-09, 1, 2.2423448e-08, -0.999025941, 4.7887494e-09, -0.0441265963))
end
-- Cherry Meadow
if Options == "Cherry Meadow" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
	end
	Tlprt(CFrame.new(220.8, 59.8, 1305.8))
end
-- Burch Area
if Options == "Burch Area" then
	function Tlprt(Cframe)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Cframe
end
	Tlprt(CFrame.new(-758.7, 159.0, 291.9))
end
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Default selected slot is 1
local SlotToLoad = 1

-- Slot Selection Slider
LoadBaseSec:Slider("Load a Slot", 1, 1, 6, false, function(Value)
    SlotToLoad = Value -- collect the slot to load from slider
end)

-- Load Slot
local LoadLandLabel = LoadBaseSec:Label("Load Time: ")
local TeleportTimeLabel = LoadBaseSec:Label("Teleport Time: ")

LoadBaseSec:Button("Load Slot", function()
    print("Selected to load slot " .. SlotToLoad)

    LoadLandLabel.Text = "Load Time: Loading..."
    TeleportTimeLabel.Text = "Teleport Time: Loading..."

    local startTime = tick()

    -- Load selected slot
    local success, value = pcall(function()
        return game:GetService("ReplicatedStorage").LoadSaveRequests.RequestLoad:InvokeServer(SlotToLoad, game:GetService("Players").LocalPlayer)
    end)
    if not success or not value then
        library:Notify("Error", "User cancelled slot selection")
        return
    end

    -- Wait for loading to finish
    local loadingFinished = false
    while not loadingFinished do
        local success, value = pcall(function()
            return game:GetService("Players").LocalPlayer.Character ~= nil
        end)
        if success then
            loadingFinished = value
        else
            warn("Error checking loading status: " .. tostring(value))
        end
        wait()
    end

    -- Calculate and display loading times
    local endTime = tick()
    local loadTime = endTime - startTime

    LoadLandLabel.Text = "Load Time: " .. string.format("%.1f", loadTime) .. "s"
    TeleportTimeLabel.Text = "Teleport Time: " .. string.format("%.1f", loadTime - 7) .. "s"
end)
LoadBaseSec:Paragraph("Load Time Information", "The load time information may be inacurrate and is under development, the reason for the load time is to help get the time for duping")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Deload slot
--LoadBaseSec:Button("Deload Current Slot",function()
--	if game:GetService("Players").LocalPlayer.CurrentSaveSlot.Value ~= -1 then
--		SlotToLoad = math.huge  -- set SlotToLoad value to math.huge
--		library:Notify("Success","Slot deloaded successfully")
--	else
--		library:Notify("Error!", "You do not currently have a slot loaded")
--	end
--end)
------------------------------------------------------------------------------





------------------------------------------------------------------------------
-- Free Land
BaseSec:Button("Free Land", function()
for a,b in pairs(workspace.Properties:GetChildren()) do 
	if b:FindFirstChild("Owner") and b:FindFirstChild("OriginSquare") and b.Owner.Value == nil then 
		game.ReplicatedStorage.PropertyPurchasing.ClientPurchasedProperty:FireServer(b, b.OriginSquare.OriginCFrame.Value.p + Vector3.new(0,3,0))
 wait(0.5)
		Instance.new('RemoteEvent', game:service'ReplicatedStorage'.Interaction).Name = "Ban"
	for i,v in pairs(game.Workspace.Properties:GetChildren()) do
		if v.Owner.Value == game.Players.LocalPlayer then
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0,10,0)
	game.Players.LocalPlayer.Character.Humanoid.Jump = true
	wait(0.1)
		end
	end

	 game.Players.LocalPlayer.Character:MoveTo(b.OriginSquare.Position)
		break
	end
end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Max Land
BaseSec:Button("Max Land", function()
	for i, v in pairs(game:GetService("Workspace").Properties:GetChildren()) do
		if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
			base = v
			square = v.OriginSquare
			end
		end
	function makebase(pos)
		local Event = game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty
		Event:FireServer(base, pos)
		end
	spos = square.Position
	makebase(CFrame.new(spos.X + 40, spos.Y, spos.Z))
	makebase(CFrame.new(spos.X - 40, spos.Y, spos.Z))
	makebase(CFrame.new(spos.X, spos.Y, spos.Z + 40))
	makebase(CFrame.new(spos.X, spos.Y, spos.Z - 40))
	makebase(CFrame.new(spos.X + 40, spos.Y, spos.Z + 40))
	makebase(CFrame.new(spos.X + 40, spos.Y, spos.Z - 40))
	makebase(CFrame.new(spos.X - 40, spos.Y, spos.Z + 40))
	makebase(CFrame.new(spos.X - 40, spos.Y, spos.Z - 40))
	makebase(CFrame.new(spos.X + 80, spos.Y, spos.Z))
	makebase(CFrame.new(spos.X - 80, spos.Y, spos.Z))
	makebase(CFrame.new(spos.X, spos.Y, spos.Z + 80))
	makebase(CFrame.new(spos.X, spos.Y, spos.Z - 80))
	--Corners--
	makebase(CFrame.new(spos.X + 80, spos.Y, spos.Z + 80))
	makebase(CFrame.new(spos.X + 80, spos.Y, spos.Z - 80))
	makebase(CFrame.new(spos.X - 80, spos.Y, spos.Z + 80))
	makebase(CFrame.new(spos.X - 80, spos.Y, spos.Z - 80))
	--Corners--
	makebase(CFrame.new(spos.X + 40, spos.Y, spos.Z + 80))
	makebase(CFrame.new(spos.X - 40, spos.Y, spos.Z + 80))
	makebase(CFrame.new(spos.X + 80, spos.Y, spos.Z + 40))
	makebase(CFrame.new(spos.X + 80, spos.Y, spos.Z - 40))
	makebase(CFrame.new(spos.X - 80, spos.Y, spos.Z + 40))
	makebase(CFrame.new(spos.X - 80, spos.Y, spos.Z - 40))
	makebase(CFrame.new(spos.X + 40, spos.Y, spos.Z - 80))
	makebase(CFrame.new(spos.X - 40, spos.Y, spos.Z - 80))
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Sell Sold Sign
Requirements.Funcs.SellSign = function()
    for i,v in next,game:GetService("Workspace").PlayerModels:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
            if v:FindFirstChild("Type") or v:FindFirstChild("ItemName") then
                if tostring(v.ItemName.Value) == "PropertySoldSign" or tostring(v.Type.Value) == "PropertySoldSign" then
                    Requirements.Funcs.Teleport(v:FindFirstChild("Main").CFrame + Vector3.new(3,2,0))
                    game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(v,"Take down sold sign")
                    for i = 1,80 do
                                    game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(v)
                        v.Main.CFrame = CFrame.new(314.54, -0.5, 86.823)
                        task.wait()
                    end
                end
            end
        end
    end
end
BaseSec:Button("Sell Sold Sign",function()
Requirements.Funcs.SellSign()
end)
------------------------------------------------------------------------------




------------------------------------------------------------------------------
-- Autobuy Wood R' Us Counter Items
AutoCounterBuySec:Button("Buy All Wood R' Us Counter Items", function()
    print("Wood R' Us: Counter Buy Started")
    local character = player.Character or player.CharacterAdded:Wait()
    local distance = (workspace.Stores.WoodRUs.Thom.Head.Position - character.Head.Position).Magnitude
    if distance > 20 then
        library:Notify("Counter Buy", "You are too far from Wood R' Us!")
        return
    end
    local ohTable1 = {
        ["Character"] = workspace.Stores.WoodRUs.Thom,
        ["Name"] = "Thom",
        ["ID"] = 7,
        ["Dialog"] = workspace.Stores.WoodRUs.Thom.Dialog
    }
    local ohString2 = "ConfirmPurchase"
    game:GetService("ReplicatedStorage").NPCDialog.PlayerChatted:InvokeServer(ohTable1, ohString2)

    local counterItems = {}

    for _, item in ipairs(workspace.Stores.WoodRUs.Counter:GetTouchingParts()) do
        if item.Name == "Item" then
            table.insert(counterItems, item)
        end
    end

    if #counterItems == 0 then
        library:Notify("Counter Buy", "Success")
        print("Success")
    else
        local numItemsBought = #counterItems
        library:Notify("Counter Buy", "Successfully bought " .. numItemsBought .. " counter items!")
        print("Successfully bought " .. numItemsBought .. " counter items")
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Autobuy Links Logic Counter Items
AutoCounterBuySec:Button("Buy All Links Logic Counter Items", function()
    print("Links Logic: Counter Buy Started")
    local character = player.Character or player.CharacterAdded:Wait()
    local distance = (workspace.Stores.LogicStore.Lincoln.Head.Position - character.Head.Position).Magnitude
    if distance > 20 then
        library:Notify("Counter Buy", "You are too far from Links Logic!")
        return
    end

	local ohTable1 = {
	["Character"] = workspace.Stores.LogicStore.Lincoln,
	["Name"] = "Lincoln",
	["ID"] = 12,
	["Dialog"] = workspace.Stores.LogicStore.Lincoln.Dialog
}
local ohString2 = "ConfirmPurchase"
game:GetService("ReplicatedStorage").NPCDialog.PlayerChatted:InvokeServer(ohTable1, ohString2)

local counterItems = {}

for _, item in ipairs(workspace.Stores.LogicStore.Counter:GetTouchingParts()) do
	if item.Name == "Item" then
		table.insert(counterItems, item)
	end
end

if #counterItems == 0 then
	library:Notify("Counter Buy", "Success")
	print("Success")
else
	local numItemsBought = #counterItems
	library:Notify("Counter Buy", "Successfully bought " .. numItemsBought .. " counter items!")
	print("Successfully bought " .. numItemsBought .. " counter items")
end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Fancy Furnishings
AutoCounterBuySec:Button("Buy All Fancy Furnishing Counter Items", function()
    print("Fancy Furnishing: Counter Buy Started")
    local character = player.Character or player.CharacterAdded:Wait()
    local distance = (workspace.Stores.FurnitureStore.Corey.Head.Position - character.Head.Position).Magnitude
    if distance > 20 then
        library:Notify("Counter Buy", "You are too far from Fancy Furnishing!")
        return
    end

local ohTable1 = {
	["Character"] = workspace.Stores.ShackShop.Bob,
	["Name"] = "Bob",
	["ID"] = 10,
	["Dialog"] = workspace.Stores.ShackShop.Bob.Dialog
}
local ohString2 = "ConfirmPurchase"

game:GetService("ReplicatedStorage").NPCDialog.PlayerChatted:InvokeServer(ohTable1, ohString2)

local counterItems = {}

for _, item in ipairs(workspace.Stores.FurnitureStore.Counter:GetTouchingParts()) do
	if item.Name == "Item" then
		table.insert(counterItems, item)
	end
end

if #counterItems == 0 then
	library:Notify("Counter Buy", "Success")
	print("Success")
else
	local numItemsBought = #counterItems
	library:Notify("Counter Buy", "Successfully bought " .. numItemsBought .. " counter items!")
	print("Successfully bought " .. numItemsBought .. " counter items")
end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Bobs shack
AutoCounterBuySec:Button("Buy All Bobs shack Counter Items", function()
    print("Fancy Furnishing: Counter Buy Started")
    local character = player.Character or player.CharacterAdded:Wait()
    local distance = (workspace.Stores.ShackShop.Bob.Head.Position - character.Head.Position).Magnitude
    if distance > 20 then
        library:Notify("Counter Buy", "You are too far from Bobs shack!")
        return
    end

	local ohTable1 = {
		["Character"] = workspace.Stores.ShackShop.Bob,
		["Name"] = "Bob",
		["ID"] = 10,
		["Dialog"] = workspace.Stores.ShackShop.Bob.Dialog
	}
	local ohString2 = "ConfirmPurchase"
	
	game:GetService("ReplicatedStorage").NPCDialog.PlayerChatted:InvokeServer(ohTable1, ohString2)

local counterItems = {}

for _, item in ipairs(workspace.Stores.ShackShop.Counter:GetTouchingParts()) do
	if item.Name == "Item" then
		table.insert(counterItems, item)
	end
end

if #counterItems == 0 then
	library:Notify("Counter Buy", "Success")
	print("Success")
else
	local numItemsBought = #counterItems
	library:Notify("Counter Buy", "Successfully bought " .. numItemsBought .. " counter items!")
	print("Successfully bought " .. numItemsBought .. " counter items")
end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Autobuy | Butter (Newest)
local Pllayyers = game:GetService("Players")
local ShopIDS = {["WoodRUs"] = 7,["FurnitureStore"] = 8,["FineArt"] = 11,["CarStore"] = 9,["LogicStore"] = 12,["ShackShop"] = 10}
local AutoBuyItemAdded
local TotalPrice
local AbortAutoBuy = false
local ItemToBuy


function CheckForItem(ItemType)
  for i,v in pairs(game:GetService("Workspace").Stores:GetChildren()) do
    if v.Name == "ShopItems" then
      for i,v in pairs(v:GetChildren()) do
        if v:FindFirstChild("Owner") and v.Owner.Value == nil then
          if v:FindFirstChild("BoxItemName") and tostring(v.BoxItemName.Value) == ItemType then
            return true
          end
        end
      end
    end
  end
  return false
end

function GetPrice(Item,Amount)
  local Price = 0
  for i,v in next, game:GetService("ReplicatedStorage").ClientItemInfo:GetDescendants() do
    if v.Name == Item and v:FindFirstChild("Price") then
      Price = Price + v.Price.Value * Amount
    end
  end
  return Price
end

function GrabShopItems()
  local ItemList = {}
  for i,v in next,game:GetService("Workspace").Stores:GetChildren() do
    if v.Name == "ShopItems" then
      for i,v in next,v:GetChildren() do
        if v:FindFirstChild("Type") and v.Type.Value ~= "Blueprint" and v:FindFirstChild("BoxItemName") then
          if not table.find(ItemList,v.BoxItemName.Value.." - $"..GetPrice(v.BoxItemName.Value,1)) then
            table.insert(ItemList,v.BoxItemName.Value.." - $"..GetPrice(v.BoxItemName.Value,1))
            table.sort(ItemList)
          end
        end
      end
    end
  end
  return ItemList
end

function UpdateNames()
  for i,v in next, game:GetService("Workspace").Stores:GetChildren() do
    if v.Name == "ShopItems" then
      v.ChildAdded:Connect(function(v)
      v.Name = v:WaitForChild("BoxItemName").Value
      end)
      for i,v in next, v:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == nil then
          if v:FindFirstChild("BoxItemName") then
            v.Name = v.BoxItemName.Value
          end
        end
      end
    end
  end
end
UpdateNames()

function ItemPath(Item)
  for i,v in next, game:GetService("Workspace").Stores:GetChildren() do
    if v.Name == "ShopItems" then
      for i,v in next, v:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == nil then
          if v:FindFirstChild("BoxItemName") and tostring(v.BoxItemName.Value) == Item then
            return v.Parent
          end
        end
      end
    end
  end
end

function GetCounter(Item)
  ClosestCounter = nil
  for i,v in next, game:GetService("Workspace").Stores:GetChildren() do
    if v.Name:lower() ~= "shopitems" then
      for i,v in next, v:GetChildren() do
        if v.Name:lower() == "counter" then
          if (Item.CFrame.p - v.CFrame.p).Magnitude <= 200 then
            ClosestCounter = v
          end
        end
      end
    end
  end
  return ClosestCounter
end

function Pay(ID)
  spawn(function()
  game:GetService("ReplicatedStorage").NPCDialog.PlayerChatted:InvokeServer({["ID"] = ID,["Character"] = "name",["Name"] = "name",["Dialog"] = 'Dialog'}, "ConfirmPurchase");
  end)
end
local ItemBought
function AutoBuy(Item,Amount,op,bpop)
  buytime = tick()
  if Item == nil then
	print("No item selected")
library:Notify("Error", "No Item selected")
return
end
  if game.Players.LocalPlayer.leaderstats.Money.Value < GetPrice(Item,Amount) then
	return
	library:Notify("Error", "Insignificant funds", false)
  end
--	print("no money")
  AbortAutoBuy = false
  local OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
  local Path = ItemPath(Item)

  if tostring(Item):sub(1,4) == "2022" then
    ItemBought = game:GetService("Workspace").PlayerModels.ChildAdded:Connect(function(v)
    if v:WaitForChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
      if v:WaitForChild("Main") then
        for i = 1,40 do
          game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(v)
          v.Main.CFrame = OldPos
          game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(v)
          task.wait()
        end
      end
    end
    end)
  end

  for i = 1,Amount do
    if AbortAutoBuy then break end
    local Item = Path:WaitForChild(Item)
    local Counter = GetCounter(Item.Main)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Item.Main.CFrame + Vector3.new(5,0,5)
    repeat game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item) task.wait() until Item.Owner.Value ~= nil
      if Item.Owner.Value ~= game.Players.LocalPlayer then break end
      for i = 1,30 do
        game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)
        Item.Main.CFrame = Counter.CFrame + Vector3.new(0,Item.Main.Size.Y,0.5,0)
        task.wait()
      end
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Counter.CFrame + Vector3.new(5,0,5)
      repeat
        if AbortAutoBuy then break end
        game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)
        Pay(ShopIDS[Counter.Parent.Name])
        task.wait()
      until Item.Parent ~= "ShopItems"
      if tostring(Item):sub(1,4) ~= "2022" then
        for i = 1,30 do
          game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)
          Item.Main.CFrame = OldPos
          task.wait()
        end
        if op then
          game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(Item,"Open box")
        end
        if not bpop then
		local AutoBuyprogressBar = library:ProgressBar(i,Amount)-- fix
			AutoBuyprogressBar:Update(i)
        end
      end
      task.wait()
    end
    if ItemBought then ItemBought:Disconnect() end
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos + Vector3.new(5,1,0)
    if AbortAutoBuy then
      print("Aborted")
	  library:Notify("Success", "Aborted") 
    else
      print("done")
    end
	library:Notify("Success", "Done in: " .. string.format('%.1fs', tick() - buytime))
	print("Done in: " .. string.format('%.1fs', tick() - buytime))
  end



  MainAutoBuySec:Slider("Amount", 1, 1, 100, false, function(Value)
  AutoBuyAmount = Value
  end)

  AOpenbox = false

  MainAutoBuySec:Toggle("Open Box", false, function(Value)
  AOpenbox = Value
  end)

  MainAutoBuySec:DropDown("Select Item", GrabShopItems(), function(Value)-- dropdown unusable when typing in it and cant scroll down, and page can get scrolled past too for some reason like all the way down
	ItemToBuy = string.split(Value," - ")[1]
	return
	end)

  MainAutoBuySec:Button("Phurchase Selected Item(s)", function()
  AutoBuy(ItemToBuy,AutoBuyAmount,AOpenbox)
  end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 -- TP To Your Base
 BaseSec:Button("TP To Your Base", function()
	Instance.new('RemoteEvent', game:service 'ReplicatedStorage'.Interaction).Name = "Ban"
	for i, v in pairs(game.Workspace.Properties:GetChildren()) do
		if v.Owner.Value == game.Players.LocalPlayer then
			game.Players.LocalPlayer.Character.Humanoid.Jump = true
			wait(0.1)
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0, 10, 0)
			game.Players.LocalPlayer.Character.Humanoid.Jump = true
			wait(0.1)
		end
	end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 -- rainbow land color
local isRainbowCycleEnabled = false
local rainbowCycleButton = CBaseSec:Button("Start Rainbow Cycle", function()
    isRainbowCycleEnabled = not isRainbowCycleEnabled
    if isRainbowCycleEnabled then
        coroutine.wrap(function()
            while isRainbowCycleEnabled do
                for hue = 0, 1, 0.01 do
                    if not isRainbowCycleEnabled then break end -- stop if the cycle is disabled
                    local color = Color3.fromHSV(hue, 1, 1)
                    for i, v in next, game:GetService("Workspace").Properties:GetChildren() do
                        for i, square in next, v:GetChildren() do
                            if square.Name == "Square" or square.Name == "OriginSquare" then
                                square.Color = color
                            end
                        end
                    end
                    wait(0.01)
                end
            end
        end)()
    end
end)
-- remove rainbow land
local resetLandColorButton = CBaseSec:Button("Stop Rainbow Cycle", function()
    local PlotColor = Color3.fromRGB(124, 85, 58)
    for k, v in next, game:GetService("Workspace"):GetDescendants() do
        if v.Name == 'OriginSquare' or v.Name == 'Square' then
            v.BrickColor = BrickColor.new("Fossil")
            v.Color = PlotColor
        end
    end
    -- if the rainbow cycle was enabled before resetting the color, stop it
    if isRainbowCycleEnabled then
        isRainbowCycleEnabled = false
        rainbowCycleButton:SetActive(false)
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 -- Land Color Picker
 CBaseSec:ColorPicker("Land Color", Color3.fromRGB(124, 92, 70), function(Value)
	for i,v in next, game:GetService("Workspace").Properties:GetChildren() do
	 for i,v in next, v:GetChildren() do
		 if v.Name == "Square" or v.Name == "OriginSquare" then
			 v.Color = Value
		 end
	 end
 end
end)
------------------------------------------------------------------------------







--------------------------------------------------------------------------------
---- Normal Land Color
-- CBaseSec:Button("Reset Land Color", function()
--	local PlotColor = Color3.fromRGB(124,85,58)
--	for k, v in next, game:GetService("Workspace"):GetDescendants() do
--		if v.Name == 'OriginSquare' or v.Name == 'Square' then
--			v.BrickColor = BrickColor.new("Fossil")
--			v.Color = PlotColor
--		end
--	end
--end)
--------------------------------------------------------------------------------
--
--
--
--
--
--
--
--------------------------------------------------------------------------------
---- Sandstone Material
--MBaseSec:Button("Sandstone Plot", function()
--local PlotMaterial = "Sandstone"
--for k, v in next, game:GetService("Workspace"):GetDescendants() do
--if v.Name == 'OriginSquare' then
--		v.Material = ("" .. PlotMaterial .. "")
--end
--end
--for k, v in next, game:GetService("Workspace"):GetDescendants() do
--if v.Name == 'Square' then
--		v.Material = ("" .. PlotMaterial .. "")
--end
--end
--end)
--------------------------------------------------------------------------------
--
--
--
--
--
--
--
--------------------------------------------------------------------------------
---- Pavement Material
--MBaseSec:Button("Pavement Plot", function()
--local PlotMaterial = "Pavement"
--for k, v in next, game:GetService("Workspace"):GetDescendants() do
--if v.Name == 'OriginSquare' then
--		v.Material = ("" .. PlotMaterial .. "")
--end
--end
--for k, v in next, game:GetService("Workspace"):GetDescendants() do
--if v.Name == 'Square' then
--		v.Material = ("" .. PlotMaterial .. "")
--end
--end
--end)
--------------------------------------------------------------------------------
--
--
--
--
--
--
--
--------------------------------------------------------------------------------
---- Marble Material
--MBaseSec:Button("Marble Plot", function()
--local PlotMaterial = "Marble"
--for k, v in next, game:GetService("Workspace"):GetDescendants() do
--if v.Name == 'OriginSquare' then
--		v.Material = ("" .. PlotMaterial .. "")
--end
--end
--for k, v in next, game:GetService("Workspace"):GetDescendants() do
--if v.Name == 'Square' then
--		v.Material = ("" .. PlotMaterial .. "")
--end
--end
--end)
--------------------------------------------------------------------------------
--	
--	
--	
--	
--	
--	
--------------------------------------------------------------------------------
---- Ghostly Material
--MBaseSec:Button("Clear Grid Plot", function()
--local PlotMaterial = "ForceField"
--for k, v in next, game:GetService("Workspace"):GetDescendants() do
--if v.Name == 'OriginSquare' then
--		v.Material = ("" .. PlotMaterial .. "")
--end
--end
--for k, v in next, game:GetService("Workspace"):GetDescendants() do
--if v.Name == 'Square' then
--		v.Material = ("" .. PlotMaterial .. "")
--end
--end
--end)
--------------------------------------------------------------------------------
--	
--	
--	
--	
--------------------------------------------------------------------------------
---- Normal Material
--MBaseSec:Button("Normal Material", function()
--local PlotMaterial = "Concrete"
--for k, v in next, game:GetService("Workspace"):GetDescendants() do
--if v.Name == 'OriginSquare' then
--		v.Material = ("" .. PlotMaterial .. "")
--end
--end
--for k, v in next, game:GetService("Workspace"):GetDescendants() do
--if v.Name == 'Square' then
--		v.Material = ("" .. PlotMaterial .. "")
--
--end
--end
--end)
------------------------------------------------------------------------------
local plotMaterialDropdown = MBaseSec:DropDown("Select Plot Material", {"Normal", "Sandstone", "Brick", "Marble", "Clear Grid"}, function(materialOption)
    local material = Enum.Material.Concrete

    if materialOption == "Sandstone" then
        material = Enum.Material.Sandstone
    elseif materialOption == "Brick" then
        material = Enum.Material.Pavement
    elseif materialOption == "Marble" then
        material = Enum.Material.Marble
    elseif materialOption == "Clear Grid" then
        material = Enum.Material.ForceField
    elseif materialOption == "Normal" then
        material = Enum.Material.Concrete
    end
    for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
        if v.Name == 'OriginSquare' or v.Name == 'Square' then
            v.Material = material
        end
    end
end)
------------------------------------------------------------------------------
	
	






------------------------------------------------------------------------------
-- Base Sorter Sec
------------------------------------------------------------------------------
-- Count Axes in Inventory (include held)
BaseAxeSec:Button("Count Axes in Inventory", function()
	local Amount = 0
	
	-- Count tools in Backpack
	for _, item in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
	if item.Name == "Tool" and item.ClassName == "Tool" then
	Amount = Amount + 1
	end
	end
	
	-- Count tools in Player's Character
	for _, item in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
	if item.Name == "Tool" and item.ClassName == "Tool" then
	Amount = Amount + 1
	end
	end
	 library:Notify("Inventory Count", "You're Holding "..Amount.." Axe(s)!")
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 -- Count total Axes
 BaseAxeSec:Button("Total Axes",function()
 Amount = 0
 for a,b in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
 if b.Name == "Tool" and b.ClassName == "Tool" then
 Amount = Amount + 1
 end
 end
 for a,b in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
	if b.Name == "Tool" and b.ClassName == "Tool" then
		Amount = Amount + 1
	end
 end
 
 for a,b in pairs(workspace.PlayerModels:GetChildren()) do
	if b:FindFirstChild("Owner") and b.Owner.Value == game.Players.LocalPlayer then
		if b:FindFirstChild("Type") and b.Type.Value == "Tool" then
			Amount = Amount + 1
		end
	end
 end
 
 library:Notify("Total Count", "You Have "..Amount.." Total Axe(s)!")
 end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
  -- Drop Axes single drop (drops all held/unheld axes one at a time)
  BaseAxeSec:Button("Drop Axes", function()
	 for i,v in next, game:GetService("Players").LocalPlayer.Backpack:GetChildren() do
	 if v:IsA("Tool") and v.Name == "Tool" then
	 repeat 
	 game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(v,"Drop tool",game.Players.LocalPlayer.Character.Head.CFrame)
	 task.wait()
	 until v.Parent == nil
	 task.wait()
	 end
 end
 end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
 -- Itme Sorter | Modified one provided by silent
 if not _G.Ping then
    _G.Ping = 0
    task.spawn(function() 
        while wait(.1) do
            local Time = tick()
            game:GetService("ReplicatedStorage").TestPing:InvokeServer()
            _G.Ping = ((tick() - Time) / 2) + 0.1
        end
    end)
end 
	
	BaseSorterSec:DropDown("Select Axe Type", {"BasicHatchet","Axe1","Axe2","Axe3","SilverAxe","AxeAlphaTesters","FireAxe","EndTimesAxe","CandyCaneAxe","Beesaxe","AxeAmber","GingerbreadAxe","AxeTwitter","RustyAxe","CaveAxe","ManyAxe","CandyCornAxe", "AxeSwamp", "IceAxe"}, function(selected)
		selectedItem = selected
	end)
	
	
	BaseSorterSec:TextBox("Quantity:", "Enter Amount", function(qty)
		Quantity = tonumber(qty) or 0
	end)
	
	BaseSorterSec:Button("Teleport", function()
	local abortFlag = false

    if not selectedItem then
        library:Notify("Error", "Please select an item to teleport.")
        return
    end
		if Quantity <= 0 then
			library:Notify("Error", "Quantity must be over 0")
			return
		end
	
		local ItemsToTP = {selectedItem}
		local ItemsTypeToTP = {} -- set later, atm it's only axes
		local ItemOwner = game:GetService("Players").LocalPlayer.Name
		local ItemFound = false
		local OldPos = game:GetService("Players").LocalPlayer.Character.Head.CFrame + Vector3.new(5,0,0)
	
		function SetVelocity(Model)
			for i,v in next, Model:GetChildren() do
				if v:IsA("BasePart") and (v.Name == "Main" or v.Name == "WoodSection") then
					v.Velocity = Vector3.new(0,0,0)
				end
			end
		end
	
		local itemQty = 0
		local itemsTeleported = 0
		for i,v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
			if v:FindFirstChild("Owner") and v.Owner.Value == game:GetService("Players")[ItemOwner] then
				if (v:FindFirstChild("ItemName") and table.find(ItemsToTP,v.ItemName.Value)) or (v:FindFirstChild("PurchasedBoxItemName") and table.find(ItemsToTP,v.PurchasedBoxItemName.Value)) or (v:FindFirstChild("Type") and table.find(ItemsTypeToTP,v.Type.Value)) then
					itemQty = itemQty + 1
				end
			end
		end
	
		if itemQty < Quantity then
			library:Notify("Error", "You only have " .. itemQty .. " " .. selectedItem .. "s")
			return
		end
	
		for i,v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
		if abortFlag then
		        library:Notify("Aborted", "Axe sort has been aborted!")
		        break
		    end
			if v:FindFirstChild("Owner") and v.Owner.Value == game:GetService("Players")[ItemOwner] then
				if (v:FindFirstChild("ItemName") and table.find(ItemsToTP,v.ItemName.Value)) or (v:FindFirstChild("PurchasedBoxItemName") and table.find(ItemsToTP,v.PurchasedBoxItemName.Value)) or (v:FindFirstChild("Type") and table.find(ItemsTypeToTP,v.Type.Value)) then
					ItemFound = true
					game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.PrimaryPart.CFrame.p) + Vector3.new(5,0,0)
					for i = 1,30 do
						SetVelocity(v)
						game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(v)
						v:PivotTo(OldPos)
						task.wait()
					end
					itemsTeleported = itemsTeleported + 1
					if itemsTeleported == Quantity then
						break
					end
				end
			end
		end
	
		game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
		if itemsTeleported == 0 then
			library:Notify("Error", "Failed to find the selected item")
		elseif itemsTeleported < Quantity then
			library:Notify("Info", "Teleported " .. itemsTeleported .. " " .. selectedItem .. "s")
		else
			library:Notify("Success", "Teleported " .. itemsTeleported .. " " .. selectedItem .. "s")
		end
	end)


	-- tp all axes
	BaseSorterSec:Button("Teleport All Axes", function()-- add all axes to this list
	local abortFlag = false
	local ItemsToTP = {"BasicHatchet","Axe1","Axe2","Axe3","SilverAxe","AxeAlphaTesters","FireAxe","EndTimesAxe","CandyCaneAxe","Beesaxe","AxeAmber","GingerbreadAxe","AxeTwitter","RustyAxe","CaveAxe","ManyAxe","CandyCornAxe", "AxeSwamp", "IceAxe"}
	local ItemsTypeToTP = {} -- set later
	local ItemOwner = game:GetService("Players").LocalPlayer.Name
	local ItemFound = false
	local OldPos = game:GetService("Players").LocalPlayer.Character.Head.CFrame + Vector3.new(5,0,0)
	
	function SetVelocity(Model)
		for i,v in next, Model:GetChildren() do
			if v:IsA("BasePart") and (v.Name == "Main" or v.Name == "WoodSection") then
				v.Velocity = Vector3.new(0,0,0)
			end
		end
	end
	
	local success = false
	for i,v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
		if abortFlag then
			library:Notify("Aborted", "Axe sort has been aborted!")
			break
		end
		if v:FindFirstChild("Owner") and v.Owner.Value == game:GetService("Players")[ItemOwner] then
			if (v:FindFirstChild("ItemName") and table.find(ItemsToTP,v.ItemName.Value)) or (v:FindFirstChild("PurchasedBoxItemName") and table.find(ItemsToTP,v.PurchasedBoxItemName.Value)) or (v:FindFirstChild("Type") and table.find(ItemsTypeToTP,v.Type.Value)) then
				success = true
				game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.PrimaryPart.CFrame.p) + Vector3.new(5,0,0)
				for i = 1,30 do
					SetVelocity(v)
					game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(v)
					v:PivotTo(OldPos)
					task.wait()
				end
			end
		end
	end
	
	game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
	
	if not success then
		library:Notify("Error", "You don't own any of the selected items.")
	end
	end)

	BaseSorterSec:Button("Abort", function()
		abortFlag = true
		library:Notify("Aborted", "Axe sort has been cancelled!")
	end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
--[[
-- Drop Axes drop with holding and notifications

	BaseAxeSec:Button("Drop Axes", function()
    local backpack = game:GetService("Players").LocalPlayer.Backpack
    local character = game:GetService("Players").LocalPlayer.Character
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    
    if humanoid then
        humanoid:UnequipTools()
        wait()
    else
        warn("Could not find Humanoid")
    end
    
    local numAxesDropped = 0
    
    for i, v in pairs(backpack:GetChildren()) do
        if v:IsA("Tool") and v.Name == "Tool" then
            game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(v, "Drop tool", character.Head.CFrame)
            numAxesDropped = numAxesDropped + 1
            wait()
        end
    end
    
    if numAxesDropped == 0 then
        library:Notify("Failed", "No axes to drop.")
    else
        library:Notify("Success", "Dropped " .. numAxesDropped .. " axes.")
    end
end)
]]
------------------------------------------------------------------------------







------------------------------------------------------------------------------
--[[
-- Pickup Axes - with checks to get a total of 9
-- unfinshed

local selectedItem
local Quantity = 0

BaseSorterSec:TextBox("Quantity:", "Enter Amount", function(qty)
    Quantity = tonumber(qty) or 0
end)

BaseSorterSec:DropDown("Pickup Axe Type", {"BasicHatchet","Axe1","Axe2","Axe3","SilverAxe","AxeAlphaTesters","Rukiryaxe","AxeBetaTesters","FireAxe","SilverAxe","EndTimesAxe","CandyCaneAxe","Beesaxe","AxeAmber","GingerbreadAxe","AxeTwitter","RustyAxe","CaveAxe","ManyAxe","CandyCornAxe" }, function(selected)
    selectedItem = selected
end)

local function PickupAxe()
    if Quantity <= 0 then
        library:Notify("Error", "Quantity must be over 0")
        return
    end
    
    local ItemsToTP = {selectedItem}
    local ItemsTypeToTP = {} -- set later
    local ItemOwner = game:GetService("Players").LocalPlayer.Name
    local ItemFound = false
    local OldPos = game:GetService("Players").LocalPlayer.Character.Head.CFrame + Vector3.new(5,0,0)

    function SetVelocity(Model)
        for i,v in next, Model:GetChildren() do
            if v:IsA("BasePart") and (v.Name == "Main" or v.Name == "WoodSection") then
                v.Velocity = Vector3.new(0,0,0)
            end
        end
    end

    local itemQty = 0
    for i,v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == game:GetService("Players")[ItemOwner] then
            if (v:FindFirstChild("ItemName") and table.find(ItemsToTP,v.ItemName.Value)) or (v:FindFirstChild("PurchasedBoxItemName") and table.find(ItemsToTP,v.PurchasedBoxItemName.Value)) or (v:FindFirstChild("Type") and table.find(ItemsTypeToTP,v.Type.Value)) then
                itemQty = itemQty + 1
            end
        end
    end

    if itemQty < Quantity then
        library:Notify("Error", "You only have " .. itemQty .. " " .. selectedItem .. "s")
        return
    end
        for i,v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
            if v:FindFirstChild("Owner") and v.Owner.Value == game:GetService("Players")[ItemOwner] then
                if (v:FindFirstChild("ItemName") and table.find(ItemsToTP,v.ItemName.Value)) or (v:FindFirstChild("PurchasedBoxItemName") and table.find(ItemsToTP,v.PurchasedBoxItem)) then
                    ItemFound = true
                    SetVelocity(v)
            
                    wait(0.1)
            
                    v:SetPrimaryPartCFrame(OldPos)
            
                    for i,v2 in next, v:GetChildren() do
                        if v2:IsA("Part") and v2.Name ~= "Handle" then
                            v2.Velocity = Vector3.new(0,0,0)
                        end
                    end
            
                    for i,v2 in next, v:GetChildren() do
                        if v2:IsA("Attachment") and v2.Name == "ToolAttachment" then
                            game:GetService("Players").LocalPlayer.Character.Humanoid:EquipTool(v)
                            wait(0.1)
                            v2:Fire()
                            wait(0.1)
                            game:GetService("Players").LocalPlayer.Character.Humanoid:UnequipTools()
                        end
                    end
            
                    Quantity = Quantity - 1
                    if Quantity == 0 then
                        break
                    end
                end
            end
        end
        
        if not ItemFound then
            library:Notify("Error", "Could not find " .. selectedItem)
            return
        end
        
        library:Notify("Success", "Successfully picked up " .. Quantity .. " " .. selectedItem .. "s")
end
]]
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Dupe Section
-- info
PlotDupeInfoSec:Paragraph("Notice", "A fresh private server is recommended after every dupe\nCauses of failure: incorrect time, lag, new players joining and server overload")
PlotDupeInfoSec:Paragraph("Middle Plot Dupe Instructions", "Select the slot you wish to dupe then enter the time to teleport (time it takes you to teleport to your base) press 'start Middle Plot Dupe'")
PlotDupeInfoSec:Paragraph("Maxland Dupe Instructions", "Select the slot you wish to dupe then enter the time to teleport (very important to get this as accurate as possible) and take away 1.7 seconds from that time then enter that time after removing (delay before you get kicked, typically this is 3-4) then press 'Maxland Dupe'")
PlotDupeInfoSec:Paragraph("Base Wipe Warning", "Upon pressing ';' and 'T' when on loading preview screen can trigger a wipe so be careful")
PlotDupeInfoSec:Label("Make sure you are not in a server by yourself when duping.")

-- server lag
local PingLabel = PlotDupeInfoSec:Label("Ping: Calculating...")

local function GetPing()
    local Time = tick()
    game:GetService("ReplicatedStorage").TestPing:InvokeServer()
    return ((tick() - Time) / 2) + 0.5
end

task.spawn(function()
   while true do
       local ping = GetPing()
       if ping then
           PingLabel.Text = "Ping: " .. math.floor(ping * 1000) .. "ms"
       else
           PingLabel.Text = "Ping: Calculating..."
       end
       task.wait(1)
   end
end)

-- Middle Plot Dupe (creds to silent)
local LoadTime = 1 -- time it takes for your base to load
local Slot = 1 --- Slot you want to dupe
local ItemsLoading -- define this variable outside of the function

---~DonateBaseByTehSilent~---

function FindEmptyPlot()
    for i,v in next, game:GetService"Workspace".Properties:GetChildren() do
        if v:FindFirstChild"Owner" and v.Owner.Value == nil then
            return v
        end
    end
end

-- Automation using library functions
MiddlePlotDupeSec:TextBox("Time to teleport", "Input", function(Value)
LoadTime = tonumber(Value)
print("Middle Dupe: Time to teleport: ".. LoadTime .."")
end)

MiddlePlotDupeSec:Slider("Slot", Slot, 1, 6, false, function(Value)
    Slot = Value
end)

MiddlePlotDupeSec:Button("Start Middle Dupe", function()
    library:Notify("Important", "Don't load on top of the red plot!")
    ItemsLoading = game:GetService"Workspace".PlayerModels.ChildAdded:Connect(function(v)
        local owner = v:WaitForChild"Owner".Value
        if owner == game:GetService"Players".LocalPlayer then
            task.wait(LoadTime - 2)
            game:Shutdown()
        end
    end)
    game:GetService("ReplicatedStorage").LoadSaveRequests.RequestLoad:InvokeServer(Slot, game:GetService"Players".LocalPlayer)
    local FreePlot = FindEmptyPlot()
    if FreePlot then
        game:GetService"Workspace".Effects:WaitForChild"StructureModel"
        FreePlot.OriginSquare.Color = Color3.fromRGB(225, 0, 0)
        game:GetService("ReplicatedStorage").PropertyPurchasing.ClientPurchasedProperty:FireServer(FreePlot,FreePlot.OriginSquare.CFrame)
        library:Notify("Notice", "Free Land")
        print("Middle Plot Dupe: FreeLand")
        task.wait(LoadTime - 2)
        game:Shutdown()
    else
        library:Notify("Error", "No empty plot found")
        print("Middle Plot Dupe: Base Dupe Error: No empty plot found.")
    end

    ItemsLoading:Disconnect() -- disconnect the event when the process is complete
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Automatic Automax land dupe
loadstring([[
function FreeLand()
    for a,b in pairs(workspace.Properties:GetChildren()) do 
        if b:FindFirstChild("Owner") and b:FindFirstChild("OriginSquare") and b.Owner.Value == nil then 
       wait(1)
       game.ReplicatedStorage.PropertyPurchasing.ClientPurchasedProperty:FireServer(b, b.OriginSquare.OriginCFrame.Value.p + Vector3.new(0,3,0))
      for i,v in pairs(game.Workspace.Properties:GetChildren()) do
       if v.Owner.Value == game.Players.LocalPlayer then
      wait(0.1)
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0,10,0)
      wait(0.1)
       game.Players.LocalPlayer.Character.Jump = false
      break
      end
      end
      end
      end
      end
]])();

function LoadSlot()
    local LoadSlot = game.ReplicatedStorage.LoadSaveRequests.ClientMayLoad:InvokeServer(player)
        if LoadSlot then
            game.ReplicatedStorage.LoadSaveRequests.RequestLoad:InvokeServer(Slot, player)
        end
    end

AutoMaxLandDupeSec:Slider("Slot", 1, 1, 6, false, function(new)
Slot = tonumber(new)
print("Maxland Dupe: Time to teleport: ".. Slot .."")
end)

AutoMaxLandDupeSec:TextBox("Time to teleport", "Input", function(new)
timetotp = tonumber(new)
print("Maxland Dupe: Time to teleport: ".. timetotp .."")
end)

AutoMaxLandDupeSec:TextBox("Time Before Leaving", "Input", function(new)
timetoremove = tonumber(new)
print("Maxland Dupe: Time to Remove: ".. timetoremove .."")
end)

----------------------------------------------------
-- dupe func
local N = game:GetService("VirtualInputManager")

-- disable bind listener
local keyListenerEnabled = false

AutoMaxLandDupeSec:Button("Maxland Dupe",function()
print("Maxland Dupe: Loading Slot " .. Slot .. "")
library:Notify("Maxland Dupe", "Loading Slot ".. Slot .."")

--N:SendKeyEvent(true, "Q", false, game) -- free land
--wait(0.1) 
--N:SendKeyEvent(true, ";", false, game) -- loads the base
--wait(0.1)
--N:SendKeyEvent(true, "P", false, game) -- kicks from game


----------------------------------------------------
-- symbol test
N:SendKeyEvent(true, Enum.KeyCode.LeftBracket, false, game) -- free land
wait(0.1) 
N:SendKeyEvent(true, Enum.KeyCode.Semicolon, false, game) -- loads the base
wait(0.1)
N:SendKeyEvent(true, Enum.KeyCode.RightBracket, false, game) -- kicks from game
LoadSlot()

-- enable bind listener
keyListenerEnabled = true
----------------------------------------------------
end)
scr=getsenv(game.Players.LocalPlayer.PlayerGui.PropertyPurchasingGUI.PropertyPurchasingClient);

local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

bind = "[" 
print("pressed " .. tostring(bind))
wait(1)
mouse.KeyDown:connect(function(key)
if key == bind then
    repeat wait()until game.Players.LocalPlayer.PlayerGui.PropertyPurchasingGUI.SelectPurchase.Visible;
    wait(1)
    wait(0.9)
    for i,v in next, game:GetService("Workspace").Properties:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == nil then
        game:GetService("ReplicatedStorage").PropertyPurchasing.ClientPurchasedProperty:FireServer(v,v.OriginSquare.Position)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0,2,0)
        break
        end
    end
end
end)

local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

bind = "]" 
print("pressed " .. tostring(bind))
wait(1)
mouse.KeyDown:connect(function(key)
if key == bind then
    repeat wait()until game.Players.LocalPlayer.PlayerGui.PropertyPurchasingGUI.SelectPurchase.Visible;
    wait(1)
    wait(2)
    task.wait(timetotp - 2)
    loadstring(game:GetObjects("rbxassetid://2662507900")[1].Source)()
end
end)

local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

bind = ";" 
print("pressed " .. tostring(bind))
mouse.KeyDown:connect(function(key)
if key == bind then
repeat wait()until game.Players.LocalPlayer.PlayerGui.PropertyPurchasingGUI.SelectPurchase.Visible;
wait(0.3)
scr.scrollSelection(-1);
wait(0.1)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
end
end)
 ------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Manual Maxland Duplication
--MaxLandDupeSec:Button("Loading Slot | Step 1",function()
--library:Notify("Information", "Select a slot and stay at base preview screen then run step 2.")
----print("Loading Slot")
--Loadslot()
--end)
--
--
--MaxLandDupeSec:Button("Free land | Step 2",function()
--library:Notify("Information", "Free land was given now run step 3.")
----print("Maxland Dupe Step Two")
--FreeLand()
--end)
--
--
--MaxLandDupeSec:Button("Wait & Kick | Step 3",function()
--library:Notify("Information", "Loading Base & waiting set time, run step 4 after re-joining.")
----print("Maxland Dupe Step Two")
--wait(timetotp)
--loadstring(game:GetObjects("rbxassetid://2662507900")[1].Source)()
--end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
  -- lasso tool

MaxlandDupeTools:Paragraph("Claim tool information", "after duplicating a base you should use this tool to claim the plot, this tool is used for replacing the need for manually buying the land on the dupe, the lasso tool selects the plot then it loads ontop of the selected plot and remember to load a empty slot before using the claim tool")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
  -- lasso tool
MaxlandDupeTools:Button("Slot Selector | Step 1",function()
library:Notify("Information", "Select the base that you duped")
loadstring(game:HttpGet('https://gist.githubusercontent.com/ItsEcstasy/287d401a3d891a348e1b67b82f4caff6/raw/510d6075b72e24ad8b4eb13ead23f148f267e049/Slot%2520Lasso%2520Tool'))()
end)
-- https://pastebin.com/Wj49DUwL
------------------------------------------------------------------------------







------------------------------------------------------------------------------
  -- load on plot
MaxlandDupeTools:Button("Load On Selected Slot | Step 2",function()
library:Notify("Information", "Loading On Selected Plot")
        for i,v in next, game:GetService("Workspace").Properties:GetChildren() do
            if v:FindFirstChild("OriginSquare") then
                if v.OriginSquare:FindFirstChild("Selection") then
                game:GetService("ReplicatedStorage").PropertyPurchasing.ClientPurchasedProperty:FireServer(v,v.OriginSquare.Position)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0,2,0)
                break
            end
        end
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
  -- save slot
MaxlandDupeTools:Button("Save Items To Free Land | Step 3",function()
library:Notify("Information", "Saved Slot, load a normal base now")

        local result = false
    repeat
        wait(1)
        getgenv().block_save = false
        local slot_id = game:GetService("Players")["LocalPlayer"]["CurrentSaveSlot"].Value
        result = game.ReplicatedStorage.LoadSaveRequests.RequestSave:InvokeServer(slot_id, game.Players.LocalPlayer)
        until result
        getgenv().block_save = true  
end)
--MaxlandDupeTools:Label("load a base after all 3 have been pressed")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Wood Tab
------------------------------------------------------------------------------
-- bring tree
BringWoodSec:DropDown("Select Wood Type", {"Generic", "Walnut", "Cherry", "SnowGlow", "Oak", "Birch", "Koa", "Fir", "Volcano", "GreenSwampy", "CaveCrawler", "Palm", "GoldSwampy", "Frost", "Spooky", "LoneCave" },function(Value)
	getTree = Value
	return
end)
function Notify(Title,Text)
	game.StarterGui:SetCore("SendNotification", {Title = Title, Text = Text, Duration = 10})
	end
	
	function ChopTree(CutEvent, ID, Height)
	game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(CutEvent, {["tool"] = game.Players.LocalPlayer.Character:FindFirstChild("Tool"), ["faceVector"] = Vector3.new(1, 0, 0), ["height"] = Height, ["sectionId"] = ID, ["hitPoints"] = HitPoints[game.Players.LocalPlayer.Character:FindFirstChild("Tool").ToolName.Value], ["cooldown"] = 0.25837870788574, ["cuttingClass"] = "Axe"})
	end
	
	local gs = function(service) return game:GetService(service) end
	local players = gs("Players")
	local client = players.LocalPlayer
	local b = game:GetService("ReplicatedStorage")
	DragModel1 = function(...)
	local d = {...}
	pcall(
		function()
			b.Interaction.ClientIsDragging:FireServer(d[1])
			 b.Interaction.ClientIsDragging:FireServer(d[1])
			 b.Interaction.ClientIsDragging:FireServer(d[1])
		   b.Interaction.ClientIsDragging:FireServer(d[1])
	
		end
	)
	d[1]:MoveTo(d[2])
	d[1]:MoveTo(d[2])
	return d
	end
	local function table_foreach(table, callback)
	for i=1,#table do
	callback(i, table[i])
	end
	end
	
	local function getCFrame(part)
	local part = part or (client.Character and client.Character.HumanoidRootPart)
	if not part then return end
	return part.CFrame
	end
	
	local function tp(pos)
	local pos = pos or client:GetMouse().Hit + Vector3.new(0, client.Character.HumanoidRootPart.Size.Y, 0)
	if typeof(pos) == "CFrame" then
	client.Character:SetPrimaryPartCFrame(pos)
	elseif typeof(pos) == "Vector3" then
	client.Character:MoveTo(pos)
	end
	end
	
	
	local  function getPosition(part)
	return getCFrame(part).Position
	end
	
	local  function getTools()
	client.Character.Humanoid:UnequipTools()
	local tools = {}
	table_foreach(client.Backpack:GetChildren(), function(_, v)
	if v.Name ~= "BlueprintTool" and v.Name ~= "Delete" and v.Name ~= "Undo" then
	  tools[#tools + 1] = v 
	end
	end)
	return tools
	end
	local function getToolStats(toolName)
	if typeof(toolName) ~= "string" then
--	print(toolName)
	toolName = toolName.ToolName.Value
	end
	return require(gs("ReplicatedStorage").AxeClasses['AxeClass_'..toolName]).new()
	end
	
	local function getBestAxe(treeClass)
	local tools = getTools()
	if #tools == 0 then
	return game.StarterGui:SetCore("SendNotification", {
		Title = 'Axe not found';
		Text = "You need an axe to use this feature";
		Icon = "rbxassetid://7924662383";
		Duration = 4;
	})
	end
	local toolStats = {}
	local tool
	for _, v in next, tools do
	if treeClass == "LoneCave" and v.ToolName.Value == "LoneCave" then
	  tool = v
	  break
	end
	local axeStats = getToolStats(v)
	if axeStats.SpecialTrees and axeStats.SpecialTrees[treeClass] then
	  for i, v in next, axeStats.SpecialTrees[treeClass] do
		axeStats[i] = v
	  end
	end
	table.insert(toolStats, { tool = v, damage = axeStats.Damage })
	end
	if not tool and treeClass == "LoneCave" then
	return game.StarterGui:SetCore("SendNotification", {
		Title = 'Axe';
		Text = "Endtimes Axe Required";
		Icon = "rbxassetid://7924662383";
		Duration = 7;
	})
	end
	table.sort(toolStats, function(a, b)
	return a.damage > b.damage
	end)
	return true, tool or toolStats[1].tool
	end
	
	local function cutPart (event, section, height, tool, treeClass)
	local axeStats = getToolStats(tool)
	if axeStats.SpecialTrees and axeStats.SpecialTrees[treeClass] then
	for i, v in next, axeStats.SpecialTrees[treeClass] do
	  axeStats[i] = v
	end
	end
	game:GetService'ReplicatedStorage'.Interaction.RemoteProxy:FireServer(event, {
	tool = tool,
	faceVector = Vector3.new(-1, 0, 0),
	height = height or 0.3,
	sectionId = section or 1,
	hitPoints = axeStats.Damage,
	cooldown = axeStats.SwingCooldown,
	cuttingClass = "Axe"
	})
	end
	local treeListener = function(treeClass, callback)
	local childAdded
	childAdded = workspace.LogModels.ChildAdded:Connect(function(child)
	local owner = child:WaitForChild("Owner")
	if owner.Value == client and child.TreeClass.Value == treeClass then
	  childAdded:Disconnect()
	  callback(child)
	end
	end)
	end
	local treeClasses = {}
	local treeRegions = {}
	
	for _, v in next, workspace:GetChildren() do
	if v.Name == "TreeRegion" then
	treeRegions[v] = {}
	for _, v2 in next, v:GetChildren() do
	  if v2:FindFirstChild("TreeClass") and not table.find(treeClasses, v2.TreeClass.Value) then
		table.insert(treeClasses, v2.TreeClass.Value)
	  end
	  if v2:FindFirstChild("TreeClass") and not table.find(treeRegions[v], v2.TreeClass.Value) then
		table.insert(treeRegions[v], v2.TreeClass.Value)
	  end
	end
	end
	end
	
	local getBiggestTree = function(treeClass)
	local trees = {}
	for i, v in next, treeRegions do
	if table.find(v, treeClass) then
	  for _, v2 in next, i:GetChildren() do
		if v2:IsA("Model") and v2:FindFirstChild("Owner") then
		  if v2:FindFirstChild("TreeClass") and v2.TreeClass.Value == treeClass and v2.Owner.Value == nil or v2.Owner.Value == client then
			local totalMass = 0
			local treeTrunk
			for _, v3 in next, v2:GetChildren() do
			  if v3:IsA("BasePart") then
				if v3:FindFirstChild("ID") and v3.ID.Value ==1 then
				  treeTrunk = v3
				end
				totalMass = totalMass + v3:GetMass()
			  end
			end
			table.insert(trees, { tree = v2, trunk = treeTrunk, mass = totalMass })
		  end
		end
	  end
	end
	end
	table.sort(trees, function(a, b)
	return a.mass > b.mass
	end)
	return trees[1] or nil
	end
	
	local function bringTree(treeClass)
	local lp =game. Players.LocalPlayer
	local success,data = getBestAxe(treeClass) 
	
	local axeStats = getToolStats(data)
	
	local tree = getBiggestTree(treeClass)
	
	if not tree then
	return 
	library:Notify("Error", "Tree not found.")
end
	
	local oldPosition = getPosition()
	
	local treeCut = false
	
	  
	treeListener(treeClass, function(tree)
	tree.PrimaryPart = tree:FindFirstChild("WoodSection")
	treeCut = true
	
			
	for i=1,60 do
	DragModel1(tree,oldPosition)
	task.wait()
	
	end
	
	end)
	task.wait(0.15)
	
	
	
	treestop = true
	
	task.spawn(function()
	if treeClass == "LoneCave" then print("test")
	repeat
	if not treestop then break end
	 tp(tree.trunk.CFrame)
	
	 task.wait()
	until treeCut
	else
	repeat
	if not treestop then break end
	  tp(tree.trunk.CFrame)
	
	  task.wait()
	until treeCut
	end
	end)
	
	task.wait()
	
	
	repeat
	if not treestop then break end
	  cutPart(tree.tree.CutEvent, 1, 0.3, data, treeClass)
	  task.wait()
	until treeCut
	
	
	print("done")
	if treeClass == "LoneCave" then 
	wait(1)
	game.Players.LocalPlayer.Character.Head:Remove()
	else
	wait(1)
	  tp(oldPosition)
	
	end
	end

-- cut a tree automatically
--bringTree("EndTimes")
	
BringWoodSec:Button("Bring Tree", function()
	for i = 1, AppleboxIsCool do
		wait()
		bringTree(getTree)
	end
end)
	
BringWoodSec:Slider("Amount", 1, 1, 30, false, function(Value)
	AppleboxIsCool = Value
end)
AppleboxIsCool = 1

	
BringWoodSec:Button("Abort", function()
	treestop = false
	wait(0.4)
	treestop = true
end)
BringWoodSec:Label("Will not work if Btools is active")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- claim all trees
-- Requirements.Funcs.Teleport = function(Pos)
--     repeat task.wait() until game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
--     if game.Players.LocalPlayer.Character.Humanoid.SeatPart and game.Players.LocalPlayer.Character.Humanoid.SeatPart.Name == "DriveSeat" then
--         if typeof(Pos) == "Vector3" then
--             Pos = CFrame.new(Pos)
--         end
--         game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent:PivotTo(Pos)
--     else
--         if typeof(Pos) == "CFrame" then
--             game:GetService"Players".LocalPlayer.Character:PivotTo(Pos)
--         elseif typeof(Pos) == "Vector3" then
--             game:GetService"Players".LocalPlayer.Character:MoveTo(Pos)
--         end
--     end
-- end
-- 
-- local ClaimTreeRequirements = {
--     ClaimTreeBoolean = {
--         ClaimTrees = false,
--     },
--     Funcs = {
--         ClaimAllTrees = function()
--             ClaimTreeRequirements.Vars.OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
--             for i,v in next, game:GetService("Workspace"):GetChildren() do
--                 if v.Name == "TreeRegion" then
--                     for i,v in next, v:GetChildren() do
--                         if v:FindFirstChild("Owner") and v.Owner.Value == nil then
--                             ClaimTreeRequirements.Funcs.Teleport(v:FindFirstChild("WoodSection").CFrame)
--                             repeat
--                                 if not ClaimTreeRequirements.ClaimTreeBoolean.ClaimTrees then
--                                     return ClaimTreeRequirements.Funcs.Teleport(ClaimTreeRequirements.Vars.OldPos)
--                                 end
--                                 game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(v)
--                                 task.wait()
--                             until v.Owner.Value ~= nil
--                         end
--                     end
--                 end
--             end
--             game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = ClaimTreeRequirements.Vars.OldPos
--         end,
--         Teleport = function(CFrame)
--             game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame
--         end,
--     },
--     Vars = {
--         OldPos = nil,
--     },
-- }
-- 
-- -- Define the toggle function
-- WoodSec:Toggle("Claim All Trees", false, function(Value)
--     ClaimTreeRequirements.ClaimTreeBoolean.ClaimTrees = Value
--     if Value then
--         ClaimTreeRequirements.Funcs.ClaimAllTrees()
--     end
-- end)
------------------------------------------------------------------------------





------------------------------------------------------------------------------
-- TP all planks
WoodSortSec:Button("Teleport All Planks", function()
   enabled = true
   spawn(function()
	   while true do
		   game:GetService("RunService").Stepped:wait()
		   if enabled == false then break end
	   end
   end)
   for _, Plank in pairs(game.Workspace.PlayerModels:GetChildren()) do
	   if Plank.Name=="Plank" and Plank:findFirstChild("Owner") then
		   if Plank.Owner.Value == game.Players.LocalPlayer then
			   sendNotice = game.ReplicatedStorage.Notices.SendUserNotice
			   sendNotice:Fire("Click where you want all planks to teleport to")
			   local ButtonPress
			   ButtonPress = game.Players.LocalPlayer:GetMouse().Button1Down:Connect(function()
				   Square = game.Players.LocalPlayer:GetMouse().Target
				   if (Square.Name == "OriginSquare" or Square.Name == "Square") then
					   ButtonPress:Disconnect()
					   Plank:MoveTo(Square.Position)
					   for i=1,100 do
						   game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Plank)
					   end
				   end
			   end)
		   end
	   end
   end
   enabled = false
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- TP all logs
WoodSec:Button("Bring All Logs", function()
    function BringAllLogs()
        OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        for i,v in next, game:GetService("Workspace").LogModels:GetChildren() do
            if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v:FindFirstChild("WoodSection").CFrame.p)
                if not v.PrimaryPart then
                    v.PrimaryPart = v:FindFirstChild("WoodSection")
                end
                for i = 1,50 do
                    game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                    v:SetPrimaryPartCFrame(OldPos)
                    task.wait()
                end
            end
            task.wait()
        end
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
    end
    BringAllLogs() -- call the function here
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
  -- Buggy
WoodSortSec:Button("Teleport Planks", function()
    for _, Plank in pairs(service.Workspace.PlayerModels:GetChildren()) do
        if Plank.Name == "Plank" and Plank:findFirstChild("Owner") then
            if Plank.Owner.Value == service.Players.LocalPlayer then
                Plank:MoveTo(service.Players.LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 20, 0))
                for i = 1, 100 do
                    service.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Plank)
                end
            end
        end
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- trying to fix
--[[
-- Sell all logs
WoodSortSec:Button("Sell All Logs", function()
	library:Notify("Selling Tip", "When selling bigger trees, use Btools and remove the wall at wood dropoff")
	for _, Log in pairs(workspace.LogModels:GetChildren()) do
		if Log.Name:sub(1, 6) == "Loose_" and Log:findFirstChild("Owner") then
			if Log.Owner.Value == game.Players.LocalPlayer then
				for i, v in pairs(Log:GetChildren()) do
					if v.Name == "WoodSection" then
						spawn(function()
							for i = 1, 10 do
								wait()
								v.CFrame = CFrame.new(Vector3.new(315, -0.296, 85.791)) * CFrame.Angles(math.rad(90), 0, 0)
							end
						end)
					end
				end
				spawn(function()
					for i = 1, 20 do
						wait()
						game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Log.WoodSection)
						game.ReplicatedStorage.Interaction.ClientSetOwnership:FireServer(Log.WoodSection)
					end
				end)
			end
		end
	end
end)
]]
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Sell all trees
--WoodSortSec:Button("Sell All Logs", function()
--	for _, Log in pairs(workspace.LogModels:GetChildren()) do
-- if Log.Name:sub(1, 6) == "Loose_" and Log:findFirstChild("Owner") then
--	 if Log.Owner.Value == game.Players.LocalPlayer then
--		 for i,v in pairs(Log:GetChildren()) do
--			 if v.Name=="WoodSection" then
--				 spawn(function()
--					 for i=1,10 do
--						 wait()
--						 v.CFrame=CFrame.new(Vector3.new(315, -0.296, 85.791))*CFrame.Angles(math.rad(90),0,0)
--					 end
--				 end)
--			 end
--		 end
--		 spawn(function()
--			 for i=1,20 do
--				 wait()
--				 game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Log.WoodSection)
--	 game.ReplicatedStorage.Interaction.ClientRequestOwnership:FireServer(Log.WoodSection)
--			 end
--		 end)
--	 end
-- end
--end
--end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
  --Sell all planks
  WoodSortSec:Button("Sell All Planks", function()
	enabled = true
	spawn(function()
		while true do
			game:GetService("RunService").Stepped:wait()
			if enabled == false then break end
		end
	end)
	for _, Plank in pairs(game.Workspace.PlayerModels:GetChildren()) do
		if Plank.Name=="Plank" and Plank:findFirstChild("Owner") then
			if Plank.Owner.Value == game.Players.LocalPlayer then
				for i,v in pairs(Plank:GetChildren()) do
					if v.Name=="WoodSection" then
						spawn(function()
							for i=1,10 do
								wait()
								v.CFrame=CFrame.new(Vector3.new(315, -0.296, 85.791))*CFrame.Angles(math.rad(90),0,0)
							end
						end)
					end
				end
				spawn(function()
					for i=1,20 do
						wait()
						game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Plank.WoodSection)
						game.ReplicatedStorage.Interaction.ClientRequestOwnership:FireServer(Plank.WoodSection)
					end
				end)
			end
		end
	end
	enabled = false
end)
WoodSec:Label("Sell planks in development")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Vehicle Tab
------------------------------------------------------------------------------
VehicleSec:Button("Unflip Vehicle", function()
   library:Notify("Unflip Vehicle", "Press 'R' to unflip vehicle!", false)

   local Turn = game:GetService("Players").LocalPlayer:GetMouse()
   function Turn2(key)
	   if (key == "r") then
		   function RotateCar()
			   if game.Players.LocalPlayer.Character then 
				   Character = game.Players.LocalPlayer.Character
				   if Character.Humanoid.SeatPart ~= nil then 
					   Car = Character.Humanoid.SeatPart.Parent
					   spawn(function()
						   local Pos = CFrame.new(Car.Main.Position)
						   for i=1,5 do
							   wait()
							   Car:SetPrimaryPartCFrame(Pos * CFrame.Angles(math.rad(Character.HumanoidRootPart.Orientation.x), math.rad(Character.HumanoidRootPart.Orientation.y), 0))
							   game.ReplicatedStorage.Interaction.ClientRequestOwnership:FireServer(Car.Main)
							   game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Car.Main)
						   end
					   end)
				   end
			   end
		   end
		   RotateCar()
	   end
   end
   Turn.KeyDown:connect(Turn2)
end)
------------------------------------------------------------------------------






------------------------------------------------------------------------------
-- vehicle speed
--function VehicleSpeed(Val)
--    for i,v in pairs(game:GetService("Workspace").PlayerModels:GetChildren()) do
--        if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
--            if v:FindFirstChild("Type") and v.Type.Value == "Vehicle" then
--                if v:FindFirstChild("Configuration") then
--                    v.Configuration.MaxSpeed.Value = Val
--                end
--            end
--        end
--    end
--end
--
--VehicleSec:Slider("Vehicle Speed", 1, 1, 15, false, function(Val)
--	print(Val)
--    VehicleSpeed(Val)
--end)
-- ------------------------------------------------------------------------------
 
 
 
 
 
 
 ------------------------------------------------------------------------------
 -- Color picker
--VehicleSec:Dropdown("Car Colors", "Car Colors", {"Silver", "Dark red", "Sand red", "Sand yellow metalic", "Lemon metalic", "Gun metalic", "Earth orange", "Earth yellow", "Brick yellow", "Rust", "Really black", "Faded green", "Sand green", "Black metalic", "Dark grey metallic", "Dark grey", "Hot pink", "Medium stone grey", "Mid grey" }, function(selectedColor)
--	local clicktoselect
--	local clickcar
--	local abortspawn = true -- fixed issue
--	local oldcolor
--	local Car
--	VehicleSec:Button("Start Vehicle Spawner",  function()
--		library:Notify('Vehicle Spawner', 'Select Vehicle!', false)
--		clicktoselect = Mouse.Button1Up:Connect(function()
--			if Mouse.Target and Mouse.Target.Parent.Type and Mouse.Target.Parent.Type.Value == "Vehicle Spot" then
--				local bob = Instance.new("SelectionBox", Mouse.Target.Parent)
--				bob.Name = "Selection"
--				bob.Adornee = bob.Parent
--				bob.SurfaceTransparency = 1
--				bob.LineThickness = 0.02
--				bob.SurfaceColor3 = Color3.fromRGB(0,0,0)
--				bob.Color3 = Color3.fromRGB(255,255,255)
--				clickcar = Mouse.Target.Parent:FindFirstChild("ButtonRemote_SpawnButton", true)
--			end
--		end)
--		
--		repeat task.wait() until clickcar
--		clicktoselect:Disconnect()
--		
--		local a = game:GetService("Workspace").PlayerModels.ChildAdded:connect(function(v)
--			v:WaitForChild("Owner")
--			if v:WaitForChild("PaintParts") and v.Owner.Value==game.Players.LocalPlayer then
--				Car = v.PaintParts.Part
--			end
--		end)
--	
--		repeat
--			task.wait(0.45)
--			game.ReplicatedStorage.Interaction.RemoteProxy:FireServer(clickcar)
--			repeat wait() until Car ~= oldcolor
--			oldcolor = Car
--		until Car.BrickColor.Name == selectedColor or abortspawn == false
--	end)
--	
--	VehicleSec:Button("Abort Spawner", function()
--		abortspawn = false
--		wait(0.5)
--		abortspawn = true
--	end)
--end)
------------------------------------------------------------------------------






------------------------------------------------------------------------------
-- Infinite Free Sign Method
MethodsSec:Paragraph("Free sign method", "Step 1: Press free land\nStep 2: load your base\nStep 3: bring the sign to your base & repeat")
-- Maxland dupe Method
MethodsSec:Paragraph("Land Dupe Method", "Note: Remember to give your friend all perms and $100 to buy land to save duped items on this will require a new slot, overwrite one if you dont have one\nStep 1: load the base you want to dupe on\nStep 2: when items start to appear in your middle plot leave 2 secs before you teleport\nStep 3: if the items are still on the middle plot you did it correctly\nStep 4: have your friend goto land store with the 100 and buy the plot\nStep 5: after buying the plot, reload the new slot items should save")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- FAQ / Support
-----------------------------------------------------------------------------
local function sendWebhook(ReportBug)
    local message = {
        ["color"] = 16711680, -- red color
        ["title"] = "Reported Bug Information",
        ["description"] = "Report sent by " .. displayName .. " (" .. username .. ") for Lumber Tycoon 2.",
        ["fields"] = {
            {
                ["name"] = "Time",
                ["value"] = GetTime(),
                ["inline"] = true
            },
            {
                ["name"] = "Place ID",
                ["value"] = placeId,
                ["inline"] = true
            },
            {
                ["name"] = "Executor",
                ["value"] = executor,
                ["inline"] = true
            },
            {
                ["name"] = "Bug",
                ["value"] = ReportBug,
                ["inline"] = false
            }
        }
    }
    local request = http_request or request or (syn and syn.request)
    local webhook3 = "https://discord.com/api/webhooks/1076281322877751316/n-T1b1RD8m_R8X9pPPLiiv8Ap-s9KAkrumisrA08p1vts34ddnXdyAuvEllxcTHE1rOB"-- Discord Channel Webhook
    local success, response = pcall(request, {
        Method = "POST",
        Url = webhook3,
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode({
            username = "[Nightfall] Bug Reports",
            embeds = {message}
        })
    })
    if success then
        library:Notify("Bug Report", "Bug report sent successfully!")
        print("Bug report sent successfully!")
    else
        library:Notify("Report a bug", "Error sending report: " .. response .. "")
        warn("Error sending report:", response)
    end
end

-- create the TextBox for bug reporting
HelpSec:TextBox("Report Bug Here:", "", function(Value)
    if Value ~= "" then -- check if the report is not empty
        -- Progress bar
        local ReportBugProgress = library:ProgressBar("Reporting Bug", 100)
        -- Progress bar Counter
        for i = 1, 100 do
            ReportBugProgress:Update(1)
            wait(0.0001)
        end
        -- send the bug report via webhook
        sendWebhook(Value)
    else
        library:Notify("Bug Report", "Please enter a bug report before submitting.")
    end
end)

-- add a label to show the user the format to use
HelpSec:Label("Example: total axe count is wrong")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Request Feature
local function sendWebhook(RequestFeature)
    local message = {
				["color"] = 65535, -- cyan color
        ["title"] = "Requested Feature Information",
        ["description"] = "Request sent by " .. displayName .. " (" .. username .. ") for Lumber Tycoon 2.",
        ["fields"] = {
            {
                ["name"] = "Time",
                ["value"] = GetTime(),
                ["inline"] = true
            },
            {
                ["name"] = "Place ID",
                ["value"] = placeId,
                ["inline"] = true
            },
            {
                ["name"] = "Executor",
                ["value"] = executor,
                ["inline"] = true
            },
            {
                ["name"] = "Request",
                ["value"] = RequestFeature,
                ["inline"] = false
            }
        }
    }
    local request = http_request or request or (syn and syn.request)
    local webhook3 = "https://discord.com/api/webhooks/1076307896171774063/xdQ4RPhddzN7V2vX397cf31FUYJfHOdjSVkRRSX6LTv2oqUM3QFZroIW9o_4pWsk7GKI"-- Discord Channel Webhook
    local success, response = pcall(request, {
        Method = "POST",
        Url = webhook3,
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode({
            username = "[Nightfall] Feature requests",
            embeds = {message}
        })
    })
    if success then
        library:Notify("Feature Request", "Feature request sent successfully!")
        print("Feature request sent successfully!")
    else
        library:Notify("Feature Request", "Error sending report: " .. response .. "")
        warn("Error sending request:", response)
    end
end

-- create the TextBox for bug reporting
HelpSec:TextBox("Request Feature Here:", "", function(Value)
    if Value ~= "" then -- check if the report is not empty
        -- Progress bar
        local FeatureRequestProgress = library:ProgressBar("Sending Request", 100)
        -- Progress bar Counter
        for i = 1, 100 do
            FeatureRequestProgress:Update(1)
            wait(0.0001)
        end
        -- send the bug report via webhook
        sendWebhook(Value)
    else
        library:Notify("Error", "Please enter a request before submitting.")
    end
end)
HelpSec:Label("Example: Could you add a color picker for cars?") 

------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Nightfall Documentation
HelpSec:Button("Nightfall Documentation", function()
library:Notify("Notice", "The Documentation For Nightfall has been copied to your clipboard, paste it in a browser", false)-- Copy Key
local textToCopy = "https://itsecstasy.github.io/Nightfall/"
setclipboard(textToCopy)
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- labels to help users identity what others can see or not
FunCSSec:Label("Client-Sided means no players can see")
FunNCSSec:Label("Non Client-Sided meaans all players can see") 
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Reset Character
FunSec:Button("Reset Character", function ()
-- Method 1
game.Players.LocalPlayer.Character.Head:Destroy()
-- Method 1
--game.Players.LocalPlayer.Character:BreakJoints()
-- Method 3
--game.Players.LocalPlayer.Character.:FindFirstChild("Humanoid").Health = 0
end)
FunSec:Label("To remove any of the fun options you must reset character")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Float,sprint,sezier FE
FunNCSSec:Button("Float/Seizure Animations (press again to disable)", function()

library:Notify("Float/Seizure Animations", "Press 'V' to sprint, 'X' to float, 'C' to have a seizure and 'Z' to normalize humanoid - credits to TheScatRat!", true)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/374add11737cc1128cc4308e21703c0e/raw/027fa587b6f5a56baacc97e36596df3234965043/Float%2520x%2520Seizure%2520Animations')))()
end)
FunNCSSec:Label("Do not use when gymnastics is enabled")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- FE Zen 
FunNCSSec:Button("FE Zen", function()
   
   library:Notify("FE Zen", "To add orbs around you that others can see, you must buy and wear the item copied to the clipboard before pressing!", false)
   local textToCopy = "https://www.roblox.com/catalog/5703072943/Orbs-of-Honesty"
   setclipboard(textToCopy)
   loadstring(game:HttpGet(("https://gist.github.com/ItsEcstasy/6bac8925c35f08877fa83287c98a5f36/raw/75ce3e9cc7abb2bc663e5a605070b53b49a4d607/FE%2520Zen"),true))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Power Wings
FunNCSSec:Button("Power Wings", function()

library:Notify("Power Wings", "1-9 to cycle between & left click to attack! - players can only see body animations", false)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/34afbf242e42f9171a40dfd3a178d14b/raw/2fcf2d52ad2b525a4b534948407d6aa462318769/Power%2520Wings')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
--  Limp Walk
FunCSSec:Button("Limp Character", function()
character = game:GetService("Players").LocalPlayer.Character
rootJoint = character.HumanoidRootPart.RootJoint
rightLeg = character:FindFirstChild("Right Leg") or character:FindFirstChild("LowerRightLeg")
rootJoint.Part0 = character["Right Leg"]
rootJoint.Part1 = character.HumanoidRootPart
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
FunNCSSec:Button("Remove Arms", function()
-- Remove Arms
character = game:GetService("Players").LocalPlayer.Character

--R6 Rigs
leftArm = character:FindFirstChild("Left Arm")
if leftArm then leftArm:Destroy() end
rightArm = character:FindFirstChild("Right Arm")
if rightArm then rightArm:Destroy() end

--R15 Rigs
leftUpperArm = character:FindFirstChild("LeftUpperArm")
if leftUpperArm then leftUpperArm:Destroy() end
leftLowerArm = character:FindFirstChild("LeftLowerArm")
if leftLowerArm then leftLowerArm:Destroy() end
leftFoot = character:FindFirstChild("LeftFoot")
if leftFoot then leftFoot:Destroy() end
rightUpperArm = character:FindFirstChild("RightUpperArm")
if rightUpperArm then rightUpperArm:Destroy() end
rightLowerArm = character:FindFirstChild("RightLowerArm")
if rightLowerArm then rightLowerArm:Destroy() end
rightFoot = character:FindFirstChild("RightFoot")
if rightFoot then rightFoot:Destroy() end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
FunNCSSec:Button("Remove Legs", function()
	character = game:GetService("Players").LocalPlayer.Character

	--R6 Rigs
	leftLeg = character:FindFirstChild("Left Leg")
	if leftLeg then leftLeg:Destroy() end
	rightLeg = character:FindFirstChild("Right Leg")
	if rightLeg then rightLeg:Destroy() end
	
	--R15 Rigs
	leftUpperLeg = character:FindFirstChild("LeftUpperLeg")
	if leftUpperLeg then leftUpperLeg:Destroy() end
	leftLowerLeg = character:FindFirstChild("LeftLowerLeg")
	if leftLowerLeg then leftLowerLeg:Destroy() end
	leftFoot = character:FindFirstChild("LeftFoot")
	if leftFoot then leftFoot:Destroy() end
	rightUpperLeg = character:FindFirstChild("RightUpperLeg")
	if rightUpperLeg then rightUpperLeg:Destroy() end
	rightLowerLeg = character:FindFirstChild("RightLowerLeg")
	if rightLowerLeg then rightLowerLeg:Destroy() end
	rightFoot = character:FindFirstChild("RightFoot")
	if rightFoot then rightFoot:Destroy() end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Phusics Gun v3
FunCSSec:Button("Physics gun v3", function()
loadstring(game:HttpGet(('https://gist.githubusercontent.com/bart3876478326746387/285ede5179a8787b175f3c9c212986dc/raw/9acf48c510d00319aa98e30311c0e04a84adf537/PHYSICS%2520GUN%2520V2%2520(DRAG%2520KO%2520PEOPLE'), true))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Fun Snake
FunNCSSec:Button("Become a Snake", function()
loadstring(game:HttpGet(('https://pastefy.ga/tWBTcE4R/raw'),true))()
end)
FunNCSSec:Label("Snake may delay death respawn")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Fun Lego Land
FunCSSec:Button("Lego Land", function()
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/96de68bb71475d342da3ff9c044d301d/raw/6a6b6830bed903c53205f006d43577e371492c10/Lego%2520land'), true))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Minecraft Builder
FunCSSec:Button("Minecraft",function()
library:Notify("Building Controls", "Press 'Q' to crouch and 1-6 to cycle through blocks, to delete user an empty slot!", true)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/14504bf458a28e1476acdd04bc1e3e19/raw/632abcd29a13ce9d3f6c3b579441ce92f3785ba2/Minecraft%2520Builder')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Minecraft Builder
FunCSSec:Button("Clock Tower",function()
	library:Notify("Something Spawned!", "Woah A Clock Tower Appears From Thin Air, What's inside?!", false)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/b7312a040e0b46e6a10998019289bd4d/raw/ed39482578f8c46251e68c1f3f80f858a95079e7/Magical%2520Tower')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
   -- Battery Flashlight
FunCSSec:Button("Battery Flashlight",function()
library:Notify("Woah There", "Looks like you found a battery flashlight!", false)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/1f29ce4ffe44bab235b9b36b48d628ba/raw/cda9079304186c9bb6d09161ed4605826734cba3/Battery%2520flashlight')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Pee Script | made by credit
FunCSSec:Button("Pee Script",function()
	library:Notify("Woah There", "Looks like you gotta take a leak!", false)
	loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/4ae6886fc489f33d2315eb729f3fa75d/raw/ee1040cb8d6883e9fb4787800883e16f78725749/Pee%2520Script')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Gymnastics
FunNCSSec:Button("Gymnastics",function()
library:Notify("Woah There", "Where did you learn those moves! | 'Z' to front flip, 'X' to backflip, 'C' to jump", false)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/9baeec94b65c57edafa9c8cde34f9f7b/raw/cfc10eb79d9c03e5b04532d8f4cc81c6d6cafbd2/Gymnastic%2520Flips')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Thomas The Dank Engine:
--[[
	By: KrystalTeam | ty krystalburger
	Features: Being a dank engine that kill people
	Version: 1.0.0.2
--]]
FunCSSec:Button("Thomas The Tank",function()
   
   library:Notify("A Legendary Tale", "Legend has it that a train engine that kills people it runs them over, have you seen it?", false)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/e6c359eeb03088797ded2a780cb0e23e/raw/cb84d6bdb19d639b1cbd7df3ff8ff838c264d728/Thomas%2520Train')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Spray Can
------------------------------------------------------------------------------
FunCSSec:Button("Spray Can",function()
 	library:Notify("Woah There", "Looks like you found a spray can! | press 'e' to change the colors", false)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/ca3e464105a658ce0c92c7a1bc6f9805/raw/6acd58597c1843e20f68db8d8fb7eb8c521f642c/Spray%2520can')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Police Morph
------------------------------------------------------------------------------
FunCSSec:Button("Police Morph",function()
library:Notify("Halt!", "go make some arrests!", false)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/233ea1d151c4f9f12ea7a130f1b22667/raw/05e9cd4363860bb1d093bc35c9e880ba0ff5887a/Police%2520Morph')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Soda Can
------------------------------------------------------------------------------
FunNCSSec:Button("Soda Can",function()
library:Notify("Phew", "After all this work cutting, get a refreshing drink | Player can only see the missing arm you'll get!", false)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/6fe32d034e1fdf00da16ccef281a2609/raw/57c3884e44ddfce44e49ce42ef36073f14a92e92/Soda%2520Can%2520Code')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Hoverboard
------------------------------------------------------------------------------
FunNCSSec:Button("Hoverboard",function()
library:Notify("Fun Fact:", "Players will only see you float without the hoverboard!", false)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/db9dc670a35e6efa315597c90a405236/raw/c05529c2bad0e78a61379b9d7b0843d4f42ac552/Hoverboard%2520code')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Grief Tab
------------------------------------------------------------------------------


------------------------------------------------------------------------------
-- Blacklist Bypass
------------------------------------------------------------------------------
-- Blacklist Bypass
local BLBypassRequirements = {
    Vars = {
        OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame,
        HRP = game.Players.LocalPlayer.Character.HumanoidRootPart,
        Char = game.Players.LocalPlayer.Character,
        PlrTorso = game.Players.LocalPlayer.Character.Torso,
        Head = game.Players.LocalPlayer.Character.Head,
        Mouse = game.Players.LocalPlayer:GetMouse(),
    },
    Strings = {
        AntiBLClone = nil,
    },
    Funcs = {},
}

BLBypassRequirements.Funcs.DestroyBLWalls = function()
    for i,v in pairs(game:GetService("Workspace").Effects:GetChildren()) do
        if v.Name == "BlacklistWall" then
            v:Destroy()
        end
    end
end

BLBypassRequirements.Funcs.AntiBL = function()
    BLBypassRequirements.Funcs.DestroyBLWalls()
    game:GetService("Workspace").Effects.ChildAdded:Connect(function(v)
        if v.Name == "BlacklistWall" then
            BLBypassRequirements.Funcs.DestroyBLWalls()
        end
    end)
    BLBypassRequirements.Vars.Char = game.Players.LocalPlayer.Character
    BLBypassRequirements.Vars.PlrTorso = game.Players.LocalPlayer.Character.Torso
    BLBypassRequirements.Strings.AntiBLClone = BLBypassRequirements.Vars.PlrTorso:Clone()
    BLBypassRequirements.Vars.Char.HumanoidRootPart:Destroy()
    BLBypassRequirements.Vars.PlrTorso.Name = "HumanoidRootPart"
    BLBypassRequirements.Vars.PlrTorso.Transparency = 1
    BLBypassRequirements.Strings.AntiBLClone.Parent = BLBypassRequirements.Vars.Char
    BLBypassRequirements.Strings.AntiBLClone.Transparency = 0
end

GriefSec:Button("Blacklist bypass", function()
	library:Notify("Bypass activated", "Reset to remove")
    BLBypassRequirements.Funcs.AntiBL()
end)
------------------------------------------------------------------------------


------------------------------------------------------------------------------
-- Blacklist bypass v2
--GriefSec:Button("Blacklist Bypass v2", function DestroyBLWalls()
--    for i,v in pairs(game:GetService("Workspace").Effects:GetChildren()) do
--        if v.Name == "BlacklistWall" then
--            v:Destroy()
--        end
--    end
--end
--
--function AntiBL()
--    DestroyBLWalls()
--    game:GetService("Workspace").Effects.ChildAdded:Connect(function(v)
--        if v.Name == "BlacklistWall" then
--            DestroyBLWalls()
--        end
--    end)
--    Char = game.Players.LocalPlayer.Character
--    PlrTorso = game.Players.LocalPlayer.Character.Torso
--    AntiBLClone = PlrTorso:Clone()
--    Char.HumanoidRootPart:Destroy()
--    PlrTorso.Name = "HumanoidRootPart"
--    AntiBLClone.Parent = Char
--    AntiBLClone.Transparency = 1
--end
--AntiBL()
--end)
------------------------------------------------------------------------------


------------------------------------------------------------------------------
-- Pull Everything
GriefSec:Button("Pull Everything", function()
library:Notify("Grief Players", "Walk up to stores to bring items/ walk up to player bases to move their items/wood | WONT ALWAYS WORK IF NOT ALLOWED ON THEIR BASE", false)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/91d1aa7555e699054fbceb7c0051b3a0/raw/6bb2ab46edf2b9e39166c9cd726c11e64a9592d3/Pull%2520everything')))()
end)
GriefSec:Label("This effects store items, player planks, player axes, etc.")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Throw Items Forward
GriefSec:Button("Throw Everything", function()
library:Notify("Grief Players", "Launched all nearby items that you pulled", false)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/7b88d0debb0a5e1d4261d2fd47ba8d07/raw/c8120428f2c08d0173ec08038dc07df667bf3b80/Throw%2520everything')))()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Tomahawk axe fling - by silent
Requirements.Funcs.TomahawkAxeFling = function(Value)
    if not Value then
        if Requirements.Connections.ToolAdded then
            Requirements.Connections.ToolAdded:Disconnect()
        end
        if Requirements.Connections.AxeFling then
            Requirements.Connections.AxeFling:Disconnect()
        end
        return
    end
        if not Value then Requirements.Connections.ToolAdded:Disconnect() Requirements.Connections.AxeFling:Disconnect() return end
        Requirements.Connections.ToolAdded = game.Workspace.PlayerModels.ChildAdded:Connect(function(v)
            if v:WaitForChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
                if v:WaitForChild("Main") and v:WaitForChild("ToolName") then
                    Requirements.Strings.SelectedTool = v
                    local BodyAngularVelocityAdded = Instance.new("BodyAngularVelocity",v.Main)
                    local BodyPos = Instance.new("BodyPosition",v.Main)
                    BodyPos.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
                    BodyPos.Position = Requirements.Strings.ThrowPos
                    BodyPos.P = 1000000
                    BodyAngularVelocityAdded.P = 9e9
                    BodyAngularVelocityAdded.MaxTorque = Vector3.new(0,9999999,0)
                    BodyAngularVelocityAdded.AngularVelocity = Vector3.new(0,9999999,0)
                    BodyAngularVelocityAdded.P = 9999999
                    repeat
                        if not Requirements.Strings.SelectedTool:FindFirstChild("Main") then break end
                        game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Requirements.Strings.SelectedTool)
                        v.Main.CFrame = CFrame.new(Requirements.Strings.ThrowPos) * CFrame.Angles(math.rad(20*Requirements.Strings.AxeRotation),0,0)
                        Requirements.Strings.AxeRotation = Requirements.Strings.AxeRotation + 1
                        task.wait(0.5)
                    until (game.Players.LocalPlayer.Character.Head.CFrame.p - Requirements.Strings.SelectedTool:WaitForChild("Main").CFrame.p).Magnitude >= 15 or Requirements.Strings.AxeRotation >= 40
                    game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(Requirements.Strings.SelectedTool,"Pick up tool")
                                    game:GetService"Players".LocalPlayer.Character:WaitForChild"Tool"
                                    game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                    Requirements.Booleans.SelectedTool = nil
                end
            end
        end)
        Requirements.Connections.AxeFling = Requirements.Vars.Mouse.Button1Up:Connect(function()
            if not game.Players.LocalPlayer.Backpack:FindFirstChild("Tool") then
                return library:Notify("Error!","Failed to find axe")
            end
            Requirements.Strings.AxeRotation = 0
            Requirements.Strings.ThrowPos = Requirements.Vars.Mouse.Hit.p
            game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(game.Players.LocalPlayer.Backpack:FindFirstChild("Tool"),"Drop tool",game.Players.LocalPlayer.Character["Right Arm"].CFrame - Vector3.new(5,0,0))
        end)
    end

GriefSec:Toggle("Tomahawk Axe Fling", false, function(Value)
    Requirements.Funcs.TomahawkAxeFling(Value)
end)
------------------------------------------------------------------------------





------------------------------------------------------------------------------
-- Clear shop items
Requirements.Funcs.ClearShopItems = function()
    while Requirements.Booleans.ClearShopItems do
        for i,v in next, game:GetService("Workspace").Stores:GetChildren() do
            if v:IsA"Model" and v.Name == "ShopItems" then
                for i,v in next, v:GetChildren() do
                    if v:FindFirstChild"Owner" and v.Owner.Value == nil then
                        v.Main.CanCollide = false
                    end
                end
            end
        end
        task.wait()
    end
end

GriefSec:Toggle("Clear Shop Items",false,function(Value)
    Requirements.Booleans.ClearShopItems = Value
    if Value then Requirements.Funcs.ClearShopItems() end
end)
------------------------------------------------------------------------------





------------------------------------------------------------------------------
-- fling | testing - infinite yield's
--GriefSec:Toggle("Fling On/Off", false, function(state)
--    flinging = state
--    if flinging then
--        for _, child in pairs(speaker.Character:GetDescendants()) do
--            if child:IsA("BasePart") then
--                child.CustomPhysicalProperties = PhysicalProperties.new(math.huge, 0.3, 0.5)
--            end
--        end
--        toggleNoClip()
--        wait(.1)
--        local bambam = Instance.new("BodyAngularVelocity")
--        bambam.Name = randomString()
--        bambam.Parent = getRoot(speaker.Character)
--        bambam.AngularVelocity = Vector3.new(0,99999,0)
--        bambam.MaxTorque = Vector3.new(0,math.huge,0)
--        bambam.P = math.huge
--        local Char = speaker.Character:GetChildren()
--        for i, v in next, Char do
--            if v:IsA("BasePart") then
--                v.CanCollide = false
--                v.Massless = true
--                v.Velocity = Vector3.new(0, 0, 0)
--            end
--        end
--        flinging = true
--        flingDied = speaker.Character:FindFirstChildOfClass('Humanoid').Died:Connect(function()
--            Grief:SetToggle("Fling On/Off", false)
--        end)
--        repeat
--            bambam.AngularVelocity = Vector3.new(0,99999,0)
--            wait(.2)
--            bambam.AngularVelocity = Vector3.new(0,0,0)
--            wait(.1)
--        until flinging == false
--    else
--        execCmd('clip')
--        if flingDied then
--            flingDied:Disconnect()
--        end
--        flinging = false
--        wait(.1)
--        local speakerChar = speaker.Character
--        if not speakerChar or not getRoot(speakerChar) then return end
--        for i,v in pairs(getRoot(speakerChar):GetChildren()) do
--            if v.ClassName == 'BodyAngularVelocity' then
--                v:Destroy()
--            end
--        end
--        for _, child in pairs(speakerChar:GetDescendants()) do
--            if child.ClassName == "Part" or child.ClassName == "MeshPart" then
--                child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
--            end
--        end
--    end
--end)

------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Throw at nearby player
------------------------------------------------------------------------------
--GriefSec:Button("Throw at Player (testing)", function()
--   
--   library:Notify("Grief Players", "Get close to player by their base to throw their items at them| May not work if not allowed on their base", false)
--   
--   -- Throw Items Code
--   local throwableItems = {}
--   local movers = {}
--   
--   for index, item in pairs(workspace:GetDescendants()) do
--	   if item:IsA("Part") and item.Anchored == false and item:IsDescendantOf(LocalPlayer.Character) == false then
--		   table.insert(throwableItems, item)
--		   item.Massless = true
--		   item.CanCollide = true
--		   if item:FindFirstChildOfClass("BodyVelocity") ~= nil then
--			   item:FindFirstChildOfClass("BodyVelocity"):Destroy()
--		   end
--	   end
--   end
--   
--   for index, item in pairs(throwableItems) do
--	   local mover = Instance.new("BodyVelocity", item)
--	   table.insert(movers, mover)
--	   mover.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
--	   mover.Velocity = (LocalPlayer.Character.HumanoidRootPart.Position - item.Position).unit * 500
--   end
--   
--   wait(1)
--   
--   for _, mover in pairs(movers) do
--	   mover:Destroy()
--   end
--end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - GUI Settings
------------------------------------------------------------------------------
-- themes
--local Settings = {}
--Settings.Theme = {} -- Define Settings.Theme table
--
--local function updateTheme()
--  Settings.Theme = {
--    MainBackgroundColor = themes.main,
--    SecondaryBackgroundColor = themes.secondary,
--    AccentColor = themes.accent,
--    TextColor = themes.textcolor
--  }
--end
--
--local function setDefaultColor()
--  Settings.ColorPicker:SetColor(themes.accent)
--  updateTheme()
--end
--
--Settings.ColorPicker = SettingsSec:ColorPicker("Accent Color", themes.accent, function(color)
--  themes.accent = color
--  updateTheme() -- Call updateTheme after changing the accent color
--end)
--
--SettingsSec:Button("Default Accent", "Sets the accent color to the default color", function()
--  themes.accent = Color3.fromRGB(31, 31, 31)
--  setDefaultColor()
--end)
--
--setDefaultColor()
--
--SettingsSec:Label("Customize The Theme Of Nightfall")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- dark/light mode
UIModeConfig = {
    UIMode = false,
}
local Funcs = {}

local function setMenuTheme(BGColor, TxtColor)
    for _, gui in ipairs(game:GetService("Players").LocalPlayer.PlayerGui:GetChildren()) do
        if gui.Name ~= "Chat" and gui.Name ~= "TargetGui" then
            for _, v in ipairs(gui:GetDescendants()) do
                if not v:FindFirstChild("UICorner") and v:IsA("Frame") then
                    Instance.new("UICorner", v)
                end
                if v.Name == "DropShadow" then
                    v:Destroy()
                end
                if v:IsA("TextButton") or v:IsA("Frame") or v:IsA("ScrollingFrame") then
                    if v:GetFullName():find("ColdAsIce") == nil then
                        v.BackgroundColor3 = BGColor
                    end
                end
                if v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("TextBox") then
                    if v:GetFullName():find("ColdAsIce") == nil then
                        v.TextColor3 = TxtColor
                        v.BackgroundColor3 = BGColor
                        v.Font = Enum.Font.GothamMedium
                    end
                end
            end
        end
    end
end

setMenuTheme(Color3.fromRGB(225, 225, 225), Color3.fromRGB(0, 0, 0))

SettingsSec:Toggle("Dark Game Menu", UIModeConfig.UIMode, function(value)
    UIModeConfig.UIMode = value
    if UIModeConfig.UIMode then
        setMenuTheme(Color3.fromRGB(0, 0, 0), Color3.fromRGB(225, 225, 225))
    else
        setMenuTheme(Color3.fromRGB(225, 225, 225), Color3.fromRGB(0, 0, 0))
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Teleport Key
--TPKeyConfig = {
--	TeleportKey = "G",
--}
--SettingsSec:KeyBind("Teleport Key",Requirements.TPKeyConfig.TeleportKey,function(Value)
--	Requirements.TPKeyConfig.TeleportKey = Value
--	Requirements.Vars.Mouse = game.Players.LocalPlayer:GetMouse()
--	if Requirements.Vars.Mouse.Target ~= nil then
--	Requirements.Funcs.Teleport(CFrame.new(Requirements.Vars.Mouse.Hit.p) + Vector3.new(0,5,0))
--end
--end)
------------------------------------------------------------------------------


------------------------------------------------------------------------------
SettingsSec:KeyBind("Toggle UI", "RightShift", function()
	library:Toggle()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Spoof Display Name
------------------------------------------------------------------------------
SettingsSec:TextBox("Spoof Display Name:", "", function(Value)
	-- Progress bar
	local DisplayNameProgress = library:ProgressBar("Spoofing Local Display Name",100)
	-- Progress bar Counter
	for i = 1,100 do
	DisplayNameProgress:Update(1)
	wait(0.0001)
	end

	if Value and Value ~= "" and Value ~= player.Name then
	player.DisplayName = (Value)
	end
end)
SettingsSec:Label("Notice: This does not change your name for other players\nthis will also not change your name in chat")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - AntiAFK (auto jump)
------------------------------------------------------------------------------
SettingsSec:Toggle("AntiAFK", false, function(state)
    toggle = state
    if toggle then
		library:Notify("AntiAFK", "Status: Active", false)
		print("[Nightfall] AntiAFK Status: Active.")
        while toggle do
            wait(300)-- 5 mins
--          wait(math.random(1080, 1140))-- idea for random between 18-19 mins
            local BellaDelphine = game:GetService("VirtualUser")
            BellaDelphine:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
            wait(1)
            BellaDelphine:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        end
    else
		print("[Nightfall] AntiAFK Status: InActive.")
    end
end)

game:GetService("Players").LocalPlayer.Idled:Connect(function()
    if toggle then
        local BellaDelphine = game:GetService("VirtualUser")
        BellaDelphine:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        wait(1)
        BellaDelphine:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		library:Notify("[Nightfall] Prevented Roblox's attempt to kick you for inactivity.", false)
		print("[Nightfall] Prevented Roblox's attempt to kick you for inactivity.")
    end
end)

------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Player Join Notifications
------------------------------------------------------------------------------
local connections = {}

SettingsSec:Toggle("Player Join/Leave Notifications", true, function(state)
    if state then
        -- Player Join Notification
        connections[1] = game:GetService("Players").PlayerAdded:Connect(function(player)
            updatePlayerList()
            library:Notify("Player Joined", player.DisplayName.." has joined the game")
            if player:IsFriendsWith(game:GetService("Players").LocalPlayer.UserId) then
                library:Notify("Friend Joined", "Your friend "..player.DisplayName.." has joined the game")
            end
        end)
        -- Player Leave Notification
        connections[2] = game:GetService("Players").PlayerRemoving:Connect(function(player)
            updatePlayerList()
            library:Notify("Player Left", player.DisplayName.." has left the game")
            if player:IsFriendsWith(game:GetService("Players").LocalPlayer.UserId) then
                library:Notify("Friend Left", "Your friend "..player.DisplayName.." has left the game")
            end
        end)
    else
        if #connections > 0 then -- Check if connections table is not empty
            for _, connection in ipairs(connections) do
                connection:Disconnect()
            end
            connections = {}
        end
    end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Fun Facts toggle
------------------------------------------------------------------------------
local toggle = false
local notificationLoop
local shouldStopNotifications = false

SettingsSec:Toggle("Periodic Fun Facts", false, function(state)
   toggle = state
   if toggle then
	   shouldStopNotifications = false
	   -- Load Orion library for notification
	   local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
	   
	   -- Array of notifications
   local tips = {
	"discord.gg/ToadsKingdom is an amazing free script for building by Toad himself",
	"Ecstasy/Nix makes music!",
	"Ecstasy/Nix Spent 80+ hours on the 1.7 update!",
	"Nightfall has a documentation webpage: itsecstasy.github.io/Nightfall",
	"Nightfall is Ecstasy/Nix's first GUI and was started on 1/3/23",
	"Lumber Tycoon came out 14 years ago!",
	"Nightfall has a discord server: dsc.gg/NightfallLT2!",
	"The oldest gift in the game is the fire present!",
	"The richest tree sawmilled & unsawmilled is end times!",
	"The Basic hatchet does 0.2 damage?!",
	"The Alpha Axe of Testing was only 500 when game was in alpha!",
	"The fire axe does 8.12 damage to lava wood but 0.4 to any others!",
	"The Many Axe is the Strongest and does 10.2 damage!",
	"The Lumberman's Axe, stone axe and gold axe are unobtainable!",
	"The End Times Axe's box was not meant to be obtained for players and was only found on Defaultio's land. Some players had obtained it when someone had found a moderation bug and began duplicating the box. Defaultio was notified of this and proceeded to punish those who had the forbidden box, making the box's design what it is today. A similar design is also seen on Rukiryaxe and Beesaxe boxes!",
	"The Overgrown Axe could be obtained from the Murky Gift of Goo, It was available at Wood R Us on December 18th during the 2021 Christmas Event. The axe is most effective on Zombie Wood and Gold Wood.!",
	"Lumberman is the NPC that appears on the Lumber Tycoon 2 thumbnail and is exclusively found within the game's files. If one were to move Lumberman from Lighting to Workspace, they'd notice that Lumberman actually has dialogue similar to Thom's, Corey's, and Jenny's dialogue. Unlike the other existing Npcs, it has animations that are from 2006!",
	"The Wobblebobble is based on a Roblox hat called 'Bighead'!",
	"The Wobblebobble has several colors like red, purple, green, teal, and orange!",
	"The End times tree came out in 2016!",
	"The Gingerbread Axe is for Koa wood!",
	"The Candy Cane Axe was added by Defaultio in 2016 as a joke and does 0 damage!",
	"The Twitter Axe, is an exclusive axe that was available from January 13th to June 9th, 2019, that could be obtained by purchasing a Silver Axe and bringing it to be blessed by the Bird, which could only be done if the player followed Defaultio on Twitter, and completed the other requirements!",
	"Vector is winning!",
	"The Beesaxe gift from the 2017's beesmas event",
	"The Candy Corn axe doesn't have a specified tree and was made by the wiki user SMALLSOPE42.",
	"The Twitter axe does similar damage as the Beta Axe of Bosses, with the exception of its usage on Lava Wood and Cavecrawler Wood. It is arguably better than the Amber Axe.",
	"The Rukiryaxe was named after the Roblox user Rukiryo (Abstract_Alex now), who is also one of the Den members. The Boxed versions of this axe does exist (CHEATED FOR THIS BOX) but was not created by the Defaultio.",
	"The Beta Axe of Bosses is a rare axe that was purchasable at Wood R Us for $1,100 as a special feature that was only obtainable only during LT2's beta testing stage.",
	"Cavecrawler wood, also known as Blue Wood, is a wood type that grows exclusively in the Cavecrawler Cavern, within the Maze. It was added during the January Mega Update.",
	"Phantom wood, also known as End Times Wood or Lone Cave Tree is a species of wood that was added during the 2016 End Times Update. It is located in the Lone Cave and is the most expensive wood in the game when sold at the Wood Dropoff.",
	"The chop saw does not do any damage to End times wood surprisingly, Dynamite can do damage to the tree but it is incredibly minimal.",
	"Frost wood, commonly referred to as Ice Wood, is the only type of wood that grows at the Taiga Peak. It was added to the game on May 13th, 2018, finally making use of the Taiga Mountain Passage. In the Changelog, Defaultio wrote `Let's get icy` to mark its addition and to bring players to the Taiga biome",
	"Frost wood can be cut with all axes, with the exception of the Candy Cane Axe",
	"Snowglow wood is more expensive compared to other types of wood in the game (besides end times)",
}
	   
	   -- Function to show a random tip from the array
	   function makeTip()
		   if shouldStopNotifications then
			   return
		   end
		   
		   local tipIndex = math.random(1, #tips)
		   local tip = tips[tipIndex]
		   OrionLib:MakeNotification({
			   Name = "Fun Fact",
			   Content = tips[tipIndex],
			   Image = "rbxassetid://6031071056",
			   Time = 15,
		   })
	   end
	   
	   -- Loop to show notifications every 30 seconds
	   notificationLoop = coroutine.wrap(function()
		   while true do
			   makeTip()
			   wait(30) -- delay per notification
		   end
	   end)
	   notificationLoop()
	   
	   -- Initialize the Orion library
	   OrionLib:Init()
   else
	   -- Stop the notification loop
	   if notificationLoop then
		   shouldStopNotifications = true
	   end
   end
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Total Players & Friends In Server
------------------------------------------------------------------------------
-- Section for notifications
local serverinfo = {
    totalPlayers = game:GetService("Players").NumPlayers,
    totalFriends = 0
}

for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
    if player:IsFriendsWith(game:GetService("Players").LocalPlayer.UserId) then
		serverinfo.totalFriends = serverinfo.totalFriends + 1
	end
end

SettingsSec:Button("View Server Players and Friends", function()
    library:Notify("Server Players and Friends", "there are "..serverinfo.totalPlayers.." player(s) & "..serverinfo.totalFriends.." friend(s) In the server")
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # -- DestroyUI
------------------------------------------------------------------------------
SettingsSec:Button("Destroy UI", function()
	local DestroyUIProgress = library:ProgressBar("Destroying UI",15)
	for i = 1,15 do
		DestroyUIProgress:Update(i)
		wait(0.0001)
	end
	library:Destroy()
end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # - Theme Tab
------------------------------------------------------------------------------
-- Define the buttons
--ThemeSec:Button("Default Theme", function()
--    library:SetTheme("Default")
--end)
--
--ThemeSec:Button("Cherry Blossom Theme", function()
--    library:SetTheme("CherryBlossom")
--end)
--
--ThemeSec:Button("Sky Blue Theme", function()
--    library:SetTheme("SkyBlue")
--end)
------------------------------------------------------------------------------






------------------------------------------------------------------------------
--[[
-- Dev Command to copy roblox console log
SettingsSec:Button("Copy Console Log (in dev)", function()
    -- Progress bar
    local CopyLogProgress = library:ProgressBar("Copying Log", 15)

    -- Progress bar Counter
    for i = 1, 15 do
        CopyLogProgress:Update(i)
        wait(0.0001)
    end

    local log = ""
    local connection = nil

    local function OnNewMessage(message, messageType)
        if messageType == Enum.MessageType.MessageOutput 
        or messageType == Enum.MessageType.MessageInfo 
        or messageType == Enum.MessageType.MessageWarning
        or messageType == Enum.MessageType.MessageError then
            log = log .. message .. "\n"
        end
    end

    connection = game:GetService("LogService").MessageOut:Connect(OnNewMessage)
    game:GetService("RunService").Stepped:Connect(function()
        if not connection.Connected then
            return
        end

        if #log > 2000 then
            log = log:sub(#log - 2000)
        end
    end)
        setclipboard(log)
        library:Notify("Copy Console Log", "The log has been copied to the clipboard.")
    end)
	]]
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- // # Fun Built In Games | https://pastebin.com/AUKFCz1J
------------------------------------------------------------------------------
-- Set the maximum number the answer can be chosen from
--local function handleGuessInput()
--    local coroutineRunningGuessInput = nil
--    local coroutineGuessInputResult = nil
--    coroutineRunningGuessInput = coroutine.create(function()
--        FunGamesSec:TextBox("Guess a number:", "", function(GuessingGameAnswer)
--            if type(GuessingGameAnswer) == "number" then
--                coroutineGuessInputResult = GuessingGameAnswer
--            end
--            coroutine.resume(coroutineRunningGuessInput)
--        end)
--    end)
--    coroutine.resume(coroutineRunningGuessInput)
--    coroutine.yield()
--    return coroutineGuessInputResult
--end
--
--local function startGame()
--    -- Notify user game has started
--    library:Notify("Game Started", "You Started Playing The Guessing Game")
--
--    -- Game initialization
--    math.randomseed(os.time())
--    local game = {
--        maxNumber = 100,
--        answer = math.random(10, 100),
--        guessnum = 0,
--    }
--
--    -- Display game header
--    FunGamesSec:Label(" Welcome " .. displayName .. " To The Guessing Game!")
--
--    -- Start game loop
--    while true do
--        -- Get user input
--        local guess = nil
--        local coroutineRunningGuessInput = coroutine.create(handleGuessInput)
--        coroutine.resume(coroutineRunningGuessInput)
--        guess = coroutine.resume(coroutineRunningGuessInput)
--
--        -- Process user input
--        if guess == nil then
--            break
--        elseif guess > game.answer then
--            library:Notify("Almost There!", "Lower!")
--            print("Lower!")
--        elseif guess < game.answer then
--            library:Notify("Almost There!", "Higher!")
--            print("Higher!")
--        else
--            library:Notify("Congratulations!", "You guessed right!!!")
--            print("Congratulations! You guessed right!!!")
--            break
--        end
--
--        game.guessnum = game.guessnum + 1
--
--        if guess == game.backdoor then
--            library:Notify("Found the backdoor hey?", "the answer is: " .. game.answer .. "")
--            print("Found the backdoor hey?, the answer is: " .. game.answer)
--        end
--    end
--
--    -- Notify user of game outcome
--    library:Notify("Guessing Game", "It took you " .. game.guessnum .. " guesses!")
--    wait(2)
--    startGame()
--    library:Notify("Guessing Game", "Game restarted")
--end
--
--local success, err = pcall(startGame)
--
--if not success then
--    print("Error: " .. err)
--end
--
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- calcualtor | rewrite my old batch one https://pastebin.com/1pKzhSQE
--MiscSec:Button("Calculator (in dev)", function()
-- Notify user game has started
--local calculatoranswer = ""
--library:Notify("Calulator", "The Answer is: " .. calculatoranswer .. "")
--end)
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Credits
CreditSec:Paragraph("Developers:", "Ecstasy/Nix Nightfall Developer\nSilent: Custom UI library developer\nMega: Discord / Project Advisor")
CreditSec:Paragraph("Special Thanks", "Beta Testers: For pointing out the bugs\nSilent: Inspiration for middle plot dupe\nCredit: Made the Pee script")
CreditSec:Paragraph("Respective Script Developers:", "Depr1: Made the minecraft builder\nkash5: Made the Magical Tower\nDepr1: Made the minecraft builder\nkash5: Made the Magical Tower\nTheLondiux: Free camera")
--CreditSec:Label("2323")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Changelogs
--SoonFeatureSec:Label("Fixed item sorter list")
SoonFeatureSec:Label("Axe dupe")
SoonFeatureSec:Label("More car options")
SoonFeatureSec:Label("Update follow player, Spectate player, TP to player\nand TP To player base to update dynamically")
SoonFeatureSec:Label("More item sorters")

-- Newest Features
--NewFeatureSec:Label("3/4/23: Added A Guessing Game | testing")
--NewFeatureSec:Label("3/4/23: Added Games Tab | removed til testing complete")
NewFeatureSec:Label("3/17/23: Reduced UI Load Delay")
NewFeatureSec:Label("3/11/23: Renamed Better Water To Realstic Water")
NewFeatureSec:Label("3/11/23: Added Realistic Grass Back")
NewFeatureSec:Label("3/11/23: Added Transparency To Better Water")
NewFeatureSec:Label("3/11/23: Renamed Better Water Color To Better Water")
NewFeatureSec:Label("3/11/23: Added Water Float to Misc")
NewFeatureSec:Label("3/10/23: Added Tomahawk Axe Fling To Grief")
NewFeatureSec:Label("3/10/23: Added Clear Shop To Grief")
NewFeatureSec:Label("3/5/23: Added Spook Vision To World")
NewFeatureSec:Label("3/5/23: Renamed No Fog To Clear Fog")
NewFeatureSec:Label("3/5/23: Added Toggle switch to always day/night")
NewFeatureSec:Label("3/4/23: Added Flight Speed Slider")
NewFeatureSec:Label("3/4/23: Added Player Flight")
NewFeatureSec:Label("3/4/23: Added Item Autobuy")
NewFeatureSec:Label("3/4/23: Added Links Logic Counter Autobuy")
NewFeatureSec:Label("3/4/23: Added Fancy Furnishing Counter Autobuy")
NewFeatureSec:Label("3/3/23: Added Normal Map Theme")
NewFeatureSec:Label("3/3/23: Added Alien Map Theme")
NewFeatureSec:Label("3/3/23: Added Autumn Map Theme")
NewFeatureSec:Label("3/3/23: Added Christmas Map Theme")
NewFeatureSec:Label("3/3/23: Added Map Themes To World Tab")
NewFeatureSec:Label("3/1/23: Added Rainbow cycle to land customization ")
NewFeatureSec:Label("3/1/23: Moved Server Options To Home")
NewFeatureSec:Label("3/1/23: Moved Players Option To Misc")
--NewFeatureSec:Label("3/1/23: Added Painting Sorter")
NewFeatureSec:Label("3/1/23: Added Paragraph To UI")
NewFeatureSec:Label("3/1/23: Made New Themes | Adding Soon")
NewFeatureSec:Label("3/1/23: Tested maxland dupe with structure bases, Works")
NewFeatureSec:Label("3/1/23: Tested Success Rate Of Dupes Are 90%")
NewFeatureSec:Label("3/1/23: Tested base dupes and all work")
NewFeatureSec:Label("2/28/23: Added Server Ping In Dupe Tab")
NewFeatureSec:Label("2/28/23: Added Information To Dupe Tab")
NewFeatureSec:Label("2/27/23: Added Documentation Link In Home")
NewFeatureSec:Label("2/25/23: Added Manual Maxland Dupelication")
NewFeatureSec:Label("2/25/23: Added Automated Maxland Dupelication")
NewFeatureSec:Label("2/25/23: Added Automated Middle Plot Dupelication")
NewFeatureSec:Label("2/25/23: Added Noclip")
NewFeatureSec:Label("2/25/23: Moved Display Spoofer To Misc")
NewFeatureSec:Label("2/25/23: Moved AntiAFk To Settings")
NewFeatureSec:Label("2/15/23: Added Built-in Feature Requests")
NewFeatureSec:Label("2/15/23: Added Built-in Bug Reports")
NewFeatureSec:Label("2/17/23: Cleaned Up Redundant Code lol")
NewFeatureSec:Label("2/17/23: Added Custom Dragger")
NewFeatureSec:Label("2/15/23: Added Quantity Slider to Bring Tree")
NewFeatureSec:Label("2/15/23: Added Abort to Bring Tree")
NewFeatureSec:Label("2/15/23: Added Bring Tree")
NewFeatureSec:Label("2/15/23: Added More Checks In Item Sorter")
NewFeatureSec:Label("2/15/23: Added Teleport All To Item Sorter")
NewFeatureSec:Label("2/15/23: Added Item Sorter")
NewFeatureSec:Label("2/14/23: Added Mimic Player Movement")
NewFeatureSec:Label("2/14/23: Added Zen To Fun")
NewFeatureSec:Label("2/13/23: Added Power Wings To Fun")
NewFeatureSec:Label("2/13/23: Made the shift to sprint update dynamically")
NewFeatureSec:Label("2/13/23: Sorted Out The Fun Scripts to correct sections")
NewFeatureSec:Label("2/13/23: Added Client-Sided & Non Client-Sided Sections to Fun")
NewFeatureSec:Label("2/13/23: Added TP Axe to base sorter (very buggy)")
NewFeatureSec:Label("2/13/23: Added Base Sorter Tab")
NewFeatureSec:Label("2/13/23: Added TP Logs To Player")
NewFeatureSec:Label("2/13/23: Added Locate Player toggle")
NewFeatureSec:Label("2/13/23: Improved Follow player")
NewFeatureSec:Label("2/13/23: Added Grief Option To Throw Everything")
NewFeatureSec:Label("2/13/23: Added Grief Option To Pull Everything")
NewFeatureSec:Label("2/12/23: Added Grief Tab")
NewFeatureSec:Label("2/12/23: Added Unflip Vehicle")
NewFeatureSec:Label("2/12/23: Added Vehicle Tab")
NewFeatureSec:Label("2/11/23: Added Physics Gun To Fun (Pointless lol)")
NewFeatureSec:Label("2/11/23: Added Snake To Fun (Buggy)")
NewFeatureSec:Label("2/11/23: Added Invisible")
NewFeatureSec:Label("2/11/23: Fixed A Bug With Axe Drop (Not All Axes Would Drop)")
NewFeatureSec:Label("2/10/23: Added Drop Axes")
NewFeatureSec:Label("2/10/23: Added Count Total Axes")
NewFeatureSec:Label("2/10/23: Added Count Inventory Axes")
NewFeatureSec:Label("2/10/23: Added Axe Section To Base Tab")
NewFeatureSec:Label("2/10/23: Added Bridge Up/Down")
NewFeatureSec:Label("2/9/23: Added Sell Logs")
NewFeatureSec:Label("2/9/23: Added Wood Tab")
NewFeatureSec:Label("2/9/23: Added A Hump Player Tab")
NewFeatureSec:Label("2/9/23: Added Player Spectate")
NewFeatureSec:Label("2/9/23: Added A Players Tab")
NewFeatureSec:Label("2/9/23: Added Another Section In World Tab To Clean It Up")
NewFeatureSec:Label("2/9/23: Added Follow Player")
NewFeatureSec:Label("2/8/23: Added Exit Game To Server")
NewFeatureSec:Label("2/8/23: Added Remove Snow Boulders")
NewFeatureSec:Label("2/8/23: Added Remove Volcano Boulders")
NewFeatureSec:Label("2/8/23: Added Path to Swamp")
NewFeatureSec:Label("2/8/23: Added Path to Lava")
NewFeatureSec:Label("2/8/23: Added Path to Safari")
NewFeatureSec:Label("2/8/23: Added Path to Palm")
NewFeatureSec:Label("2/7/23: Added Path to Snowglow")
NewFeatureSec:Label("2/7/23: Added Flashlight In Player Tab")
NewFeatureSec:Label("2/7/23: Added Improve Graphics")
NewFeatureSec:Label("2/7/23: Added Minecraft Builder (Server Hop To Remove HUD)")
NewFeatureSec:Label("2/7/23: Added Magical Clock Tower To Fun")
NewFeatureSec:Label("2/7/23: Added Brightness Slider")
NewFeatureSec:Label("2/7/23: Added Chat Enable/Disable Toggle")
NewFeatureSec:Label("2/7/23: Added Better AntiAFK")
NewFeatureSec:Label("2/7/23: Added Remove Water")
NewFeatureSec:Label("2/7/23: Added Checks For Graphic Mods, To Prevent ReRunning")
NewFeatureSec:Label("2/7/23: Added Xray Mode To World Tab")
NewFeatureSec:Label("2/6/23: Removed Move Tool From Btools For Bug Reasons")
NewFeatureSec:Label("2/6/23: Change Infinite Jump To A Toggle")
NewFeatureSec:Label("2/6/23: Improved Land Color Picker's Lag Prevention")
NewFeatureSec:Label("2/6/23: Improved Name Spoof Time")
NewFeatureSec:Label("2/6/23: Added Fun Facts Again")
NewFeatureSec:Label("2/6/23: Added Rejoin Server In Server Tab")
NewFeatureSec:Label("2/6/23: Moved Server Hop To Server Tab")
NewFeatureSec:Label("2/6/23: Added Server Tab")
NewFeatureSec:Label("2/6/23: Added Sprint Speed Slider")
NewFeatureSec:Label("2/6/23: Changed No Fog To A Toggle")
NewFeatureSec:Label("2/6/23: Added Always Night In World Tab")
NewFeatureSec:Label("2/6/23: Added Always Day In World Tab")
NewFeatureSec:Label("2/6/23: Added Display Name Spoofer In Settings Tab")
NewFeatureSec:Label("2/6/23: Added Sign Cycle Loop Upon Executing")
NewFeatureSec:Label("2/6/23: Added A new Custom UI Library")

-- Old Changes
ChangelogSec:Label("2/2/23: Removed Realistic Grass, It Was Pointless Lol")
ChangelogSec:Label("2/2/23: Reduced Lag For The Leaf Color Picker In Player Tab")
ChangelogSec:Label("2/2/23: Added Shift To Sprint Toggle In Player Tab")
ChangelogSec:Label("1/27/23: Added Wood R' Us Sign Text Cycling")
ChangelogSec:Label("1/27/23: Added New Animation Text")
ChangelogSec:Label("1/27/23: Added FPS Counter To Misc Tab")
ChangelogSec:Label("1/27/23: Added New message Upon Execution")
ChangelogSec:Label("1/25/23: Added A Home Tab")
ChangelogSec:Label("1/25/23: Increased Max Walkspeed From 300 To 500")
ChangelogSec:Label("1/25/23: Changed No Fog To A Toggle, This Still Needs Some Name")
ChangelogSec:Label("1/25/23: Added No Shadows But This Doesnt Work Yet")
ChangelogSec:Label("1/25/23: Added More Tab Icons")
ChangelogSec:Label("1/25/23: Added Tips (Concept Idea From ButterHub)")
ChangelogSec:Label("1/25/23: Fixed Solid Water Toggle")
ChangelogSec:Label("1/25/23: Fixed AntiAFK")
ChangelogSec:Label("1/24/23: Added Better Graphics")
ChangelogSec:Label("1/24/23: Added Bloom Graphics")
ChangelogSec:Label("1/24/23: Added Free Camera")
ChangelogSec:Label("1/16/23: Reduce Lag With Land Color Picker")
ChangelogSec:Label("1/16/23: Finished Waypoint/Store/WoodArea Teleportations")
ChangelogSec:Label("1/16/23: Added Glow Spray Can")
ChangelogSec:Label("1/16/23: Added Thomas The Train Morph")
ChangelogSec:Label("1/16/23: Added Police Morph")
ChangelogSec:Label("1/16/23: Added Server Hop")
ChangelogSec:Label("1/16/23: Added Drinkable Soda Can")
ChangelogSec:Label("1/16/23: Added Client Slided HoverBoard")
ChangelogSec:Label("1/16/23: Added Customizable FOV")
ChangelogSec:Label("1/16/23: Added Color Picker For Leafs Rather")
ChangelogSec:Label("1/16/23: Removed Leaf Color Buttons (Red/Blue)")
ChangelogSec:Label("1/16/23: Added Color Picker For Plots")
ChangelogSec:Label("1/16/23: Removed Leaf Color Buttons (Red/Black/Normal)")
ChangelogSec:Label("1/16/23: Added New Notifications")
ChangelogSec:Label("1/16/23: ReWrote Alot And Removed Some Broken Features")
ChangelogSec:Label("1/14/23: Updated Changelog Order From Newest To Oldest")
ChangelogSec:Label("1/14/23: Removed DrSTaTTiK's UI.. srry")
ChangelogSec:Label("1/14/23: Added Solid Water to World Tab")
ChangelogSec:Label("1/13/23: Added All R6 Emotes to Emotes Tab")
ChangelogSec:Label("1/13/23: Added Emotes Tab")
ChangelogSec:Label("1/13/23: Added Click To TP")
ChangelogSec:Label("1/13/23: Added Pee.. lol")
ChangelogSec:Label("1/13/23: Added DrSTaTTiK's UI")
ChangelogSec:Label("1/13/23: Added Long Chop Range (testing)")
ChangelogSec:Label("1/13/23: Added Click To TP")
ChangelogSec:Label("1/13/23: Added Chat Translater")
ChangelogSec:Label("1/10/23: Added Plot Materials Sandstone/Pavement/Normal")
ChangelogSec:Label("1/10/23: Added Better Water Color")
ChangelogSec:Label("1/10/23: Added Help Page")
ChangelogSec:Label("1/10/23: Added Max Land")
ChangelogSec:Label("1/6/23: Added Free Land")
ChangelogSec:Label("1/6/23: Added Character Reset")
ChangelogSec:Label("1/6/23: Added Btools")
ChangelogSec:Label("1/6/23: Added Land Colors (Red/Black/Normal)")
ChangelogSec:Label("1/6/23: Added ChatSpy")
ChangelogSec:Label("1/6/23: Added Infinite Jump")
ChangelogSec:Label("1/6/23: Added AFK (testing)")
ChangelogSec:Label("1/6/23: Added Message Box")
ChangelogSec:Label("1/6/23: Fixed Synapse Crash When Executing NightFall")
ChangelogSec:Label("1/6/23: Fixed Notifications Stacking On Eachother")
ChangelogSec:Label("1/6/23: Added Leaf Colors Red & Blue")
ChangelogSec:Label("1/6/23: Added Always Day To World")
ChangelogSec:Label("1/6/23: Added Misc Tips In Misc")
ChangelogSec:Label("1/6/23: Added Realistic Roads To World")
ChangelogSec:Label("1/5/23: Added Notifications")
ChangelogSec:Label("1/5/23: Removed FullScreen Message")
ChangelogSec:Label("1/5/23: Added Leaf Colors Red & Blue To World")
ChangelogSec:Label("1/5/23: Added Gynmastics To Misc")
ChangelogSec:Label("1/4/23: Patched Crash Bugs When Using Buttons")
ChangelogSec:Label("1/4/23: Added Theme Tab")
ChangelogSec:Label("1/4/23: Added JumpPower Slider")
ChangelogSec:Label("1/4/23: Added Walkspeed Slider")
ChangelogSec:Label("1/4/23: Added Chat Spoofer To Misc")
ChangelogSec:Label("1/3/23: Added Custom Noticiations To Misc")
ChangelogSec:Label("1/3/23: Started Development")
------------------------------------------------------------------------------







------------------------------------------------------------------------------
-- Locate Players | Credits to "Real Panda" for their ESP library
PlayerThingsSec:Toggle("Locate Players", false, function(state)
   if state == true then
	   _G.WRDESPEnabled = true
   else
	   _G.WRDESPEnabled = false
   end
end)
loadstring(game:HttpGet(('https://gist.githubusercontent.com/ItsEcstasy/a6123ba35ba697de767797666881d573/raw/7c587c62432aea9310f7461a7e5d5e009ef63547/LocatePlayer%2520On')))()
------------------------------------------------------------------------------







------------------------------------------------------------------------------
  -- library functions
--[[

-- Button
ExampleSec::Button("Button",function()
	print("Clicked")
end)


-- label
ExampleSec::Label("Nightfall")


-- slider
ExampleSec::Slider("Slider", 10, 1, 100, false, function(Value)
	print(Value)
end)

-- toggle
ExampleSec::Toggle("Toggle", true, function(Value)
	print(Value)
end)

-- keybind
ExampleSec::KeyBind("KeyBind", "LeftShift", function(Value)
	print(Value)
end)

-- textbox
ExampleSec::TextBox("TextBox", "Ava Max #1", function(Value)
	print(Value)
end)

-- dropdown
ExampleSec::DropDown("DropDown", {"Silent", "Ancestor", "Blood", "Bark", "Woof", "Azure", "JB36 is a nigger", "Everyone in butter hub is a fucking retard "},function(Value)
	print(Value)
end)

-- color picker
ExampleSec::ColorPicker("Color Picker", Color3.new(225,0,225), function(Value)
	print(Value)
end)


-- Textbox Notification
Section2:TextBox("Notify", "Message Here", function(Value)
	library:Notify("Nightfall", Value, false)
end)


-- Progress bar
Section2:Button("Send Progress Bar", function()
	local ProgressNoti = library:ProgressBar("Amount",100)


-- ProgressBar Counter
	for i = 1,100 do
		ProgressNoti:Update(1)
		task.wait(1)
	end
end)


-- player dropdown
live player dropdown list
local GetPlrs = function()
    local Plrs = {}
    for i,v in next, game:GetService"Players":GetPlayers() do
        if not table.find(Plrs, v.Name) then
           table.insert(Plrs, v.Name) 
        end
    end
    return Plrs
end

local PlrDD = Section2:DropDown("Player List", GetPlrs(),function(Value)
	print(Value)
end)

game:GetService"Players".PlayerAdded:Connect(function()
    PlrDD:setoptions(GetPlrs())
end)

]]
------------------------------------------------------------------------------







------------------------------------------------------------------------------
---- Random Tips
---- https://lumber-tycoon-2.fandom.com/wiki/Cavecrawler_Wood
---- https://lumber-tycoon-2.fandom.com/wiki/Category:Axes
---- https://lumber-tycoon-2.fandom.com/wiki/Snowglow_Wood
------------------------------------------------------------------------------



-- Starting Page
library:SelectPage(1)











































-- hai discord, what's wrong? thought i'd leak code because I opened synapse?
