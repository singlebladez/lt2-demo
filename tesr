--Butter v2

version = 3

--Butter 

--Main dev Applebox#0001
 
--Motivator Gamer, Becky

--Open source By Applebox


-- My 2 lua script

--#region UI CODE 

            local library = {}
            local ToggleUI = false
            library.currentTab = nil
            library.flags = {}
            
            local services = setmetatable({}, {
              __index = function(t, k)
                return game.GetService(game, k)
              end
            })
            
            local mouse = services.Players.LocalPlayer:GetMouse()
            
            function Tween(obj, t, data)
                services.TweenService:Create(obj, TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), data):Play()
                return true
            end
            
            local toggled = false
            
            -- # Switch Tabs # --
            local switchingTabs = false
            function switchTab(new)
              if switchingTabs then return end
              local old = library.currentTab
              if old == nil then
                new[2].Visible = true
                library.currentTab = new
                services.TweenService:Create(new[1], TweenInfo.new(0.1), {ImageTransparency = 0}):Play()
                services.TweenService:Create(new[1].TabText, TweenInfo.new(0.1), {TextTransparency = 0}):Play()
                return
              end
              
              if old[1] == new[1] then return end
              switchingTabs = true
              library.currentTab = new
            
              services.TweenService:Create(old[1], TweenInfo.new(0.1), {ImageTransparency = 0.2}):Play()
              services.TweenService:Create(new[1], TweenInfo.new(0.1), {ImageTransparency = 0}):Play()
              services.TweenService:Create(old[1].TabText, TweenInfo.new(0.1), {TextTransparency = 0.2}):Play()
              services.TweenService:Create(new[1].TabText, TweenInfo.new(0.1), {TextTransparency = 0}):Play()
            
              old[2].Visible = false
              new[2].Visible = true
              
              task.wait(0.1)
            
              switchingTabs = false
            end
            
            -- # Drag, Stolen from Kiriot or Wally # --
            function drag(frame, hold)
                if not hold then
                    hold = frame
                end
                local dragging
                local dragInput
                local dragStart
                local startPos
                
                function Ripple(obj)
                spawn(function()
                    if obj.ClipsDescendants ~= true then
                        obj.ClipsDescendants = true
                    end
                    local Ripple = Instance.new("ImageLabel")
                    Ripple.Name = "Ripple"
                    Ripple.Parent = obj
                    Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    Ripple.BackgroundTransparency = 1.000
                    Ripple.ZIndex = 8
                    Ripple.Image = "rbxassetid://2708891598"
                    Ripple.ImageTransparency = 0.800
                    Ripple.ScaleType = Enum.ScaleType.Fit
                    Ripple.ImageColor3 = Color3.fromRGB(255, 255, 255)
                    Ripple.Position = UDim2.new((mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X, 0, (mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y, 0)
                    Tween(Ripple, {.3, 'Linear', 'InOut'}, {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)})
                    wait(0.15)
                    Tween(Ripple, {.3, 'Linear', 'InOut'}, {ImageTransparency = 1})
                    wait(.3)
                    Ripple:Destroy()
                end)
            end
            
                local function update(input)
                    local delta = input.Position - dragStart
                    frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
                end
            
                hold.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        dragStart = input.Position
                        startPos = frame.Position
            
                        input.Changed:Connect(function()
                            if input.UserInputState == Enum.UserInputState.End then
                                dragging = false
                            end
                        end)
                    end
                end)
            
                frame.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        dragInput = input
                    end
                end)
            
                services.UserInputService.InputChanged:Connect(function(input)
                    if input == dragInput and dragging then
                        update(input)
                    end
                end)
            end
            
            function library.new(library, name)
              for _, v in next, services.CoreGui:GetChildren() do
                if v.Name == "frosty is cute" then
                  v:Destroy()
                end
              end
            
              local dogent = Instance.new("ScreenGui")
              local Main = Instance.new("Frame")
              local TabMain = Instance.new("Frame")
              local MainC = Instance.new("UICorner")
              local SB = Instance.new("Frame")
              local SBC = Instance.new("UICorner")
              local Side = Instance.new("Frame")
              local SideG = Instance.new("UIGradient")
              local TabBtns = Instance.new("ScrollingFrame")
              local TabBtnsL = Instance.new("UIListLayout")
              local ScriptTitle = Instance.new("TextLabel")
              local Scriptload = Instance.new("TextLabel")
              local SBG = Instance.new("UIGradient")  
            
              if syn and syn.protect_gui then syn.protect_gui(dogent) end
            
              dogent.Name = "frosty is cute"
              dogent.Parent = services.CoreGui
              
              function UiDestroy()
                  dogent:Destroy()
              end
              
                  function ToggleUILib()
                    if not ToggleUI then
                        dogent.Enabled = false
                        ToggleUI = true
                        else
                        ToggleUI = false
                        dogent.Enabled = true
                    end
                end
              
              Main.Name = "Main"
              Main.Parent = dogent
              Main.AnchorPoint = Vector2.new(0.5, 0.5)
              Main.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
              Main.BorderColor3 = Color3.fromRGB(25, 25, 25)
              Main.Position = UDim2.new(0.5, 0, 0.5, 0)
              Main.Size = UDim2.new(0, 572, 0, 353)
            
              drag(Main)
              
                  function toggleui()
                    toggled = not toggled
                    spawn(function()
                        if toggled then wait(0.3) end
                    end)
                    Tween(Main, {0.3, 'Sine', 'InOut'}, {
                        Size = UDim2.new(0, 609, 0, (toggled and 505 or 0))
                    })
                end
              
              TabMain.Name = "TabMain"
              TabMain.Parent = Main
              TabMain.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
              TabMain.BackgroundTransparency = 1.000
              TabMain.Position = UDim2.new(0.217000037, 0, 0, 3)
              TabMain.Size = UDim2.new(0, 448, 0, 346)
              
              MainC.CornerRadius = UDim.new(0, 6)
              MainC.Name = "MainC"
              MainC.Parent = Main
              
              SB.Name = "SB"
              SB.Parent = Main
              SB.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
              SB.BorderColor3 = Color3.fromRGB(25, 25, 25)
              SB.Size = UDim2.new(0, 8, 0, 353)
              
              SBC.CornerRadius = UDim.new(0, 6)
              SBC.Name = "SBC"
              SBC.Parent = SB
              
              Side.Name = "Side"
              Side.Parent = SB
              Side.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
              Side.BorderColor3 = Color3.fromRGB(25, 25, 25)
              Side.BorderSizePixel = 0
              Side.ClipsDescendants = true
              Side.Position = UDim2.new(1, 0, 0, 0)
              Side.Size = UDim2.new(0, 110, 0, 353)
              
              SideG.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(30, 30, 30)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(30, 30, 30))}
              SideG.Rotation = 90
              SideG.Name = "SideG"
              SideG.Parent = Side
              
              TabBtns.Name = "TabBtns"
              TabBtns.Parent = Side
              TabBtns.Active = true
              TabBtns.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
              TabBtns.BackgroundTransparency = 1.000
              TabBtns.BorderSizePixel = 0
              TabBtns.Position = UDim2.new(0, 0, 0.0973535776, 0)
              TabBtns.Size = UDim2.new(0, 110, 0, 318)
              TabBtns.CanvasSize = UDim2.new(0, 0, 1, 0)
              TabBtns.ScrollBarThickness = 0
              
              TabBtnsL.Name = "TabBtnsL"
              TabBtnsL.Parent = TabBtns
              TabBtnsL.SortOrder = Enum.SortOrder.LayoutOrder
              TabBtnsL.Padding = UDim.new(0, 12)
              
              
            function zigzag(X) return math.acos(math.cos(X*math.pi))/math.pi end
            local RGBcounter = 0
            
            local Member = false
            
            --if Member then
            Member = false
            --else
            --gay = false
            --end
            
            function zigzag(X) return math.acos(math.cos(X*math.pi))/math.pi end
            local RGBcounter = 0
          
            local Member = false
          
            --if Member then
            Member = false
            --else
            --gay = false
            --end
          
            if Member == true then
              task.spawn(function()
              print("your gay")
              while wait(0.1) do
                RGBcounter = RGBcounter + 0.01
              end
              end)
            end
          
            Scriptload.Name = "Scriptload"
            Scriptload.Parent = Side
            Scriptload.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            Scriptload.BackgroundTransparency = 1.000
            Scriptload.Position = UDim2.new(0, 0, 0.0453488424, 0)
            Scriptload.Size = UDim2.new(0, 102, 0, 20)
            Scriptload.Font = Enum.Font.GothamSemibold
            Scriptload.TextColor3 = Color3.fromRGB(0, 255, 0)
            Scriptload.TextSize = 11.000
            Scriptload.TextXAlignment = Enum.TextXAlignment.Left
          
            ScriptTitle.Name = "ScriptTitle"
            ScriptTitle.Parent = Side
            ScriptTitle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            ScriptTitle.BackgroundTransparency = 1.000
            ScriptTitle.Position = UDim2.new(0, 0, 0.00953488424, 0)
            ScriptTitle.Size = UDim2.new(0, 102, 0, 20)
            ScriptTitle.Font = Enum.Font.GothamSemibold

            -- timers
            task.spawn(function()
            while task.wait(0.5) do
              ScriptTitle.Text = "Butter " .. os.date("%I:%M")
              if game:GetService("ReplicatedStorage").LoadSaveRequests.ClientMayLoad:InvokeServer(game.Players.LocalPlayer) then
                Scriptload.Text = "you can load"
                Scriptload.TextColor3 = Color3.fromRGB(0, 255, 0)
              else
                Scriptload.Text = "you can't load"
                Scriptload.TextColor3 = Color3.fromRGB(255, 0, 0)
              end
            end
            end)

            --ScriptTitle.Text = name
          
            if Member == true then
              task.spawn(function()
              --print("your gay")
              while wait(0.1) do
                ScriptTitle.TextColor3 = Color3.fromHSV(zigzag(RGBcounter),1,1)
              end
              end)
            else
              ScriptTitle.TextColor3 = Color3.fromRGB(255, 0, 249)
            end
          
            ScriptTitle.TextSize = 14.000
            ScriptTitle.TextXAlignment = Enum.TextXAlignment.Left


              
              SBG.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(30, 30, 30)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(30, 30, 30))}
              SBG.Rotation = 90
              SBG.Name = "SBG"
              SBG.Parent = SB
            
              TabBtnsL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                TabBtns.CanvasSize = UDim2.new(0, 0, 0, TabBtnsL.AbsoluteContentSize.Y + 18)
              end)
              
              local window = {}
              function window.Tab(window, name, icon)
                local Tab = Instance.new("ScrollingFrame")
                local TabIco = Instance.new("ImageLabel")
                local TabText = Instance.new("TextLabel")
                local TabBtn = Instance.new("TextButton")
                local TabL = Instance.new("UIListLayout")
            
                Tab.Name = "Tab"
                Tab.Parent = TabMain
                Tab.Active = true
                Tab.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Tab.BackgroundTransparency = 1.000
                Tab.Size = UDim2.new(1, 0, 1, 0)
                Tab.ScrollBarThickness = 2
                Tab.Visible = false
                
                TabIco.Name = "TabIco"
                TabIco.Parent = TabBtns
                TabIco.BackgroundTransparency = 1.000
                TabIco.BorderSizePixel = 0
                TabIco.Size = UDim2.new(0, 24, 0, 24)
                TabIco.Image = ("rbxassetid://%s"):format((icon or 4370341699))
                TabIco.ImageTransparency = 0.2
                
                TabText.Name = "TabText"
                TabText.Parent = TabIco
                TabText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TabText.BackgroundTransparency = 1.000
                TabText.Position = UDim2.new(1.41666663, 0, 0, 0)
                TabText.Size = UDim2.new(0, 76, 0, 24)
                TabText.Font = Enum.Font.GothamSemibold
                TabText.Text = name
                TabText.TextColor3 = Color3.fromRGB(255, 255, 255)
                TabText.TextSize = 14.000
                TabText.TextXAlignment = Enum.TextXAlignment.Left
                TabText.TextTransparency = 0.2
                
                TabBtn.Name = "TabBtn"
                TabBtn.Parent = TabIco
                TabBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TabBtn.BackgroundTransparency = 1.000
                TabBtn.BorderSizePixel = 0
                TabBtn.Size = UDim2.new(0, 110, 0, 24)
                TabBtn.AutoButtonColor = false
                TabBtn.Font = Enum.Font.SourceSans
                TabBtn.Text = ""
                TabBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
                TabBtn.TextSize = 14.000
                
                TabL.Name = "TabL"
                TabL.Parent = Tab
                TabL.SortOrder = Enum.SortOrder.LayoutOrder
                TabL.Padding = UDim.new(0, 4)  
            
                TabBtn.MouseButton1Click:Connect(function()
                    spawn(function()
                        Ripple(TabBtn)
                    end)
                  switchTab({TabIco, Tab})
                end)
            
                if library.currentTab == nil then switchTab({TabIco, Tab}) end
            
                TabL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                  Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 8)
                end)
            
                local tab = {}
                function tab.section(tab, name, TabVal)
                  local Section = Instance.new("Frame")
                  local SectionC = Instance.new("UICorner")
                  local SectionText = Instance.new("TextLabel")
                  local SectionOpen = Instance.new("ImageLabel")
                  local SectionOpened = Instance.new("ImageLabel")
                  local SectionToggle = Instance.new("ImageButton")
                  local Objs = Instance.new("Frame")
                  local ObjsL = Instance.new("UIListLayout")
            
                  Section.Name = "Section"
                  Section.Parent = Tab
                  Section.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                  Section.BackgroundTransparency = 1.000
                  Section.BorderSizePixel = 0
                  Section.ClipsDescendants = true
                  Section.Size = UDim2.new(0.981000006, 0, 0, 36)
                  
                  SectionC.CornerRadius = UDim.new(0, 6)
                  SectionC.Name = "SectionC"
                  SectionC.Parent = Section
                  
                  SectionText.Name = "SectionText"
                  SectionText.Parent = Section
                  SectionText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                  SectionText.BackgroundTransparency = 1.000
                  SectionText.Position = UDim2.new(0.0887396261, 0, 0, 0)
                  SectionText.Size = UDim2.new(0, 401, 0, 36)
                  SectionText.Font = Enum.Font.GothamSemibold
                  SectionText.Text = name
                  SectionText.TextColor3 = Color3.fromRGB(255, 255, 255)
                  SectionText.TextSize = 16.000
                  SectionText.TextXAlignment = Enum.TextXAlignment.Left
                  
                  SectionOpen.Name = "SectionOpen"
                  SectionOpen.Parent = SectionText
                  SectionOpen.BackgroundTransparency = 1
                  SectionOpen.BorderSizePixel = 0
                  SectionOpen.Position = UDim2.new(0, -33, 0, 5)
                  SectionOpen.Size = UDim2.new(0, 26, 0, 26)
                  SectionOpen.Image = "http://www.roblox.com/asset/?id=6031302934"
                  
                  SectionOpened.Name = "SectionOpened"
                  SectionOpened.Parent = SectionOpen
                  SectionOpened.BackgroundTransparency = 1.000
                  SectionOpened.BorderSizePixel = 0
                  SectionOpened.Size = UDim2.new(0, 26, 0, 26)
                  SectionOpened.Image = "http://www.roblox.com/asset/?id=6031302932"
                  SectionOpened.ImageTransparency = 1.000
            
                  SectionToggle.Name = "SectionToggle"
                  SectionToggle.Parent = SectionOpen
                  SectionToggle.BackgroundTransparency = 1
                  SectionToggle.BorderSizePixel = 0
                  SectionToggle.Size = UDim2.new(0, 26, 0, 26)
                  
                  Objs.Name = "Objs"
                  Objs.Parent = Section
                  Objs.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                  Objs.BackgroundTransparency = 1
                  Objs.BorderSizePixel = 0
                  Objs.Position = UDim2.new(0, 6, 0, 36)
                  Objs.Size = UDim2.new(0.986347735, 0, 0, 0)
            
                  ObjsL.Name = "ObjsL"
                  ObjsL.Parent = Objs
                  ObjsL.SortOrder = Enum.SortOrder.LayoutOrder
                  ObjsL.Padding = UDim.new(0, 8) 
                  
                  local open = TabVal
                  if TabVal ~= false then
                    Section.Size = UDim2.new(0.981000006, 0, 0, open and 36 + ObjsL.AbsoluteContentSize.Y + 8 or 36)
                    SectionOpened.ImageTransparency = (open and 0 or 1)
                    SectionOpen.ImageTransparency = (open and 1 or 0)
                  end
                  
                  SectionToggle.MouseButton1Click:Connect(function()
                    open = not open
                    Section.Size = UDim2.new(0.981000006, 0, 0, open and 36 + ObjsL.AbsoluteContentSize.Y + 8 or 36)
                    SectionOpened.ImageTransparency = (open and 0 or 1)
                    SectionOpen.ImageTransparency = (open and 1 or 0)
                  end)
            
                  ObjsL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                    if not open then return end
                    Section.Size = UDim2.new(0.981000006, 0, 0, 36 + ObjsL.AbsoluteContentSize.Y + 8)
                  end)
            
                  local section = {}
                  function section.Button(section, text, callback)
                    local callback = callback or function() end
            
                    local BtnModule = Instance.new("Frame")
                    local Btn = Instance.new("TextButton")
                    local BtnC = Instance.new("UICorner")    
                    
                    BtnModule.Name = "BtnModule"
                    BtnModule.Parent = Objs
                    BtnModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    BtnModule.BackgroundTransparency = 1.000
                    BtnModule.BorderSizePixel = 0
                    BtnModule.Position = UDim2.new(0, 0, 0, 0)
                    BtnModule.Size = UDim2.new(0, 428, 0, 38)
                    
                    Btn.Name = "Btn"
                    Btn.Parent = BtnModule
                    Btn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                    Btn.BorderSizePixel = 0
                    Btn.Size = UDim2.new(0, 428, 0, 38)
                    Btn.AutoButtonColor = false
                    Btn.Font = Enum.Font.GothamSemibold
                    Btn.Text = "   " .. text
                    Btn.TextColor3 = Color3.fromRGB(255, 255, 255)
                    Btn.TextSize = 16.000
                    Btn.TextXAlignment = Enum.TextXAlignment.Left
                    
                    BtnC.CornerRadius = UDim.new(0, 6)
                    BtnC.Name = "BtnC"
                    BtnC.Parent = Btn
            
                    Btn.MouseButton1Click:Connect(function()
                        spawn(function()
                            Ripple(Btn)
                        end)
                            spawn(callback)
                        end)
                    end
            
                function section:Label(text)
                  local LabelModule = Instance.new("Frame")
                  local TextLabel = Instance.new("TextLabel")
                  local LabelC = Instance.new("UICorner")
                  
                  LabelModule.Name = "LabelModule"
                  LabelModule.Parent = Objs
                  LabelModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                  LabelModule.BackgroundTransparency = 1.000
                  LabelModule.BorderSizePixel = 0
                  LabelModule.Position = UDim2.new(0, 0, NAN, 0)
                  LabelModule.Size = UDim2.new(0, 428, 0, 19)
            
                  TextLabel.Parent = LabelModule
                  TextLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                  TextLabel.Size = UDim2.new(0, 428, 0, 22)
                  TextLabel.Font = Enum.Font.GothamSemibold
                  TextLabel.Text = text
                  TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                  TextLabel.TextSize = 14.000
            
                  LabelC.CornerRadius = UDim.new(0, 6)
                  LabelC.Name = "LabelC"
                  LabelC.Parent = TextLabel
                  return TextLabel
                end
            
                  function section.Toggle(section, text, flag, enabled, callback)
                    local callback = callback or function() end
                    local enabled = enabled or false
                    assert(text, "No text provided")
                    assert(flag, "No flag provided")
            
                    library.flags[flag] = enabled
            
                    local ToggleModule = Instance.new("Frame")
                    local ToggleBtn = Instance.new("TextButton")
                    local ToggleBtnC = Instance.new("UICorner")
                    local ToggleDisable = Instance.new("Frame")
                    local ToggleSwitch = Instance.new("Frame")
                    local ToggleSwitchC = Instance.new("UICorner")
                    local ToggleDisableC = Instance.new("UICorner")
                    
                    ToggleModule.Name = "ToggleModule"
                    ToggleModule.Parent = Objs
                    ToggleModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    ToggleModule.BackgroundTransparency = 1.000
                    ToggleModule.BorderSizePixel = 0
                    ToggleModule.Position = UDim2.new(0, 0, 0, 0)
                    ToggleModule.Size = UDim2.new(0, 428, 0, 38)
                    
                    ToggleBtn.Name = "ToggleBtn"
                    ToggleBtn.Parent = ToggleModule
                    ToggleBtn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                    ToggleBtn.BorderSizePixel = 0
                    ToggleBtn.Size = UDim2.new(0, 428, 0, 38)
                    ToggleBtn.AutoButtonColor = false
                    ToggleBtn.Font = Enum.Font.GothamSemibold
                    ToggleBtn.Text = "   " .. text
                    ToggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
                    ToggleBtn.TextSize = 16.000
                    ToggleBtn.TextXAlignment = Enum.TextXAlignment.Left
                    
                    ToggleBtnC.CornerRadius = UDim.new(0, 6)
                    ToggleBtnC.Name = "ToggleBtnC"
                    ToggleBtnC.Parent = ToggleBtn
                    
                    ToggleDisable.Name = "ToggleDisable"
                    ToggleDisable.Parent = ToggleBtn
                    ToggleDisable.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    ToggleDisable.BorderSizePixel = 0
                    ToggleDisable.Position = UDim2.new(0.901869178, 0, 0.208881587, 0)
                    ToggleDisable.Size = UDim2.new(0, 36, 0, 22)
                    
                    ToggleSwitch.Name = "ToggleSwitch"
                    ToggleSwitch.Parent = ToggleDisable
                    ToggleSwitch.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    ToggleSwitch.Size = UDim2.new(0, 24, 0, 22)
                    
                    ToggleSwitchC.CornerRadius = UDim.new(0, 6)
                    ToggleSwitchC.Name = "ToggleSwitchC"
                    ToggleSwitchC.Parent = ToggleSwitch
                    
                    ToggleDisableC.CornerRadius = UDim.new(0, 6)
                    ToggleDisableC.Name = "ToggleDisableC"
                    ToggleDisableC.Parent = ToggleDisable        
            
                    local funcs = {
                      SetState = function(self, state)
                        if state == nil then state = not library.flags[flag] end
                        if library.flags[flag] == state then return end
                        services.TweenService:Create(ToggleSwitch, TweenInfo.new(0.2), {Position = UDim2.new(0, (state and ToggleSwitch.Size.X.Offset / 2 or 0), 0, 0), BackgroundColor3 = (state and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(25, 25, 25))}):Play()
                        library.flags[flag] = state
                        callback(state)
                      end,
                      Module = ToggleModule
                    }
                    
                    if enabled ~= false then
                        funcs:SetState(flag,true)
                    end
            
                    ToggleBtn.MouseButton1Click:Connect(function()
                      funcs:SetState()
                    end)
                    return funcs
                  end
            
                  function section.Keybind(section, text, default, callback)
                    local callback = callback or function() end
                    assert(text, "No text provided")
                    assert(default, "No default key provided")
            
                    local default = (typeof(default) == "string" and Enum.KeyCode[default] or default)
                    local banned = {
                      Return = true;
                      Space = true;
                      Tab = true;
                      Backquote = true;
                      CapsLock = true;
                      Escape = true;
                      Unknown = true;
                    }
                    local shortNames = {
                      RightControl = 'Right Ctrl',
                      LeftControl = 'Left Ctrl',
                      LeftShift = 'Left Shift',
                      RightShift = 'Right Shift',
                      Semicolon = ";",
                      Quote = '"',
                      LeftBracket = '[',
                      RightBracket = ']',
                      Equals = '=',
                      Minus = '-',
                      RightAlt = 'Right Alt',
                      LeftAlt = 'Left Alt'
                    }
            
                    local bindKey = default
                    local keyTxt = (default and (shortNames[default.Name] or default.Name) or "None")
            
                    local KeybindModule = Instance.new("Frame")
                    local KeybindBtn = Instance.new("TextButton")
                    local KeybindBtnC = Instance.new("UICorner")
                    local KeybindValue = Instance.new("TextButton")
                    local KeybindValueC = Instance.new("UICorner")
                    local KeybindL = Instance.new("UIListLayout")
                    local UIPadding = Instance.new("UIPadding")
            
                    KeybindModule.Name = "KeybindModule"
                    KeybindModule.Parent = Objs
                    KeybindModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    KeybindModule.BackgroundTransparency = 1.000
                    KeybindModule.BorderSizePixel = 0
                    KeybindModule.Position = UDim2.new(0, 0, 0, 0)
                    KeybindModule.Size = UDim2.new(0, 428, 0, 38)
                    
                    KeybindBtn.Name = "KeybindBtn"
                    KeybindBtn.Parent = KeybindModule
                    KeybindBtn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                    KeybindBtn.BorderSizePixel = 0
                    KeybindBtn.Size = UDim2.new(0, 428, 0, 38)
                    KeybindBtn.AutoButtonColor = false
                    KeybindBtn.Font = Enum.Font.GothamSemibold
                    KeybindBtn.Text = "   " .. text
                    KeybindBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
                    KeybindBtn.TextSize = 16.000
                    KeybindBtn.TextXAlignment = Enum.TextXAlignment.Left
                    
                    KeybindBtnC.CornerRadius = UDim.new(0, 6)
                    KeybindBtnC.Name = "KeybindBtnC"
                    KeybindBtnC.Parent = KeybindBtn
                    
                    KeybindValue.Name = "KeybindValue"
                    KeybindValue.Parent = KeybindBtn
                    KeybindValue.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    KeybindValue.BorderSizePixel = 0
                    KeybindValue.Position = UDim2.new(0.763033211, 0, 0.289473683, 0)
                    KeybindValue.Size = UDim2.new(0, 100, 0, 28)
                    KeybindValue.AutoButtonColor = false
                    KeybindValue.Font = Enum.Font.Gotham
                    KeybindValue.Text = keyTxt
                    KeybindValue.TextColor3 = Color3.fromRGB(255, 255, 255)
                    KeybindValue.TextSize = 14.000
                    
                    KeybindValueC.CornerRadius = UDim.new(0, 6)
                    KeybindValueC.Name = "KeybindValueC"
                    KeybindValueC.Parent = KeybindValue
                    
                    KeybindL.Name = "KeybindL"
                    KeybindL.Parent = KeybindBtn
                    KeybindL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                    KeybindL.SortOrder = Enum.SortOrder.LayoutOrder
                    KeybindL.VerticalAlignment = Enum.VerticalAlignment.Center
                    
                    UIPadding.Parent = KeybindBtn
                    UIPadding.PaddingRight = UDim.new(0, 6)   
                    
                    services.UserInputService.InputBegan:Connect(function(inp, gpe)
                      if gpe then return end
                      if inp.UserInputType ~= Enum.UserInputType.Keyboard then return end
                      if inp.KeyCode ~= bindKey then return end
                      callback(bindKey.Name)
                    end)
                    
                    KeybindValue.MouseButton1Click:Connect(function()
                      KeybindValue.Text = "..."
                      wait()
                      local key, uwu = services.UserInputService.InputEnded:Wait()
                      local keyName = tostring(key.KeyCode.Name)
                      if key.UserInputType ~= Enum.UserInputType.Keyboard then
                        KeybindValue.Text = keyTxt
                        return
                      end
                      if banned[keyName] then
                        KeybindValue.Text = keyTxt
                        return
                      end
                      wait()
                      bindKey = Enum.KeyCode[keyName]
                      KeybindValue.Text = shortNames[keyName] or keyName
                    end)
            
                    KeybindValue:GetPropertyChangedSignal("TextBounds"):Connect(function()
                      KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 30, 0, 28)
                    end)
                    KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 30, 0, 28)
                  end
            
                  function section.Textbox(section, text, flag, default, callback)
                    local callback = callback or function() end
                    assert(text, "No text provided")
                    assert(flag, "No flag provided")
                    assert(default, "No default text provided")
            
                    library.flags[flag] = default
            
                    local TextboxModule = Instance.new("Frame")
                    local TextboxBack = Instance.new("TextButton")
                    local TextboxBackC = Instance.new("UICorner")
                    local BoxBG = Instance.new("TextButton")
                    local BoxBGC = Instance.new("UICorner")
                    local TextBox = Instance.new("TextBox")
                    local TextboxBackL = Instance.new("UIListLayout")
                    local TextboxBackP = Instance.new("UIPadding")  
            
                    TextboxModule.Name = "TextboxModule"
                    TextboxModule.Parent = Objs
                    TextboxModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    TextboxModule.BackgroundTransparency = 1.000
                    TextboxModule.BorderSizePixel = 0
                    TextboxModule.Position = UDim2.new(0, 0, 0, 0)
                    TextboxModule.Size = UDim2.new(0, 428, 0, 38)
                    
                    TextboxBack.Name = "TextboxBack"
                    TextboxBack.Parent = TextboxModule
                    TextboxBack.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                    TextboxBack.BorderSizePixel = 0
                    TextboxBack.Size = UDim2.new(0, 428, 0, 38)
                    TextboxBack.AutoButtonColor = false
                    TextboxBack.Font = Enum.Font.GothamSemibold
                    TextboxBack.Text = "   " .. text
                    TextboxBack.TextColor3 = Color3.fromRGB(255, 255, 255)
                    TextboxBack.TextSize = 16.000
                    TextboxBack.TextXAlignment = Enum.TextXAlignment.Left
                    
                    TextboxBackC.CornerRadius = UDim.new(0, 6)
                    TextboxBackC.Name = "TextboxBackC"
                    TextboxBackC.Parent = TextboxBack
                    
                    BoxBG.Name = "BoxBG"
                    BoxBG.Parent = TextboxBack
                    BoxBG.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    BoxBG.BorderSizePixel = 0
                    BoxBG.Position = UDim2.new(0.763033211, 0, 0.289473683, 0)
                    BoxBG.Size = UDim2.new(0, 100, 0, 28)
                    BoxBG.AutoButtonColor = false
                    BoxBG.Font = Enum.Font.Gotham
                    BoxBG.Text = ""
                    BoxBG.TextColor3 = Color3.fromRGB(255, 255, 255)
                    BoxBG.TextSize = 14.000
                    
                    BoxBGC.CornerRadius = UDim.new(0, 6)
                    BoxBGC.Name = "BoxBGC"
                    BoxBGC.Parent = BoxBG
                    
                    TextBox.Parent = BoxBG
                    TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    TextBox.BackgroundTransparency = 1.000
                    TextBox.BorderSizePixel = 0
                    TextBox.Size = UDim2.new(1, 0, 1, 0)
                    TextBox.Font = Enum.Font.Gotham
                    TextBox.Text = default
                    TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
                    TextBox.TextSize = 14.000
                    
                    TextboxBackL.Name = "TextboxBackL"
                    TextboxBackL.Parent = TextboxBack
                    TextboxBackL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                    TextboxBackL.SortOrder = Enum.SortOrder.LayoutOrder
                    TextboxBackL.VerticalAlignment = Enum.VerticalAlignment.Center
                    
                    TextboxBackP.Name = "TextboxBackP"
                    TextboxBackP.Parent = TextboxBack
                    TextboxBackP.PaddingRight = UDim.new(0, 6)
            
                    TextBox.FocusLost:Connect(function()
                      if TextBox.Text == "" then
                        TextBox.Text = default
                      end
                      library.flags[flag] = TextBox.Text
                      callback(TextBox.Text)
                    end)
            
                    TextBox:GetPropertyChangedSignal("TextBounds"):Connect(function()
                      BoxBG.Size = UDim2.new(0, TextBox.TextBounds.X + 30, 0, 28)
                    end)
                    BoxBG.Size = UDim2.new(0, TextBox.TextBounds.X + 30, 0, 28)
                  end
            
                  function section.Slider(section, text, flag, default, min, max, precise, callback)
                    local callback = callback or function() end
                    local min = min or 1
                    local max = max or 10
                    local default = default or min
                    local precise = precise or false
            
                    library.flags[flag] = default
            
                    assert(text, "No text provided")
                    assert(flag, "No flag provided")
                    assert(default, "No default value provided")
                    
                    local SliderModule = Instance.new("Frame")
                    local SliderBack = Instance.new("TextButton")
                    local SliderBackC = Instance.new("UICorner")
                    local SliderBar = Instance.new("Frame")
                    local SliderBarC = Instance.new("UICorner")
                    local SliderPart = Instance.new("Frame")
                    local SliderPartC = Instance.new("UICorner")
                    local SliderValBG = Instance.new("TextButton")
                    local SliderValBGC = Instance.new("UICorner")
                    local SliderValue = Instance.new("TextBox")
                    local MinSlider = Instance.new("TextButton")
                    local AddSlider = Instance.new("TextButton")   
                    
                    SliderModule.Name = "SliderModule"
                    SliderModule.Parent = Objs
                    SliderModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    SliderModule.BackgroundTransparency = 1.000
                    SliderModule.BorderSizePixel = 0
                    SliderModule.Position = UDim2.new(0, 0, 0, 0)
                    SliderModule.Size = UDim2.new(0, 428, 0, 38)
                    
                    SliderBack.Name = "SliderBack"
                    SliderBack.Parent = SliderModule
                    SliderBack.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                    SliderBack.BorderSizePixel = 0
                    SliderBack.Size = UDim2.new(0, 428, 0, 38)
                    SliderBack.AutoButtonColor = false
                    SliderBack.Font = Enum.Font.GothamSemibold
                    SliderBack.Text = "   " .. text
                    SliderBack.TextColor3 = Color3.fromRGB(255, 255, 255)
                    SliderBack.TextSize = 16.000
                    SliderBack.TextXAlignment = Enum.TextXAlignment.Left
                    
                    SliderBackC.CornerRadius = UDim.new(0, 6)
                    SliderBackC.Name = "SliderBackC"
                    SliderBackC.Parent = SliderBack
                    
                    SliderBar.Name = "SliderBar"
                    SliderBar.Parent = SliderBack
                    SliderBar.AnchorPoint = Vector2.new(0, 0.5)
                    SliderBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    SliderBar.BorderSizePixel = 0
                    SliderBar.Position = UDim2.new(0.369000018, 40, 0.5, 0)
                    SliderBar.Size = UDim2.new(0, 140, 0, 12)
                    
                    SliderBarC.CornerRadius = UDim.new(0, 4)
                    SliderBarC.Name = "SliderBarC"
                    SliderBarC.Parent = SliderBar
                    
                    SliderPart.Name = "SliderPart"
                    SliderPart.Parent = SliderBar
                    SliderPart.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    SliderPart.BorderSizePixel = 0
                    SliderPart.Size = UDim2.new(0, 54, 0, 13)
                    
                    SliderPartC.CornerRadius = UDim.new(0, 4)
                    SliderPartC.Name = "SliderPartC"
                    SliderPartC.Parent = SliderPart
                    
                    SliderValBG.Name = "SliderValBG"
                    SliderValBG.Parent = SliderBack
                    SliderValBG.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    SliderValBG.BorderSizePixel = 0
                    SliderValBG.Position = UDim2.new(0.883177578, 0, 0.131578952, 0)
                    SliderValBG.Size = UDim2.new(0, 44, 0, 28)
                    SliderValBG.AutoButtonColor = false
                    SliderValBG.Font = Enum.Font.Gotham
                    SliderValBG.Text = ""
                    SliderValBG.TextColor3 = Color3.fromRGB(255, 255, 255)
                    SliderValBG.TextSize = 14.000
                    
                    SliderValBGC.CornerRadius = UDim.new(0, 6)
                    SliderValBGC.Name = "SliderValBGC"
                    SliderValBGC.Parent = SliderValBG
                    
                    SliderValue.Name = "SliderValue"
                    SliderValue.Parent = SliderValBG
                    SliderValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    SliderValue.BackgroundTransparency = 1.000
                    SliderValue.BorderSizePixel = 0
                    SliderValue.Size = UDim2.new(1, 0, 1, 0)
                    SliderValue.Font = Enum.Font.Gotham
                    SliderValue.Text = "1000"
                    SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
                    SliderValue.TextSize = 14.000
                    
                    MinSlider.Name = "MinSlider"
                    MinSlider.Parent = SliderModule
                    MinSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    MinSlider.BackgroundTransparency = 1.000
                    MinSlider.BorderSizePixel = 0
                    MinSlider.Position = UDim2.new(0.296728969, 40, 0.236842096, 0)
                    MinSlider.Size = UDim2.new(0, 20, 0, 20)
                    MinSlider.Font = Enum.Font.Gotham
                    MinSlider.Text = "-"
                    MinSlider.TextColor3 = Color3.fromRGB(255, 255, 255)
                    MinSlider.TextSize = 24.000
                    MinSlider.TextWrapped = true
                    
                    AddSlider.Name = "AddSlider"
                    AddSlider.Parent = SliderModule
                    AddSlider.AnchorPoint = Vector2.new(0, 0.5)
                    AddSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    AddSlider.BackgroundTransparency = 1.000
                    AddSlider.BorderSizePixel = 0
                    AddSlider.Position = UDim2.new(0.810906529, 0, 0.5, 0)
                    AddSlider.Size = UDim2.new(0, 20, 0, 20)
                    AddSlider.Font = Enum.Font.Gotham
                    AddSlider.Text = "+"
                    AddSlider.TextColor3 = Color3.fromRGB(255, 255, 255)
                    AddSlider.TextSize = 24.000
                    AddSlider.TextWrapped = true
                    
                    local funcs = {
                      SetValue = function(self, value)
                        local percent = (mouse.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X
                        if value then
                          percent = (value - min) / (max - min)
                        end
                        percent = math.clamp(percent, 0, 1)
                        if precise then
                          value = value or tonumber(string.format("%.1f", tostring(min + (max - min) * percent)))
                        else
                          value = value or math.floor(min + (max - min) * percent)
                        end
                        library.flags[flag] = tonumber(value)
                        SliderValue.Text = tostring(value)
                        SliderPart.Size = UDim2.new(percent, 0, 1, 0)
                        callback(tonumber(value))
                      end
                    }
            
                    MinSlider.MouseButton1Click:Connect(function()
                      local currentValue = library.flags[flag]
                      currentValue = math.clamp(currentValue - 1, min, max)
                      funcs:SetValue(currentValue)
                    end)
            
                    AddSlider.MouseButton1Click:Connect(function()
                      local currentValue = library.flags[flag]
                      currentValue = math.clamp(currentValue + 1, min, max)
                      funcs:SetValue(currentValue)
                    end)
                    
                    funcs:SetValue(default)
            
                    local dragging, boxFocused, allowed = false, false, {
                      [""] = true,
                      ["-"] = true
                    }
            
                    SliderBar.InputBegan:Connect(function(input)
                      if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        funcs:SetValue()
                        dragging = true
                      end
                    end)
            
                    services.UserInputService.InputEnded:Connect(function(input)
                      if dragging and input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                      end
                    end)
            
                    services.UserInputService.InputChanged:Connect(function(input)
                      if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        funcs:SetValue()
                      end
                    end)
            
                    SliderValue.Focused:Connect(function()
                      boxFocused = true
                    end)
            
                    SliderValue.FocusLost:Connect(function()
                      boxFocused = false
                      if SliderValue.Text == "" then
                        funcs:SetValue(default)
                      end
                    end)
            
                    SliderValue:GetPropertyChangedSignal("Text"):Connect(function()
                      if not boxFocused then return end
                      SliderValue.Text = SliderValue.Text:gsub("%D+", "")
                      
                      local text = SliderValue.Text
                      
                      if not tonumber(text) then
                        SliderValue.Text = SliderValue.Text:gsub('%D+', '')
                      elseif not allowed[text] then
                        if tonumber(text) > max then
                          text = max
                          SliderValue.Text = tostring(max)
                        end
                        funcs:SetValue(tonumber(text))
                      end
                    end)
            
                    return funcs
                  end
            
                  function section.Dropdown(section, text, flag, options, callback)
                    local callback = callback or function() end
                    local options = options or {}
                    assert(text, "No text provided")
                    assert(flag, "No flag provided")
            
                    library.flags[flag] = nil
                    
                    local DropdownModule = Instance.new("Frame")
                    local DropdownTop = Instance.new("TextButton")
                    local DropdownTopC = Instance.new("UICorner")
                    local DropdownOpen = Instance.new("TextButton")
                    local DropdownText = Instance.new("TextBox")
                    local DropdownModuleL = Instance.new("UIListLayout")
                    local Option = Instance.new("TextButton")
                    local OptionC = Instance.new("UICorner")        
            
                    DropdownModule.Name = "DropdownModule"
                    DropdownModule.Parent = Objs
                    DropdownModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropdownModule.BackgroundTransparency = 1.000
                    DropdownModule.BorderSizePixel = 0
                    DropdownModule.ClipsDescendants = true
                    DropdownModule.Position = UDim2.new(0, 0, 0, 0)
                    DropdownModule.Size = UDim2.new(0, 428, 0, 38)
                    
                    DropdownTop.Name = "DropdownTop"
                    DropdownTop.Parent = DropdownModule
                    DropdownTop.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                    DropdownTop.BorderSizePixel = 0
                    DropdownTop.Size = UDim2.new(0, 428, 0, 38)
                    DropdownTop.AutoButtonColor = false
                    DropdownTop.Font = Enum.Font.GothamSemibold
                    DropdownTop.Text = ""
                    DropdownTop.TextColor3 = Color3.fromRGB(255, 255, 255)
                    DropdownTop.TextSize = 16.000
                    DropdownTop.TextXAlignment = Enum.TextXAlignment.Left
                    
                    DropdownTopC.CornerRadius = UDim.new(0, 6)
                    DropdownTopC.Name = "DropdownTopC"
                    DropdownTopC.Parent = DropdownTop
                    
                    DropdownOpen.Name = "DropdownOpen"
                    DropdownOpen.Parent = DropdownTop
                    DropdownOpen.AnchorPoint = Vector2.new(0, 0.5)
                    DropdownOpen.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropdownOpen.BackgroundTransparency = 1.000
                    DropdownOpen.BorderSizePixel = 0
                    DropdownOpen.Position = UDim2.new(0.918383181, 0, 0.5, 0)
                    DropdownOpen.Size = UDim2.new(0, 20, 0, 20)
                    DropdownOpen.Font = Enum.Font.Gotham
                    DropdownOpen.Text = "+"
                    DropdownOpen.TextColor3 = Color3.fromRGB(255, 255, 255)
                    DropdownOpen.TextSize = 24.000
                    DropdownOpen.TextWrapped = true
                    
                    DropdownText.Name = "DropdownText"
                    DropdownText.Parent = DropdownTop
                    DropdownText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DropdownText.BackgroundTransparency = 1.000
                    DropdownText.BorderSizePixel = 0
                    DropdownText.Position = UDim2.new(0.0373831764, 0, 0, 0)
                    DropdownText.Size = UDim2.new(0, 184, 0, 38)
                    DropdownText.Font = Enum.Font.GothamSemibold
                    DropdownText.PlaceholderColor3 = Color3.fromRGB(255, 255, 255)
                    DropdownText.PlaceholderText = text
                    DropdownText.Text = ""
                    DropdownText.TextColor3 = Color3.fromRGB(255, 255, 255)
                    DropdownText.TextSize = 16.000
                    DropdownText.TextXAlignment = Enum.TextXAlignment.Left
                    
                    DropdownModuleL.Name = "DropdownModuleL"
                    DropdownModuleL.Parent = DropdownModule
                    DropdownModuleL.SortOrder = Enum.SortOrder.LayoutOrder
                    DropdownModuleL.Padding = UDim.new(0, 4)
            
                    local setAllVisible = function()
                      local options = DropdownModule:GetChildren() 
                      for i=1, #options do
                        local option = options[i]
                        if option:IsA("TextButton") and option.Name:match("Option_") then
                          option.Visible = true
                        end
                      end
                    end
            
                    local searchDropdown = function(text)
                      local options = DropdownModule:GetChildren()
                      for i=1, #options do
                        local option = options[i]
                        if text == "" then
                          setAllVisible()
                        else
                          if option:IsA("TextButton") and option.Name:match("Option_") then
                            if option.Text:lower():match(text:lower()) then
                              option.Visible = true
                            else
                              option.Visible = false
                            end
                          end
                        end
                      end
                    end
            
                    local open = false
                    local ToggleDropVis = function()
                      open = not open
                      if open then setAllVisible() end
                      DropdownOpen.Text = (open and "-" or "+")
                      DropdownModule.Size = UDim2.new(0, 428, 0, (open and DropdownModuleL.AbsoluteContentSize.Y + 4 or 38))
                    end
            
                    DropdownOpen.MouseButton1Click:Connect(ToggleDropVis)
                    DropdownText.Focused:Connect(function()
                      if open then return end
                      ToggleDropVis()
                    end)
            
                    DropdownText:GetPropertyChangedSignal("Text"):Connect(function()
                      if not open then return end
                      searchDropdown(DropdownText.Text)
                    end)
            
                    DropdownModuleL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                      if not open then return end
                      DropdownModule.Size = UDim2.new(0, 428, 0, (DropdownModuleL.AbsoluteContentSize.Y + 4))
                    end)
                    
                    local funcs = {}
                    funcs.AddOption = function(self, option)
                      local Option = Instance.new("TextButton")
                      local OptionC = Instance.new("UICorner")     
            
                      Option.Name = "Option_" .. option
                      Option.Parent = DropdownModule
                      Option.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                      Option.BorderSizePixel = 0
                      Option.Position = UDim2.new(0, 0, 0.328125, 0)
                      Option.Size = UDim2.new(0, 428, 0, 26)
                      Option.AutoButtonColor = false
                      Option.Font = Enum.Font.Gotham
                      Option.Text = option
                      Option.TextColor3 = Color3.fromRGB(255, 255, 255)
                      Option.TextSize = 14.000
                      
                      OptionC.CornerRadius = UDim.new(0, 6)
                      OptionC.Name = "OptionC"
                      OptionC.Parent = Option
            
                      Option.MouseButton1Click:Connect(function()
                        ToggleDropVis()
                        callback(Option.Text)
                        DropdownText.Text = Option.Text
                        library.flags[flag] = Option.Text
                      end)
                    end
                    
                    
                    funcs.RemoveOption = function(self, option)
                      local option = DropdownModule:FindFirstChild("Option_" .. option)
                      if option then option:Destroy() end
                    end
            
                    funcs.SetOptions = function(self, options)
                      for _, v in next, DropdownModule:GetChildren() do
                        if v.Name:match("Option_") then
                          v:Destroy()
                        end
                      end
                      for _,v in next, options do
                        funcs:AddOption(v)
                      end
                    end
            
                    funcs:SetOptions(options)
                    
                    return funcs
                  end
                  return section
                end
                return tab
              end
              return window
            end

--#endregion


 --#region Anti hook
 --nope
--#endregion


 --#region Hardware ID
 --[[local http_request = http_request or request or HttpPost or syn.request

 local body = http_request({Url = 'https://httpbin.org/get'; Method = 'GET'}).Body;
 local decoded = game:GetService('HttpService'):JSONDecode(body)
 for i,v in next, decoded.headers do
    if string.find(tostring(i),"Fingerprint") then
       hwid = v 
    end
 end

 HwidMembers = {"6a4ea6e2c305e276c3b57be5c3556c00a77a21bd4b641731c349f314510b8c6a848a8b7a0a277b6be405aeaed486b57b29260856760e936b7804f7b94dad0086","7ad3cca765d44bdebb25224ccfb6eca35a74cedab6e6d76d3dd2c41b094501c7073a9b7c726d370c2d1f5663802b8ee3c0bd5c477fd6c583cec9250e575a2b56"};
 Apples = {"6a4ea6e2c305e276c3b57be5c3556c00a77a21bd4b641731c349f314510b8c6a848a8b7a0a277b6be405aeaed486b57b29260856760e936b7804f7b94dad0086"};
 
 Gamers = {"7ad3cca765d44bdebb25224ccfb6eca35a74cedab6e6d76d3dd2c41b094501c7073a9b7c726d370c2d1f5663802b8ee3c0bd5c477fd6c583cec9250e575a2b56"};
 --]]
--#endregion

    
 --#region Supported for sorter
local Current = identifyexecutor()
local Supported = {"Synapse X","ScriptWare",}
               
if not table.find(Supported,Current) then
    canusefastsorter = false
    else
    canusefastsorter = true
end
--#endregion


 --#region notifications
--Walkspeed <font color='rgb(130, 220, 120)'>Enabled</font>

local rs = game:GetService("RunService")
local ts = game:GetService("TweenService")

local function object(class, properties)
	local localObject = Instance.new(class)

	pcall(function()
		localObject.BorderSizePixel = 0
		localObject.BackgroundColor3 = Color3.fromRGB(255,255,255)
		localObject.AutoButtonColor = false
	end)

	for property, value in next, properties do
		localObject[property] = value
	end

	local methods = {}

	function methods:object(class, properties)
		if not properties["Parent"] then
			properties.Parent = localObject
		end
		return object(class, properties)
	end

	function methods:round(radius)
		radius = radius or 4
		object("UICorner", {
			Parent = localObject,
			CornerRadius = UDim.new(0, radius)
		})
		return methods
	end

	function methods:tween(mutations)
		ts:Create(localObject, TweenInfo.new(0.25), mutations):Play()
	end

	methods.AbsoluteObject = localObject

	return setmetatable(methods, {
		__index = function(_, k)
			return localObject[k]
		end,
		__newindex = function(_, k, v)
			localObject[k] = v
		end,
	})
end

--[[if not ((rs:IsStudio() and game.Players.LocalPlayer.PlayerGui) or game.CoreGui):FindFirstChild("Abstract Notifications") then

end]]

local gui = object("ScreenGui", {
	Parent = (rs:IsStudio() and game.Players.LocalPlayer.PlayerGui) or game.CoreGui
})

local notifications = {
	theme = "dark",
	colorSchemes = {
		dark = {
			Main = Color3.fromRGB(25, 25, 25),
			Secondary = Color3.fromRGB(25, 25, 25),
			Icon = Color3.fromRGB(255, 255, 255),
			Text = Color3.fromRGB(255, 255, 255),
			SecondaryText = Color3.fromRGB(200, 200, 200),
			Accept = Color3.fromRGB(60, 60, 60),
			Dismiss = Color3.fromRGB(30, 30, 30)
		}
	},
	closeOpened = nil
}

function notifications:notify(options)
	local theme = self.colorSchemes[notifications.theme]
	local callbacksBool = options.Accept or options.Dismiss
	options.Title = options.Title or "Notification"
	if not callbacksBool then
		options.Length = 3
	end
	if self.closeOpened then
		self.closeOpened()
	end

	local mainFrame = gui:object("Frame", {
		Size = UDim2.fromOffset(400, (callbacksBool and 100) or 56),
		Position = UDim2.new(1, -20, 1, -10),
		AnchorPoint = Vector2.new(1, 1),
		BackgroundColor3 = theme.Main,
		Visible = false,
		BackgroundTransparency = 1 --
	}):round()

	local content = mainFrame:object("Frame", {
		Size = UDim2.new(1, 0, 1, ((callbacksBool and -44) or 0)),
		BackgroundTransparency = 1
	})

	local icon = content:object("ImageLabel", {
		Image = (options.Icon and ("rbxassetid://" .. tostring(options.Icon))) or "rbxassetid://6031071053",
		BackgroundTransparency = 1,
		ImageColor3 = theme.Icon,
		AnchorPoint = Vector2.new(0, 0.5),
		Position = UDim2.new(0, 15, 0.5, 0),
		Size = UDim2.fromOffset(30, 30),
		ImageTransparency = 1
	})

	local title = content:object("TextLabel", {
		TextColor3 = theme.Text,
		Font = Enum.Font.SourceSansSemibold,
		TextSize = 18,
		Position = UDim2.fromOffset(60, 10),
		Size = UDim2.new(1, -70, 0, 18),
		TextXAlignment = Enum.TextXAlignment.Left,
		BackgroundTransparency = 1,
		Text = options.Title,
		RichText = true,
		TextTransparency = 1 --
	})

	local description; if options.Description then
		description = content:object("TextLabel", {
			TextColor3 = theme.SecondaryText,
			Font = Enum.Font.SourceSans,
			TextSize = 18,
			Position = UDim2.new(0, 60, 1, -10),
			Size = UDim2.new(1, -70, 1, 0),
			TextXAlignment = Enum.TextXAlignment.Left,
			BackgroundTransparency = 1,
			AnchorPoint = Vector2.new(0, 1),
			Text = options.Description,
			TextWrapped = true,
			RichText = true,
			TextTransparency = 1 --
		})
	end

	local callbacksContainer; if callbacksBool then 
		callbacksContainer = mainFrame:object("Frame", {
			Size = UDim2.new(1, 0, 0, 44),
			AnchorPoint = Vector2.new(0, 1),
			Position = UDim2.fromScale(0, 1),
			BackgroundColor3 = theme.Secondary,
			BackgroundTransparency = 1 --
		}):round()

		local roundCorrection = callbacksContainer:object("Frame", {
			Size = UDim2.fromScale(1, 0.5),
			BackgroundColor3 = theme.Secondary,
			BackgroundTransparency = 1 --
		})
	end

	local close

	local acceptButton; if options.Accept then
		options.Accept.Callback = options.Accept.Callback or function() end
		acceptButton = callbacksContainer:object("TextButton", {
			Size = UDim2.new(0, 100, 0.5, 0),
			Position = UDim2.fromScale(0.5, 0.5),
			BackgroundColor3 = theme.Accept,
			AnchorPoint = Vector2.new(0.5, 0.5),
			TextColor3 = theme.Text,
			Font = Enum.Font.SourceSans,
			TextSize = 18,
			Text = options.Accept.Text or "Yes",
			BackgroundTransparency = 1, --
			TextTransparency = 1 --
		}):round()

		if acceptButton.TextBounds.X > 100 then
			acceptButton.Size = UDim2.new(0, acceptButton.TextBounds.X + 10, 0.5, 0)
		end

		acceptButton.MouseButton1Click:connect(function()
			options.Accept.Callback()
			close()
		end)
	end

	local dismissButton; if options.Dismiss then
		options.Dismiss.Callback = options.Dismiss.Callback or function() end
		dismissButton = callbacksContainer:object("TextButton", {
			Size = UDim2.new(0, 100, 0.5, 0),
			Position = UDim2.fromScale(0.5, 0.5),
			BackgroundColor3 = theme.Dismiss,
			AnchorPoint = Vector2.new(0.5, 0.5),
			TextColor3 = theme.Text,
			Font = Enum.Font.SourceSans,
			TextSize = 18,
			Text = options.Dismiss.Text or "No",
			BackgroundTransparency = 1, --
			TextTransparency = 1 --
		}):round()

		if dismissButton.TextBounds.X > 100 then
			dismissButton.Size = UDim2.new(0, dismissButton.TextBounds.X + 10, 0.5, 0)
		end

		dismissButton.MouseButton1Click:connect(function()
			options.Dismiss.Callback()
			close()
		end)
	end

	local closing = false

	close = function()
		closing = true
		self.closeOpened = nil
		spawn(function()
			icon:tween{ImageTransparency = 1}
			title:tween{TextTransparency = 1}
			if description then description:tween{TextTransparency = 1} end
			if acceptButton then acceptButton:tween{BackgroundTransparency = 1, TextTransparency = 1} end
			if dismissButton then dismissButton:tween{BackgroundTransparency = 1, TextTransparency = 1} end
			task.wait(0.15)
			if callbacksContainer then callbacksContainer:tween{BackgroundTransparency = 1} end
			task.wait(0.1)
			mainFrame:tween{BackgroundTransparency = 1, Position = UDim2.new(1, -20, 1, -10)}
			task.wait(0.25)
			mainFrame.AbsoluteObject:Destroy()
		end)
	end

	self.closeOpened = close

	if options.Description and description.TextBounds.Y > 18 then
		mainFrame.Size = UDim2.fromOffset(mainFrame.AbsoluteSize.X, description.TextBounds.Y + (38 + ((callbacksBool and 44) or 0)))
	end

	mainFrame.Size = UDim2.fromOffset(math.clamp(math.max((((acceptButton and acceptButton.AbsoluteSize.X) or 100) + ((dismissButton and dismissButton.AbsoluteSize.X) or 100) + 30) or 230, 70 + description.TextBounds.X), 230, 400), mainFrame.AbsoluteSize.Y)

	description.Size = UDim2.new(1, -70, 0, description.TextBounds.Y)

	if options.Accept and options.Dismiss then
		acceptButton.Position = UDim2.new(0.5, 5, 0.5, 0)
		acceptButton.AnchorPoint = Vector2.new(0, 0.5)
		dismissButton.Position = UDim2.new(0.5, -5, 0.5, 0)
		dismissButton.AnchorPoint = Vector2.new(1, 0.5)
	end

	mainFrame.Visible = true

	spawn(function()
		mainFrame:tween{BackgroundTransparency = 0, Position = UDim2.new(1, -20, 1, -20)}
		task.wait(0.1)
		if callbacksContainer then callbacksContainer:tween{BackgroundTransparency = 0} end
		task.wait(0.15)
		icon:tween{ImageTransparency = 0}
		title:tween{TextTransparency = 0}
		if description then description:tween{TextTransparency = 0} end
		if acceptButton then acceptButton:tween{BackgroundTransparency = 0, TextTransparency = 0} end
		if dismissButton then dismissButton:tween{BackgroundTransparency = 0, TextTransparency = 0} end
		if options.Length then
			task.wait(options.Length)
			if not closing then
				close()
			end
		end
	end)
end

function notifications:notification(options)
	self:notify(options)
end

function notifications:message(options)
	self:notify(options)
end



--[[ notifications:notify{
    Title = "Warning!",
    Description = "You are going to go idle, would you like to enable anti-afk?",
    Accept = {
    Text = "Yes",
        Callback = function()
            print("Accepted")
        end,
    },
    Dismiss = {
        Text = "No",
        Callback = function()
            print("Declined")
        end,
    }
}
--]]



--#endregion


 --#region Whitelist Check
--[[
if table.find(HwidMembers, hwid) then
  Check = true
end
    
if not Check then
    MembersCheck = false
    notifications:notify{Title = "Butter",Description = "You are not a whitelisted member if you wish to apply to be a whitelisted message Applebox#0001",Accept = {Text = "Okay!"},Length = 5}
    task.wait(2)
    while true do end
end


if table.find(Apples, hwid) then
  notifications:message{Title = "Butter",Description = "Hey Applebox",Icon = 6023426926}
end

if table.find(Gamers, hwid) then
  notifications:message{Title = "Butter",Description = "Hey Gamer",Icon = 6023426926}
end
--]] 
--#endregion


 --#region Progress bar

LoadingScreen = Instance.new("ScreenGui")
Frame = Instance.new("Frame")
Bar = Instance.new("Frame")
Inside = Instance.new("Frame")
UICorner = Instance.new("UICorner")
UICorner_2 = Instance.new("UICorner")
TextLabel = Instance.new("TextLabel")

--Properties:

LoadingScreen.Name = "LoadingScreen"
LoadingScreen.Parent = game:GetService("CoreGui")
LoadingScreen.ResetOnSpawn = false

Frame.Parent = LoadingScreen
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Frame.BackgroundTransparency = 1.000
Frame.Position = UDim2.new(0, 271, 0, 153)
Frame.Size = UDim2.new(0, 282, 0, 86)
Frame.Visible = false

Bar.Name = "Bar"
Bar.Parent = Frame
Bar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
Bar.Position = UDim2.new(0, -86, 0, -126)
Bar.Size = UDim2.new(0, 237, 0, 23)

Inside.Name = "Inside"
Inside.Parent = Bar
Inside.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
Inside.BackgroundTransparency = 1.000
Inside.Position = UDim2.new(0, 0, 0, 1)
Inside.Size = UDim2.new(0, 0, 0, 21)

UICorner.Parent = Inside

UICorner_2.Parent = Bar

TextLabel.Parent = Bar
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.Position = UDim2.new(0, -12, 0, -36)
TextLabel.Size = UDim2.new(0, 58, 0, 45)
TextLabel.Font = Enum.Font.SourceSans
TextLabel.Text = "0"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 25.000

frame = LoadingScreen.Frame
bar = frame.Bar
inside = bar.Inside



player = game.Players.LocalPlayer





function ResizeBar(percent,amt)
frame.Visible = true
inside.BackgroundTransparency = 0
bar.TextLabel.Text = percent
inside:TweenSize(UDim2.new(percent/amt, 0, 0.9, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Linear, 0.3, true)
spawn(function()
wait(2)
if percent == amt then
frame.Visible = false
end
end)
end
--#endregion


 --#region Config
getgenv().Settings = {
    Devlogs = true,
    keyuiToggle = "RightShift",
    theR = 0,
    theG = 255,
    theB = 0,
};


local JSON
local HttpService = game:GetService('HttpService')

function SaveSettings()
    JSON = HttpService:JSONEncode(getgenv().Settings)
    writefile('Butter.txt',JSON)
end

function LoadSettings()
    if isfile('Butter.txt') then
    getgenv().Settings = HttpService:JSONDecode(readfile('Butter.txt'))
    end
end


--#endregion


 --#region Functions
local FPlayer = game.Players.LocalPlayer
local NPlayer = FPlayer.Name
local RPlayer = FPlayer.Character
local ShopIDS = {["WoodRUs"] = 7,["FurnitureStore"] = 8,["FineArt"] = 11,["CarStore"] = 9,["LogicStore"] = 12,["ShackShop"] = 10}
local Mouse = FPlayer:GetMouse()
local fancytimer = game:GetService("Workspace").Stores.FurnitureStore.RDoor.Settings.Pos.Value
local Boxedcars = game:GetService("Workspace").Stores.CarStore.RDoor.Settings.Pos.Value
getgenv().Key = "LeftControl"
--getgenv().clicktp = true

function devlogs()
print(identifyexecutor())
print(os.date("%I:%M"))
print(os.date("%Y:%m:%d"))
print("Butter: " .. version)
print("")

print(NPlayer)
end

if getgenv().Settings.Devlogs then
devlogs()
end

function endtree()
local TreeAdded = game:GetService("Workspace").LogModels.ChildAdded:Connect(function(v)
  if v:WaitForChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
      if v:WaitForChild("TreeClass") and v.TreeClass.Value == Type then
          if v:WaitForChild("WoodSection") then
              if not v.PrimaryPart then
                v.PrimaryPart = v:FindFirstChild("WoodSection")  
              end
              for i = 1,50 do
                  game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                  v:SetPrimaryPartCFrame(ETOldPos)
                  task.wait()
              end
              TreeChopped = true
              if Type == "LoneCave" then
                  game.Players.LocalPlayer.Character.Head:Destroy()
              end
          end
      end
  end
end)
end

function GodMode()
  local GM = game.Players.LocalPlayer.Character.HumanoidRootPart.RootJoint
  GM:Clone().Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
  GM:Destroy()
end

function BringAllLogs()
  OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
  for i,v in next, game:GetService("Workspace").LogModels:GetChildren() do
  if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v:FindFirstChild("WoodSection").CFrame.p)
      if not v.PrimaryPart then
          v.PrimaryPart = v:FindFirstChild("WoodSection")
      end
      for i = 1,50 do
          game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
          v:SetPrimaryPartCFrame(OldPos)
          task.wait()
      end
  end
  task.wait()
  end
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
end

            
function SellAllLogs()
  OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
  --repeat
      for i,v in next, game:GetService("Workspace").LogModels:GetChildren() do
          if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
              game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v:FindFirstChild("WoodSection").CFrame.p)
              if not v.PrimaryPart then
                  v.PrimaryPart = v:FindFirstChild("WoodSection")  
              end
              spawn(function()
                  for i = 1,50 do
                      game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                      v:SetPrimaryPartCFrame(CFrame.new(314, -0.5, 86.822))
                      task.wait()
                  end
              end)
          end
          task.wait()
      end
      task.wait()
  --until CheckForLogs() == false
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
end

            
            
function ViewEndTree(Val)
  for i,v in pairs(game.Workspace:GetChildren()) do
      if v.Name == "TreeRegion" then
          for i,v in pairs(v:GetChildren()) do
              if v:FindFirstChild("Owner") and tostring(v.Owner.Value) == "nil" then
                  if v:FindFirstChild("TreeClass") and tostring(v.TreeClass.Value) == "LoneCave" then
                      if Val then
                          game.Workspace.Camera.CameraSubject = v:FindFirstChild("WoodSection")
                          else
                          game.Workspace.Camera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
                      end
                  end
              end
          end
      end
  end
end

function GameMenuTheme(BGColor, TxtColor)
    for i,v in next, game:GetService("Players").LocalPlayer.PlayerGui:GetChildren() do
        if v.Name ~= "Chat" and v.Name ~= "TargetGui" then
            for i,v in next, v:GetDescendants() do
                if not v:FindFirstChild"UICorner" then
                    Instance.new("UICorner",v)
                end
                if v.Name == "DropShadow" then
                    v:Destroy()
                end
                if v:IsA("TextButton") or v:IsA("Frame") or v:IsA("ScrollingFrame") then
                    v.BackgroundColor3 = BGColor
                end
                if v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("TextBox") then
                    v.TextColor3 = TxtColor
                    v.BackgroundColor3 = BGColor
                    v.Font = Enum.Font.GothamMedium
                end
            end
        end
    end
end


GameMenuTheme(Color3.fromRGB(25, 25, 25), Color3.fromRGB(getgenv().Settings.theR,getgenv().Settings.theG,getgenv().SettingstheB))

            --GET PLAYERS table
function GetPlrs()
   local Plrs = {}
    for i,v in next, game.Players:GetPlayers() do
    if not table.find(Plrs,v.Name) then
    table.insert(Plrs,v.Name)
      end
    end
    return Plrs
end
--

function CountAxesL(TESTPLERR)
  Amount = 0
      for a,b in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
          if b.Name ~= "BlueprintTool" and b.Name == "Tool" then
              Amount = Amount + 1
          end
      end
notifications:message{
Title = "Butter",
Description = 'You have ' ..Amount.. " axes in your Backpack",
Icon = 6023426926
}
end

getgenv().Speed = 16
function Walkspeed()
game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = getgenv().Speed
end)
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = getgenv().Speed
end


local userInput = game:GetService("UserInputService")
 
 local function beginSprint(input, gameProcessed)
 
   if not gameProcessed then
 
     if input.UserInputType == Enum.UserInputType.Keyboard then
 
       local keycode = input.KeyCode
 
       if keycode == Enum.KeyCode.LeftShift then
         if not game:GetService("Players").LocalPlayer.PlayerGui.ItemDraggingGUI.CanRotate.Visible then
           getgenv().Speed = getgenv().SprintSpeed
           Walkspeed()
         else
           getgenv().Speed = 0
           Walkspeed()
         end
       end
 
     end
 
   end
 end
 
 
 
 
 
 local function endSprint(input, gameProcessed)
 
   if not gameProcessed then
 
     if input.UserInputType == Enum.UserInputType.Keyboard then
 
       local keycode = input.KeyCode
 
       if keycode == Enum.KeyCode.LeftShift then
 
         getgenv().Speed = Nspeed
         Walkspeed()
       end
 
     end
 
   end
 
 end
 
 
 
 userInput.InputBegan:Connect(beginSprint)
 
 userInput.InputEnded:Connect(endSprint)

local HitPoints={['Beesaxe']= 1.4;['AxeAmber']= 3.39;['ManyAxe']= 10.2;['BasicHatchet']= 0.2;['Axe1']= 0.55;['Axe2']= 0.93;['AxeAlphaTesters']= 1.5;['Rukiryaxe']= 1.68;['Axe3']= 1.45;['AxeBetaTesters']= 1.45;['FireAxe']= 0.6;['SilverAxe']= 1.6;['EndTimesAxe']= 1.58;['AxeChicken']= 0.9;['CandyCaneAxe']= 0;['AxeTwitter']= 1.65}
local WaypointsPositions = {["The Den"] = CFrame.new(323, 49, 1930), ["Lighthouse"] = CFrame.new(1464.8, 356.3, 3257.2), ["Safari"] = CFrame.new(111.853, 11.0005, -998.805), ["Bridge"] = CFrame.new(112.308, 11.0005, -782.358), ["Bob's Shack"] = CFrame.new(260, 8, -2542), ["EndTimes Cave"] = CFrame.new(113, -214, -951), ["The Swamp"] = CFrame.new(-1209, 132, -801), ["The Cabin"] = CFrame.new(1244, 66, 2306), ["Volcano"] = CFrame.new(-1585, 625, 1140), ["Boxed Cars"] = CFrame.new(509, 5.2, -1463), ["Tiaga Peak"] = CFrame.new(1560, 410, 3274), ["Land Store"] = CFrame.new(258, 5, -99), ["Link's Logic"] = CFrame.new(4605, 3, -727), ["Palm Island"] = CFrame.new(2549, -5, -42), ["Palm Island 2"] = CFrame.new(1960, -5.900, -1501), ["Palm Island 3"] = CFrame.new(4344, -5.900, -1813), ["Fine Art Shop"] = CFrame.new(5207, -166, 719), ["SnowGlow Biome"] = CFrame.new(-1086.85, -5.89978, -945.316), ["Cave"] = CFrame.new(3581, -179, 430), ["Shrine Of Sight"] = CFrame.new(-1600, 195, 919), ["Fancy Furnishings"] = CFrame.new(491, 13, -1720), ["Docks"] = CFrame.new(1114, 3.2, -197), ["Strange Man"] = CFrame.new(1061, 20, 1131), ["Wood Dropoff"] = CFrame.new(323.406, -2.8, 134.734), ["Snow Biome"] = CFrame.new(889.955, 59.7999, 1195.55), ["Wood RUs"] = CFrame.new(265, 5, 57), ["Green Box"] = CFrame.new(-1668.05, 351.174, 1475.39), ["Spawn"] = CFrame.new(172, 2, 74), ["Cherry Meadow"] = CFrame.new(220.9, 59.8, 1305.8), ["Bird Cave"] = CFrame.new(4813.1, 33.5, -978.8),}

function OneUnitCutter(Val)
  if not Val then PlankReAdded:Disconnect() UnitCutterClick:Disconnect() return end
  PlankReAdded = game:GetService("Workspace").PlayerModels.ChildAdded:Connect(function(v)
      if v:WaitForChild("TreeClass") and v:WaitForChild("WoodSection") then
          SelTree = v
          task.wait()
      end
  end)

  UnitCutterClick = Mouse.Button1Up:Connect(function()
      Clicked = Mouse.Target
      if not PlrHasTool() then print("Failed to find a tool") return end
      if Clicked.Name == "WoodSection" then
          SelTree = Clicked.Parent
          game.Players.LocalPlayer.Character:MoveTo(Clicked.Position + Vector3.new(0,3,-3))
          repeat
              if UnitCutter == false then break end
              ChopTree(SelTree.CutEvent,1,1,SelTree.TreeClass.Value)
              if SelTree:FindFirstChild("Cut") then game.Players.LocalPlayer.Character:MoveTo(SelTree:FindFirstChild("Cut").Position + Vector3.new(0,3,-3)) end
              task.wait()
          until SelTree.WoodSection.Size.X <= 1.88 and SelTree.WoodSection.Size.Y <= 1.88 and SelTree.WoodSection.Size.Z <= 1.88
      end
  end)
end

function GetBlueprints()
  BluePrints = {}
  for i,v in next, game:GetService("ReplicatedStorage").ClientItemInfo:GetChildren() do
    if v:FindFirstChild"Type" and v.Type.Value == "Structure" or v.Type.Value == "Furniture" then
      if v:FindFirstChild"WoodCost" then
        if not game:GetService("Players").LocalPlayer.PlayerBlueprints.Blueprints:FindFirstChild(v.Name) then
          table.insert(BluePrints, v.Name)
        end
      end
    end
  end
  return BluePrints
end

function GetPing()
  local Time = tick()
  game:GetService("ReplicatedStorage").TestPing:InvokeServer()
  return ((tick() - Time) / 2) + 0.5
end

function JumpPower(Val)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = Val
end

function clicktotp()
clicktotp = game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
  --if not getgenv().clicktp then clicktotp:Disconnect() end
  if input.KeyCode == Enum.KeyCode[getgenv().Key] then
      if Mouse.Target then
          game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Mouse.Hit.x, Mouse.Hit.y + 5, Mouse.Hit.z)
          end
      end
  end)
end


function NoClip(NoClipVal)
    if not NoClipVal then Clipping:Disconnect() return end
    Clipping = game:GetService("RunService").Stepped:connect(function()
    for i,v in next, game.Players.LocalPlayer.Character:GetChildren() do
        if v:IsA("Part") or v:IsA("BasePart") then
            v.CanCollide = false
        end
    end
    end)
    end


    function ChopTree(CutEvent, ID, Height)
      game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(CutEvent, {["tool"] = game.Players.LocalPlayer.Character:FindFirstChild("Tool"), ["faceVector"] = Vector3.new(1, 0, 0), ["height"] = Height, ["sectionId"] = ID, ["hitPoints"] = HitPoints[game.Players.LocalPlayer.Character:FindFirstChild("Tool").ToolName.Value], ["cooldown"] = 0.25837870788574, ["cuttingClass"] = "Axe"})
    end
    
    local gs = function(service) return game:GetService(service) end
    local players = gs("Players")
    local client = players.LocalPlayer
    local b = game:GetService("ReplicatedStorage")
    DragModel1 = function(...)
    local d = {...}
    pcall(
    function()
      b.Interaction.ClientIsDragging:FireServer(d[1])
      b.Interaction.ClientIsDragging:FireServer(d[1])
      b.Interaction.ClientIsDragging:FireServer(d[1])
      b.Interaction.ClientIsDragging:FireServer(d[1])
    
    end
    )
    d[1]:MoveTo(d[2])
    d[1]:MoveTo(d[2])
    return d
    end
    local function table_foreach(table, callback)
    for i=1,#table do
      callback(i, table[i])
    end
    end
    
    local function getCFrame(part)
    local part = part or (client.Character and client.Character.HumanoidRootPart)
    if not part then return end
    return part.CFrame
    end
    
    local function tp(pos)
    local pos = pos or client:GetMouse().Hit + Vector3.new(0, client.Character.HumanoidRootPart.Size.Y, 0)
    if typeof(pos) == "CFrame" then
      client.Character:SetPrimaryPartCFrame(pos)
    elseif typeof(pos) == "Vector3" then
      client.Character:MoveTo(pos)
    end
    end
    
    
    local  function getPosition(part)
    return getCFrame(part).Position
    end
    
    local  function getTools()
    client.Character.Humanoid:UnequipTools()
    local tools = {}
    table_foreach(client.Backpack:GetChildren(), function(_, v)
    if v.Name ~= "BlueprintTool" and v.Name ~= "Delete" and v.Name ~= "Undo" and v.Name ~= "Mod Wood" then
    tools[#tools + 1] = v
    end
    end)
    return tools
    end
    local function getToolStats(toolName)
    if typeof(toolName) ~= "string" then
    print(toolName)
    toolName = toolName.ToolName.Value
    end
    return require(gs("ReplicatedStorage").AxeClasses['AxeClass_'..toolName]).new()
    end
    
    local function getBestAxe(treeClass)
    local tools = getTools()
    if #tools == 0 then
    return game.StarterGui:SetCore("SendNotification", {
    Title = 'Need Axe';
    Text = "Axe";
    Icon = "rbxassetid://7924662383";
    Duration = 4;
    })
    end
    local toolStats = {}
    local tool
    for _, v in next, tools do
    if treeClass == "LoneCave" and v.ToolName.Value == "EndTimesAxe" then
    tool = v
    break
    end
    local axeStats = getToolStats(v)
    if axeStats.SpecialTrees and axeStats.SpecialTrees[treeClass] then
    for i, v in next, axeStats.SpecialTrees[treeClass] do
      axeStats[i] = v
    end
    end
    table.insert(toolStats, { tool = v, damage = axeStats.Damage })
    end
    if not tool and treeClass == "LoneCave" then
    return game.StarterGui:SetCore("SendNotification", {
    Title = 'Axe';
    Text = "Need Endtimes Axe";
    Icon = "rbxassetid://7924662383";
    Duration = 7;
    })
    end
    table.sort(toolStats, function(a, b)
    return a.damage > b.damage
    end)
    return true, tool or toolStats[1].tool
    end
    
    local function cutPart (event, section, height, tool, treeClass)
    local axeStats = getToolStats(tool)
    if axeStats.SpecialTrees and axeStats.SpecialTrees[treeClass] then
    for i, v in next, axeStats.SpecialTrees[treeClass] do
    axeStats[i] = v
    end
    end
    game:GetService'ReplicatedStorage'.Interaction.RemoteProxy:FireServer(event, {
    tool = tool,
    faceVector = Vector3.new(-1, 0, 0),
    height = height or 0.3,
    sectionId = section or 1,
    hitPoints = axeStats.Damage,
    cooldown = axeStats.SwingCooldown,
    cuttingClass = "Axe"
    })
    end
    local treeListener = function(treeClass, callback)
    local childAdded
    childAdded = workspace.LogModels.ChildAdded:Connect(function(child)
    local owner = child:WaitForChild("Owner")
    if owner.Value == client and child.TreeClass.Value == treeClass then
    childAdded:Disconnect()
    callback(child)
    end
    end)
    end
    local treeClasses = {}
    local treeRegions = {}
    
    for _, v in next, workspace:GetChildren() do
    if v.Name == "TreeRegion" then
    treeRegions[v] = {}
    for _, v2 in next, v:GetChildren() do
    if v2:FindFirstChild("TreeClass") and not table.find(treeClasses, v2.TreeClass.Value) then
    table.insert(treeClasses, v2.TreeClass.Value)
    end
    if v2:FindFirstChild("TreeClass") and not table.find(treeRegions[v], v2.TreeClass.Value) then
    table.insert(treeRegions[v], v2.TreeClass.Value)
    end
    end
    end
    end
    
    local getBiggestTree = function(treeClass)
    local trees = {}
    for i, v in next, treeRegions do
    if table.find(v, treeClass) then
    for _, v2 in next, i:GetChildren() do
    if v2:IsA("Model") and v2:FindFirstChild("Owner") then
    if v2:FindFirstChild("TreeClass") and v2.TreeClass.Value == treeClass and v2.Owner.Value == nil or v2.Owner.Value == client then
      local totalMass = 0
      local treeTrunk
      for _, v3 in next, v2:GetChildren() do
        if v3:IsA("BasePart") then
          if v3:FindFirstChild("ID") and v3.ID.Value ==1 then
            treeTrunk = v3
          end
          totalMass = totalMass + v3:GetMass()
        end
      end
      table.insert(trees, { tree = v2, trunk = treeTrunk, mass = totalMass })
    end
    end
    end
    end
    end
    table.sort(trees, function(a, b)
    return a.mass > b.mass
    end)
    return trees[1] or nil
    end
    
    local function bringTree(treeClass)
    local lp =game. Players.LocalPlayer
    local success,data = getBestAxe(treeClass)
    
    local axeStats = getToolStats(data)
    
    local tree = getBiggestTree(treeClass)
    
    if not tree then
    return
    print("not findtree")
    end
    
    local oldPosition = getPosition()
    
    local treeCut = false
    
    
    treeListener(treeClass, function(tree)
    tree.PrimaryPart = tree:FindFirstChild("WoodSection")
    treeCut = true
    
    
    for i=1,60 do
    DragModel1(tree,oldPosition)
    task.wait()
    
    end
    
    end)
    task.wait(0.15)
    
    
    
    treestop = true
    
    task.spawn(function()
    if treeClass == "LoneCave" then
    local ETOldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    endtree()
    GodMode()
    repeat
    if not treestop then break end
    tp(tree.trunk.CFrame)
    
    task.wait()
    until treeCut
    else
    repeat
    if not treestop then break end
    tp(tree.trunk.CFrame)
    
    task.wait()
    until treeCut
    end
    end)
    
    task.wait()
    
    
    repeat
    if not treestop then break end
    cutPart(tree.tree.CutEvent, 1, 0.3, data, treeClass)
    task.wait()
    until treeCut
    
    
    print("done")
    if treeClass == "LoneCave" then
    wait(1)
    game.Players.LocalPlayer.Character.Head:Remove()
    else
    wait(1)
    tp(oldPosition)
    
    end
    end

    function ClearShopItems()
      for i,v in next, game:GetService("Workspace").Stores:GetChildren() do
      if v.Name == "ShopItems" then
          for i,v in next, v:GetChildren() do
              if v:FindFirstChild("Owner") and v.Owner.Value == nil then
                  spawn(function()
                      for i = 1,10 do
                          game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                          v.Main.CFrame = v.Main.CFrame + Vector3.new(0,0,25)
                          task.wait()
                      end
                  end)
              end
          end
      end
  end
  end


function DropAllTools()
    for i,v in next, game:GetService("Players").LocalPlayer.Backpack:GetChildren() do
        if v:IsA("Tool") and v.Name == "Tool" then
            repeat 
                game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(v,"Drop tool",game.Players.LocalPlayer.Character.Head.CFrame)
                task.wait()
            until v.Parent == nil
            task.wait()
        end
    end
end

  function CheckForItem(ItemType)
    for i,v in pairs(game:GetService("Workspace").Stores:GetChildren()) do
    if v.Name == "ShopItems" then
        for i,v in pairs(v:GetChildren()) do
            if v:FindFirstChild("Owner") and v.Owner.Value == nil then
                if v:FindFirstChild("BoxItemName") and tostring(v.BoxItemName.Value) == ItemType then
                    return true
                end
            end
        end
    end
    end
    return false
    end
    
    function GetPrice(Item,Amount)
       local Price = 0
       for i,v in next, game:GetService("ReplicatedStorage").ClientItemInfo:GetDescendants() do
           if v.Name == Item and v:FindFirstChild("Price") then
               Price = Price + v.Price.Value * Amount
           end
       end
       return Price
   end

   function DestroyBLWalls()
    for i,v in pairs(game:GetService("Workspace").Effects:GetChildren()) do
        if v.Name == "BlacklistWall" then
            v:Destroy()
        end
    end
end

function AntiBL()
    DestroyBLWalls()
    game:GetService("Workspace").Effects.ChildAdded:Connect(function(v)
        if v.Name == "BlacklistWall" then
            DestroyBLWalls()
        end
    end)
    Char = game.Players.LocalPlayer.Character
    PlrTorso = game.Players.LocalPlayer.Character.Torso
    AntiBLClone = PlrTorso:Clone()
    Char.HumanoidRootPart:Destroy()
    PlrTorso.Name = "HumanoidRootPart"
    AntiBLClone.Parent = Char
    AntiBLClone.Transparency = 1
end

   
   function GrabShopItems()
       local ItemList = {}
       for i,v in next,game:GetService("Workspace").Stores:GetChildren() do
           if v.Name == "ShopItems" then
               for i,v in next,v:GetChildren() do
                   if v:FindFirstChild("Type") and v.Type.Value ~= "Blueprint" and v:FindFirstChild("BoxItemName") then
                       if not table.find(ItemList,v.BoxItemName.Value.." - $"..GetPrice(v.BoxItemName.Value,1)) then
                           table.insert(ItemList,v.BoxItemName.Value.." - $"..GetPrice(v.BoxItemName.Value,1))
                           table.sort(ItemList)
                       end
                   end
               end
           end
       end
       return ItemList
   end
   
   function UpdateNames()
       for i,v in next, game:GetService("Workspace").Stores:GetChildren() do
           if v.Name == "ShopItems" then
               v.ChildAdded:Connect(function(v)
                   v.Name = v:WaitForChild("BoxItemName").Value
               end)
               for i,v in next, v:GetChildren() do
                   if v:FindFirstChild("Owner") and v.Owner.Value == nil then
                       if v:FindFirstChild("BoxItemName") then
                           v.Name = v.BoxItemName.Value
                       end
                   end
               end
           end
       end
   end
   UpdateNames()
   
   function ItemPath(Item)
       for i,v in next, game:GetService("Workspace").Stores:GetChildren() do
           if v.Name == "ShopItems" then
               for i,v in next, v:GetChildren() do
                   if v:FindFirstChild("Owner") and v.Owner.Value == nil then
                       if v:FindFirstChild("BoxItemName") and tostring(v.BoxItemName.Value) == Item then
                           return v.Parent
                       end
                   end
               end
           end
       end
   end
   
   function GetCounter(Item)
       ClosestCounter = nil
       for i,v in next, game:GetService("Workspace").Stores:GetChildren() do
           if v.Name:lower() ~= "shopitems" then
               for i,v in next, v:GetChildren() do
                   if v.Name:lower() == "counter" then
                       if (Item.CFrame.p - v.CFrame.p).Magnitude <= 200 then
                           ClosestCounter = v
                       end
                   end
               end
           end
       end
       return ClosestCounter
   end
   
   function Pay(ID)
       spawn(function()
           game:GetService("ReplicatedStorage").NPCDialog.PlayerChatted:InvokeServer({["ID"] = ID,["Character"] = "name",["Name"] = "name",["Dialog"] = 'Dialog'}, "ConfirmPurchase");
       end)
   end
   local ItemBought
   function AutoBuy(Item,Amount,op,bpop)
     buytime = tick()
       if Item == nil then notifications:message{Title = "Butter",Description = "No item selected",Icon = 6023426926} return end
       if game.Players.LocalPlayer.leaderstats.Money.Value < GetPrice(Item,Amount) then return notifications:message{Title = "Butter",Description = "No money",Icon = 6023426926} end 
       AbortAutoBuy = false
       local OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
       local Path = ItemPath(Item)
       
       if tostring(Item):sub(1,4) == "2022" then
            ItemBought = game:GetService("Workspace").PlayerModels.ChildAdded:Connect(function(v)
               if v:WaitForChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
                   if v:WaitForChild("Main") then
                       for i = 1,40 do 
                           game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(v)
                           v.Main.CFrame = OldPos
                           game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(v)
                           task.wait()
                       end
                   end
               end
           end)
       end
       
       for i = 1,Amount do
           if AbortAutoBuy then break end
           local Item = Path:WaitForChild(Item)
           local Counter = GetCounter(Item.Main)
           game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Item.Main.CFrame + Vector3.new(5,0,5)
           repeat game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item) task.wait() until Item.Owner.Value ~= nil
           if Item.Owner.Value ~= game.Players.LocalPlayer then break end
           for i = 1,30 do
               game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)
               Item.Main.CFrame = Counter.CFrame + Vector3.new(0,Item.Main.Size.Y,0.5,0)
               task.wait()
           end
           game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Counter.CFrame + Vector3.new(5,0,5)
           repeat
               if AbortAutoBuy then break end
               game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)
               Pay(ShopIDS[Counter.Parent.Name])
               task.wait()
           until Item.Parent ~= "ShopItems"
           if tostring(Item):sub(1,4) ~= "2022" then
               for i = 1,30 do 
                   game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)
                   Item.Main.CFrame = OldPos
                   task.wait()
               end
               if op then
               game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(Item,"Open box")
               end
               if not bpop then
               ResizeBar(i,Amount)
               end
           end
           task.wait()
       end
       if ItemBought then ItemBought:Disconnect() end
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos + Vector3.new(5,1,0)
       if AbortAutoBuy then
       print("Aborted")
       else
       print("done")
       end
       notifications:message{Title = "Butter",Description = "Done in ".. string.format('%.1fs', tick() - buytime),Icon = 6023426926}
  end

  function BringPlayer()
      local oldpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
      repeat wait()
          game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent:SetPrimaryPartCFrame(game.Players[plrselected].Character.Head.CFrame,(game.Players.LocalPlayer.Character.HumanoidRootPart))
          game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent:SetPrimaryPartCFrame(game.Players.LocalPlayer.Character.Humanoid.SeatPart.CFrame * CFrame.Angles(math.rad(180),0,0))
      until game.Players[plrselected].Character.Humanoid.SeatPart
      game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent:SetPrimaryPartCFrame(oldpos,(game.Players.LocalPlayer.Character.HumanoidRootPart))
  end
  
  function KillPlayer()
      function teleport(pos)
          game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent:SetPrimaryPartCFrame(pos,(game.Players.LocalPlayer.Character.HumanoidRootPart))
      end
      repeat wait()
          game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent:SetPrimaryPartCFrame(game.Players[plrselected].Character.Head.CFrame,(game.Players.LocalPlayer.Character.HumanoidRootPart))
          game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent:SetPrimaryPartCFrame(game.Players.LocalPlayer.Character.Humanoid.SeatPart.CFrame * CFrame.Angles(math.rad(180),0,0))
      until game.Players[plrselected].Character.Humanoid.SeatPart
      teleport(CFrame.new(-1675.2, 261.303, 1284.2))
  end

  function PlrHasTool()
      if game.Players.LocalPlayer.Backpack:FindFirstChild("Tool") or game.Players.LocalPlayer.Character:FindFirstChild("Tool") then
          return true
      end
      return false
  end
    
    function InfiniteJump(Val)
    if not Val then IJ:Disconnect() return end
    IJ = game:GetService("UserInputService").JumpRequest:Connect(function()
    game.Players.LocalPlayer.Character:FindFirstChildOfClass"Humanoid":ChangeState("Jumping")
    end)
    end

    local Flyingkey
    
    local FlyingEnabled = false
    local maxspeed = 150 
    function BetterFly()
    repeat wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("Head") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid") 
    local mouse = game.Players.LocalPlayer:GetMouse() 
    repeat wait() until mouse
    local plr = game.Players.LocalPlayer 
    local torso = plr.Character.Head 
    local flying = false
    local deb = true 
    local ctrl = {f = 0, b = 0, l = 0, r = 0} 
    local lastctrl = {f = 0, b = 0, l = 0, r = 0}
    local speed = 5000 
     
    function Fly() 
    local bg = Instance.new("BodyGyro", torso) 
    bg.P = 9e4 
    bg.maxTorque = Vector3.new(9e9, 9e9, 9e9) 
    bg.cframe = torso.CFrame 
    local bv = Instance.new("BodyVelocity", torso) 
    bv.velocity = Vector3.new(0,0.1,0) 
    bv.maxForce = Vector3.new(9e9, 9e9, 9e9) 
    repeat wait() 
    plr.Character.Humanoid.PlatformStand = true 
    if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then 
    speed = maxspeed
    elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then 
        speed = 0 
    end 
    if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then 
    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
    lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r} 
    elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then 
    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*0.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
    else 
    bv.velocity = Vector3.new(0,0,0) 
    end 
    bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*speed/maxspeed),0,0) 
    until not flying 
    ctrl = {f = 0, b = 0, l = 0, r = 0} 
    lastctrl = {f = 0, b = 0, l = 0, r = 0} 
    speed = 0 
    bg:Destroy() 
    bv:Destroy() 
    plr.Character.Humanoid.PlatformStand = false 
    end 
    mouse.KeyDown:connect(function(key) 
    if key:lower() == Flyingkey and FlyingEnabled == true then 
    if flying then flying = false 
    else 
    flying = true 
    Fly() 
    end 
    elseif key:lower() == "w" then 
    ctrl.f = 1 
    elseif key:lower() == "s" then 
    ctrl.b = -1 
    elseif key:lower() == "a" then 
    ctrl.l = -1 
    elseif key:lower() == "d" then 
    ctrl.r = 1 
    end 
    end) 
    mouse.KeyUp:connect(function(key) 
    if key:lower() == "w" then 
    ctrl.f = 0 
    elseif key:lower() == "s" then 
    ctrl.b = 0 
    elseif key:lower() == "a" then 
    ctrl.l = 0 
    elseif key:lower() == "d" then 
    ctrl.r = 0 
    end 
    end)
    Fly()
    end
    game.Players.LocalPlayer.CharacterAdded:Connect(BetterFly)
    BetterFly()


function AntiAFK(Val)
    if not Val then AFKVal:Disconnect() return end
    AFKVal = game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, "W", false, game)
     wait()
    game:GetService("VirtualInputManager"):SendKeyEvent(false, "W", false, game)
    end)
end


function Light(Val)
    if Val == false then game.Players.LocalPlayer.Character.Head.PointLight:Destroy() return end
    local PL = Instance.new("PointLight",game.Players.LocalPlayer.Character:FindFirstChild("Head"))
    PL.Range = 100
    PL.Brightness = 1
    PL.Shadows = false
end


function Dragger()
    game.Workspace.ChildAdded:connect(function(a)
    if a.Name == "Dragger" then
        local bg = a:WaitForChild("BodyGyro")
        local bp = a:WaitForChild("BodyPosition")
        repeat
            if CustomDragger then
                task.wait()
                bp.P = 120000
                bp.D = 1000
                bp.maxForce = Vector3.new(math.huge,math.huge,math.huge)
                bg.maxTorque = Vector3.new(math.huge, math.huge, math.huge)
            else
                wait()
                bp.P = 10000
                bp.D = 800
                bp.maxForce = Vector3.new(17000, 17000, 17000)
                bg.maxTorque = Vector3.new(200, 200, 200)
            end
        until not a
    end
    end)
end


function BTools()
    local Pllayyrs = game:GetService("Players").LocalPlayer
    local deletetool = Instance.new("Tool", Pllayyrs.Backpack)
    local undotool = Instance.new("Tool", Pllayyrs.Backpack)
    
    if editedparts == nil then
    editedparts = {}
    parentfix = {}
    positionfix = {}
    end
    
    
    deletetool.Name = "Delete"
    undotool.Name = "Undo"
    undotool.CanBeDropped = false
    deletetool.CanBeDropped = false
    undotool.RequiresHandle = false
    deletetool.RequiresHandle = false
    
    
    deletetool.Activated:Connect(function()
    
    table.insert(editedparts, mouse.Target)
    table.insert(parentfix, mouse.Target.Parent)
    table.insert(positionfix, mouse.Target.CFrame)
    mouse.Target.Parent = nil
    end)
    undotool.Activated:Connect(function()
    
    editedparts[#editedparts].Parent = parentfix[#parentfix]
    editedparts[#editedparts].CFrame = positionfix[#positionfix]
    table.remove(positionfix, #positionfix)
    table.remove(editedparts, #editedparts)
    table.remove(parentfix, #parentfix)
    end)
end


game.Lighting.Changed:Connect(function()
  if AlwaysDay then
      game.Lighting.TimeOfDay = "12:00:00"
      game.Lighting.SunPos.Value = 1
      
      game:GetService("Lighting").Ambient = Color3.new(1, 1, 1)
      game:GetService("Lighting").ColorShift_Bottom = Color3.new(1, 1, 1)
      game:GetService("Lighting").ColorShift_Top = Color3.new(1, 1, 1)
  end
  if AlwaysNight then
      game.Lighting.TimeOfDay = "00:00:00"
      game.Lighting.SunPos.Value = -1
  end
  if NoFog then
      game.Lighting.FogEnd = 100000
  end
end)


function Betterwater()
for i,v in next, game.Workspace:GetDescendants() do
  if v:IsA("Part") and v.Name == "SeaSand" then
  v.Size = Vector3.new(2048, 60, 2048)
end
end


for i,v in next, game.Workspace:GetDescendants() do
if v:IsA("Part") and v.Name == "Water" then
  v.Size = Vector3.new(20480, 6, 20080)
  game.Workspace.Terrain:fillBlock(v.CFrame, v.Size, Enum.Material.Water)
  v:Destroy()
end
end
end




local function getPlots()
  local Properties = {}
  for _, v in next, workspace.Properties:GetChildren() do
      local Owner = v:FindFirstChild("Owner")
      if Owner and Owner.Value == nil then
          table.insert(Properties, v)
      end
  end
  return Properties[#Properties]
end

local propClient = FPlayer.PlayerGui.PropertyPurchasingGUI.PropertyPurchasingClient
local propEnvironment = getsenv(propClient)
local oldPurchase = propEnvironment.enterPurchaseMode
getsenv(propClient).enterPurchaseMode = function(...)
  if not skipLoading then
      return oldPurchase(...)
  end
  setupvalue(propEnvironment.rotate, 3, 0)
  setupvalue(oldPurchase, 10, getPlots())
  return
end

function LoadSlot(slot)
  if not game:GetService("ReplicatedStorage").LoadSaveRequests.ClientMayLoad:InvokeServer(game:GetService("Players").LocalPlayer) then
      print("Load Is On cooldown Please Wait")
      repeat task.wait() until  game:GetService("ReplicatedStorage").LoadSaveRequests.ClientMayLoad:InvokeServer(game:GetService("Players").LocalPlayer)
  end
  local skipLoading = skil.skipLoading
  game:GetService("ReplicatedStorage").LoadSaveRequests.RequestLoad:InvokeServer(slot,game.Players.LocalPlayer)
  if game:GetService("Players").LocalPlayer.CurrentSaveSlot.Value == slot then
      print("Loaded Slot "..slot)
  end
end





function FreeLand()
  for i,v in next, game:GetService("Workspace").Properties:GetChildren() do
  if v:FindFirstChild("Owner") and v.Owner.Value == nil then
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientPurchasedProperty:FireServer(v,v.OriginSquare.Position)
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0,2,0)
      break
  end
  end
end


function MaxLand()
  for s,d in pairs(workspace.Properties:GetChildren()) do 
  if d:FindFirstChild("Owner") and d:FindFirstChild("OriginSquare") and d.Owner.Value == game.Players.LocalPlayer then
      local PlotPos = d.OriginSquare.Position
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 40, PlotPos.Y, PlotPos.Z))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 40, PlotPos.Y, PlotPos.Z))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X , PlotPos.Y, PlotPos.Z + 40))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X , PlotPos.Y, PlotPos.Z - 40))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 40 , PlotPos.Y, PlotPos.Z + 40))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 40 , PlotPos.Y, PlotPos.Z - 40))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 40 , PlotPos.Y, PlotPos.Z + 40))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 40 , PlotPos.Y, PlotPos.Z - 40))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 80 , PlotPos.Y, PlotPos.Z))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 80 , PlotPos.Y, PlotPos.Z))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X , PlotPos.Y, PlotPos.Z + 80))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X , PlotPos.Y, PlotPos.Z - 80))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 80 , PlotPos.Y, PlotPos.Z + 80))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 80 , PlotPos.Y, PlotPos.Z - 80))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 80 , PlotPos.Y, PlotPos.Z + 80))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 80 , PlotPos.Y, PlotPos.Z - 80))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 40 , PlotPos.Y, PlotPos.Z + 80))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 40 , PlotPos.Y, PlotPos.Z + 80))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 80 , PlotPos.Y, PlotPos.Z + 40))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 80 , PlotPos.Y, PlotPos.Z - 40))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 80 , PlotPos.Y, PlotPos.Z + 40))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 80 , PlotPos.Y, PlotPos.Z - 40))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 40 , PlotPos.Y, PlotPos.Z - 80))
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 40 , PlotPos.Y, PlotPos.Z - 80))
  end
  end
end


function SellSoldSign()
  for i,v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
  if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
      if v:FindFirstChild("ItemName") and v.ItemName.Value == "PropertySoldSign" then
          game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Main.CFrame.p) + Vector3.new(0,0,2)
          game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(v,"Take down sold sign")
          for i = 1,30 do
              game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(v)
              v.Main.CFrame = CFrame.new(314.54, -0.5, 86.823)
              task.wait()
          end
      end
  end
  end
end

function Dupe(Slot,Amount,timewhit)
  for i = 1,Amount do
      if not game:GetService("ReplicatedStorage").LoadSaveRequests.ClientMayLoad:InvokeServer(game.Players.LocalPlayer) then
          repeat task.wait() until game:GetService("ReplicatedStorage").LoadSaveRequests.ClientMayLoad:InvokeServer(game.Players.LocalPlayer)
      end
      
      game.Players.LocalPlayer.Character.Head:Remove()
      wait(timewhit)
      repeat task.wait() until not game.Players.LocalPlayer.Character:FindFirstChild("Head")
      game:GetService("ReplicatedStorage").LoadSaveRequests.RequestLoad:InvokeServer(Slot,game.Players.LocalPlayer)
      repeat task.wait() until game.Players.LocalPlayer.CurrentlySavingOrLoading.Value ~= true
      task.wait()
  end
  print("Duped Axes")
end

  
  
  
  function teleport(tppart, destination)
      game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(tppart.Parent)
      task.wait(0.1)
      tppart.Velocity = Vector3.new(0,0,0)
      tppart.CFrame = destination
  end
  
  
  tool.Activated:Connect(function()
      local treelimbblist = {}
      local Clicked = game:GetService("Players").LocalPlayer:GetMouse().Target
      if not Clicked or not Clicked.Name == 'WoodSection' then return end
  
      for _,v in pairs(game:GetService("Workspace")["Region_Snow"].Model:GetChildren()) do
          if v.Name == 'Spacer' then
              v:Destroy()
          else
              if v.color == Color3.fromRGB(27, 42, 53) and v.Name == 'Part' then
                  --print("color!")
                  spacerpart = v:Clone()
                  spacerpart.Parent = v.Parent
                  spacerpart.Name = 'Spacer'
                  spacerpart.Size = v.Size + Vector3.new(1,6,1)
                  spacerpart.CanCollide = true
              end
          end
      end
  
      if Clicked.Parent:FindFirstAncestor("LogModels") then
          if Clicked.Parent:FindFirstChild("Owner") and Clicked.Parent.Owner.Value == game.Players.LocalPlayer then
              for _,v in pairs(Clicked.Parent:GetDescendants()) do
                  if v.Name == 'ChildIDs' and #(v:GetChildren()) == 0 then
                      table.insert(treelimbblist, v.Parent.ID.Value)
                  end
              end
              table.sort(treelimbblist)
              
              for _,v in pairs(Clicked.Parent:GetDescendants()) do
                  if v.Name == 'ChildIDs' then
                      for _,v2 in pairs(v:GetChildren()) do
                          if v2.Value == treelimbblist[#treelimbblist] then
                              parentbranch = v2.Parent.Parent
                              Instance.new("Highlight", parentbranch)
                          end
                      end
                  else
                      if v.Name == 'ID' and v.Value == treelimbblist[#treelimbblist] then
                          Instance.new("Highlight", v.Parent).FillColor = Color3.new(0, 1, 0)
                          childbranch = v.Parent
                      end
                  end
              end
          end
      end
  
  
  
  
  
  
      --local test = CFrame.new(331.658905, -2.6000011, 88.7975311, -0.669165134, 1.12072014e-08, 0.743113697, 2.39048532e-08, 1, 6.44463061e-09, -0.743113697, 2.20765468e-08, -0.669165134)
      --local test = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
      --local test = game:GetService("Workspace").CurrentCamera.Part.CFrame
      local test = game:GetService("Workspace")["Region_Snow"].SkiLodge.WoodBox:FindFirstChild('Big',5).Parent.CFrame
      local OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
  
  
      test = test
  
  
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(parentbranch.CFrame.p)
      task.wait(0.5)
      parentbranch.Parent.PrimaryPart = parentbranch
      local oldtreepos,_ = parentbranch.Parent:GetBoundingBox()
      parentbranch.Velocity = Vector3.new(0,0,0)
      nocollide(false)
  
      local Freeze, Pos = Instance.new("BodyVelocity", childbranch), Instance.new("BodyPosition", childbranch)
      Freeze.Velocity = Vector3.new(0, 0, 0)
      Freeze.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
      Freeze.P = 9000
      Pos.MaxForce = Vector3.new(0,0,0)
      Pos.P = 100000
  
      task.spawn(function()
          task.wait(5)
          Freeze:Destroy()
          Pos:Destroy()
      end)
  
      for _ = 1,50 do
          game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(parentbranch.CFrame.p + Vector3.new(parentbranch.Size.X * 1.2,0,0))
          game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(parentbranch.Parent)
          --if isnetworkowner(parentbranch) then break end
          task.wait()
      end
  -- make table thisng
      while not getgenv().MODWOODCANCEL do
          local success, _ = pcall(function()
  --									while (plank.Position - sell.Position).magnitude > 20 do
              
              --[[
              while not isnetworkowner(parentbranch) and not getgenv().MODWOODCANCEL do
  
              end
              ]]
              game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(parentbranch.CFrame.p + Vector3.new(parentbranch.Size.X * 1.2,0,0))
              game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(parentbranch.Parent)
              task.wait()
              parentbranch.Velocity = Vector3.new(0,0,0)
              parentbranch.Parent:SetPrimaryPartCFrame(test)
              task.wait()
  --									end
          end)
  
          if not success or (parentbranch.Position - test.Position).magnitude > 100000 then
              break
          end
          task.wait()
      end
      local partstable = {}
      for _,v in pairs(childbranch.Parent:GetChildren()) do
          if v:IsA("BasePart") and v:FindFirstChildOfClass("Weld") then
              if table.find(partstable, v:FindFirstChildOfClass("Weld").Part0) then table.insert(partstable, v:FindFirstChildOfClass("Weld").Part0) end
              if table.find(partstable, v:FindFirstChildOfClass("Weld").Part1) then table.insert(partstable, v:FindFirstChildOfClass("Weld").Part1) end
          end
      end
      for _,v in pairs(childbranch.Parent:GetChildren()) do
          if v:IsA("BasePart") and not table.find(partstable, v) then
              if v == childbranch then
                  teleport(v, OldPos)
              else
                  teleport(v, oldtreepos)
              end
          end
      end

      nocollide(true)
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
      task.wait(3)
      
      spacerpart:Destroy()
  
  end)
  end
  
function VehicleSpeed(Val)
    for i,v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
    if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
      if v:FindFirstChild("Type") and v.Type.Value == "Vehicle" then
          if v:FindFirstChild("Configuration") then
            v.Configuration.MaxSpeed.Value = Val
            end
        end
    end
  end
end


function FlipVehcile()
  player = game.Players.LocalPlayer
  humanoid = player.Character.Humanoid
  if humanoid.Seated then
  local CurrentSeat = player.Character.Humanoid.SeatPart
      if CurrentSeat and CurrentSeat.Parent.Type.Value == "Vehicle" then
     CurrentSeat.CFrame = CurrentSeat.CFrame * CFrame.Angles(math.rad(-180), 0, 0) + Vector3.new(0, 5, 0),1000,CurrentSeat.CFrame
  end
 end
end


function VehicleSpawner(Color)
  if tostring(Color) == "Car Colors" then return print("Select a color") end
  AbortVehicleSpawner = false
  RespawnedCar = game:GetService("Workspace").PlayerModels.ChildAdded:connect(function(v)
    if v:WaitForChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
      if v:WaitForChild("PaintParts") then
      VehicleRespawnedColor = v.PaintParts:WaitForChild("Part")
    end
  end
end)
end

function RemoveWater(Val)
  for i,v in next, game:GetService("Workspace").Water:GetChildren() do
  if v.Name == "Water" then
      if not Val then
          v.Transparency = 0
          else
          v.Transparency = 1
      end
  end
  end
end

local SelectPurchase = game:GetService("Players").LocalPlayer.PlayerGui.PropertyPurchasingGUI.SelectPurchase
local VirtualInputManager = game:GetService("VirtualInputManager")
local PlayerModels = game:GetService("Workspace").PlayerModels






function things(bestslotnum,Mainacc)
  for _, property in ipairs(game:GetService("Workspace").Properties:GetChildren()) do
    local owner = property.Owner
    if owner and owner.Value == nil then
      game:GetService("ReplicatedStorage").PropertyPurchasing.ClientPurchasedProperty:FireServer(property, property.OriginSquare.Position)
      game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = property.OriginSquare.CFrame + Vector3.new(0, 2, 0)
      break
    end
  end
  wait(1.5)
  for _, model in ipairs(PlayerModels:GetChildren()) do
    if model:FindFirstChild("Owner") and model.Owner.Value == game:GetService("Players").LocalPlayer then
      --check if sign has been used
      if model:FindFirstChild("Used") then
        print("Sign has been used")
      else
        local itemName = model.ItemName and model.ItemName.Value
        if itemName == "PropertySoldSign" then
          game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Main.CFrame.p) + Vector3.new(0, 0, 2)
          game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(model, "Take down sold sign")

          repeat task.wait(); game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(model) until isnetworkowner(model.Main)

            game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(model)
            model.Main.CFrame = game:GetService("Players")[Mainacc].Character.HumanoidRootPart.CFrame
            --mark sign as used
            local used = Instance.new("BoolValue")
            used.Name = "Used"
            used.Value = true
            used.Parent = model
            coroutine.wrap(function()
            game:GetService("ReplicatedStorage").LoadSaveRequests.RequestLoad:InvokeServer(bestslotnum, game:GetService("Players").LocalPlayer)
            end)()
            break
          end
        end
      end
    end
end



    function startnewdupe()
        while getgenv().SoldSignAutoFarm do
            print("RAHHHH")
            things(getgenv().bestnummfordupe,getgenv().Nameforsingdupe)
            repeat wait() until SelectPurchase.Visible
              local gui = SelectPurchase.Quit
              local width, height = gui.AbsoluteSize.X, gui.AbsoluteSize.Y
              local x, y = gui.AbsolutePosition.X, gui.AbsolutePosition.Y
              local centerX, centerY = x + width / 2, y + height / 2
              while SelectPurchase.Visible do
                print("Clicking")
                --draw a line from 0, 0 to the center of the button
                VirtualInputManager:SendMouseButtonEvent(centerX, centerY + 50, 0, true, game, 0)
                VirtualInputManager:SendMouseButtonEvent(centerX, centerY + 50, 0, false, game, 0)
                wait(0.1)
              end
              wait(1)
            end
        end



        function Signstuff()
        local count = 0
        for i,v in pairs(game:GetService("Workspace").PlayerModels:GetDescendants()) do
        if v.Name == "PropertySoldSign" then
            count = count + 1
        end
        end
        notifications:message{Title = "Butter",Description = "You have " ..count.. " Signs",Icon = 6023426926}
        end

        local Mouse = game.Players.LocalPlayer:GetMouse()
            local AxeClassesFolder = game:GetService("ReplicatedStorage").AxeClasses
            
            function GetBestAxe(Tree)
                if game.Players.LocalPlayer.Character:FindFirstChild("Tool") then
                    game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                end
                local SelectedTool = nil
                local HighestAxeDamage = 0
                for i,v in next, game.Players.LocalPlayer.Backpack:GetChildren() do
                    if v.Name == "Tool" then
                        if require(AxeClassesFolder:FindFirstChild("AxeClass_"..v.ToolName.Value)).new().Damage > HighestAxeDamage then
                            SelectedTool = v
                            if require(AxeClassesFolder:FindFirstChild("AxeClass_"..v.ToolName.Value)).new().SpecialTrees then
                                if require(AxeClassesFolder:FindFirstChild("AxeClass_"..v.ToolName.Value)).new().SpecialTrees[Tree] then
                                    return v
                                end
                            end
                        end
                    end
                end
                return SelectedTool
            end
            
            
            function GetAxeDamage(Tree)
                if game.Players.LocalPlayer.Character:FindFirstChild("Tool") then
                    game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                end
                if require(AxeClassesFolder:FindFirstChild("AxeClass_"..GetBestAxe(Tree).ToolName.Value)).new().SpecialTrees then
                    if require(AxeClassesFolder:FindFirstChild("AxeClass_"..GetBestAxe(Tree).ToolName.Value)).new().SpecialTrees[Tree] then
                        return require(AxeClassesFolder:FindFirstChild("AxeClass_"..GetBestAxe(Tree).ToolName.Value)).new().SpecialTrees[Tree].Damage
                    end
                end
                return require(AxeClassesFolder:FindFirstChild("AxeClass_"..GetBestAxe(Tree).ToolName.Value)).new().Damage
            end
            
            function ChopTree(CutEventRemote, ID, Height,Tree)
                game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(CutEventRemote, {["tool"] = GetBestAxe(Tree), ["faceVector"] = Vector3.new(1, 0, 0), ["height"] = Height, ["sectionId"] = ID, ["hitPoints"] = GetAxeDamage(Tree), ["cooldown"] = 0.25837870788574, ["cuttingClass"] = "Axe"})
            end
            
            function DicmemberTree()
                OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                local LogChopped = false
                branchadded = game:GetService("Workspace").LogModels.ChildAdded:Connect(function(v)
                    if v:WaitForChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
                        if v:WaitForChild("WoodSection") then
                            LogChopped = true
                        end
                    end
                end)
                
                DismemberTreeC = Mouse.Button1Up:Connect(function()
                    Clicked = Mouse.Target
                    if Clicked.Parent:FindFirstAncestor("LogModels") then
                        if Clicked.Parent:FindFirstChild("Owner") and Clicked.Parent.Owner.Value == game.Players.LocalPlayer then
                            TreeToJointCut = Clicked.Parent
                        end
                    end
                end)
                repeat task.wait() until tostring(TreeToJointCut) ~= "nil"
                if TreeToJointCut:FindFirstChild("WoodClass") and TreeToJointCut.WoodClass.Value == "LoneCave" then
                    if GetBestAxe("LoneCave").ToolName.Value ~= "EndTimesAxe" then
                        return library:Notify("Error","You need an end times axe") 
                    end
                end
                for i,v in next, TreeToJointCut:GetChildren() do
                    if v.Name == "WoodSection" then
                        if v:FindFirstChild("ID") and v.ID.Value ~= 1 then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.CFrame.p)
                            repeat
                                ChopTree(v.Parent:FindFirstChild("CutEvent"), v.ID.Value, 0, v.Parent:FindFirstChild("TreeClass").Value) -- 0.32 test
                                task.wait()
                            until LogChopped == true
                            LogChopped = false
                            task.wait(1)
                        end
                    end
                end
                TreeToJointCut = nil
                branchadded:Disconnect()
                DismemberTreeC:Disconnect()
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
            end

--#endregion


--#region cam
               camSprintKey = Enum.KeyCode.LeftShift
        
               localPlayer = game.Players.LocalPlayer
               
               Camera = game.Workspace.CurrentCamera
               Mouse = localPlayer:GetMouse()
               
               UserInputService = game:GetService("UserInputService")
               
               
               movePosition = Vector2.new(0,0)
               moveDirection = Vector3.new(0,0,0)
               
               targetMovePosition = movePosition
               
               Y_Sensitivity = 300;
               X_Sensitivity = 300;
               
               lastRightButtonDown = Vector2.new(0,0)
               rightMouseButtonDown = false
               
               targetFOV = 70
               
               sprinting = false;
               sprintingSpeed = 3;
               
               keysDown = {}
               
               moveKeys = {
               [Enum.KeyCode.D] = Vector3.new(1,0,0),
               [Enum.KeyCode.A] = Vector3.new(-1,0,0),
               [Enum.KeyCode.S] = Vector3.new(0,0,1),
               [Enum.KeyCode.W] = Vector3.new(0,0,-1),
               --[Enum.KeyCode.E] = Vector3.new(0,1,0),
               --[Enum.KeyCode.Q] = Vector3.new(0,-1,0)
               }
               
               Tweenn = function(a,b,d)
               if t == 1 then
               return b
               else 
               if tonumber(a) then
                   return a * (1-d) + (b*d)
               else
               return a:Lerp(b,d);
               end
               end
               end
               
               ClampVector3 = function(x,min,max)
               
               return 
               Vector3.new(
               math.clamp(x.X,min.X,max.X),
               math.clamp(x.Y,min.Y,max.Y),
               math.clamp(x.Z,min.Z,max.Z)
               )
               
               end
               
               
               UserInputService.InputChanged:connect(function(inputObject)
               if inputObject.UserInputType == Enum.UserInputType.MouseMovement then
               movePosition = movePosition + Vector2.new(inputObject.Delta.x,inputObject.Delta.y)
               end
               end)
               
               CalculateMovement = function()
               newMovement = Vector3.new(0,0,0)
               for i,v in pairs(keysDown) do
               newMovement = newMovement + (moveKeys[i] or Vector3.new(0,0,0))
               end
               return newMovement
               end
               
               Round = function(num, numDecimalPlaces)
                 return math.floor((num/numDecimalPlaces) + .5)*numDecimalPlaces
               end
               
               Input = function(input,gameProcessed)
               if moveKeys[input.KeyCode] then
               if input.UserInputState == Enum.UserInputState.Begin then
               keysDown[input.KeyCode] = true
               elseif input.UserInputState == Enum.UserInputState.End then
               keysDown[input.KeyCode] = nil
               end
               else
               if input.UserInputState == Enum.UserInputState.Begin then
               if input.UserInputType == Enum.UserInputType.MouseButton2 then
               rightMouseButtonDown = true
               lastRightButtonDown = Vector2.new(Mouse.X,Mouse.Y)
               UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
               elseif input.KeyCode == Enum.KeyCode.Z then
               targetFOV = 20
               elseif input.KeyCode == camSprintKey then
               sprinting = true
               end
               else
               if input.UserInputType == Enum.UserInputType.MouseButton2 then
               rightMouseButtonDown = false
               UserInputService.MouseBehavior = Enum.MouseBehavior.Default
               elseif input.KeyCode == Enum.KeyCode.Z then
               targetFOV = 70
               elseif input.KeyCode == camSprintKey then
               sprinting = false
               end
               end
               end
               end
                
               Mouse.WheelForward:connect(function()
                  Camera.CoordinateFrame = Camera.CoordinateFrame * CFrame.new(0,0,-5)
               end)
               
               Mouse.WheelBackward:connect(function()
                  Camera.CoordinateFrame = Camera.CoordinateFrame * CFrame.new(-0,0,5)
               end)
               
               UserInputService.InputBegan:connect(Input)
               UserInputService.InputEnded:connect(Input)
               
               
               function camon()
               Toggled = true
               Camera.CameraType = Enum.CameraType.Scriptable
               game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true 
               end
               
               
               function camoff()
               Toggled = false
               game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
               game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
               game.Workspace.CurrentCamera.CameraType = "Custom"
               end
               
               
               game:GetService("RunService").RenderStepped:Connect(function()
               if Toggled then
               mouseTarget = Mouse.Hit
               
               targetMovePosition = movePosition
               Camera.CoordinateFrame = CFrame.new(Camera.CoordinateFrame.p) * CFrame.fromEulerAnglesYXZ(-targetMovePosition.Y/Y_Sensitivity ,-targetMovePosition.X/X_Sensitivity, 0) * CFrame.new(CalculateMovement() * ((({[true]=sprintingSpeed})[sprinting]) or .5) )
               Camera.FieldOfView = Tweenn(Camera.FieldOfView,targetFOV,.5)
               if rightMouseButtonDown then
               UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
               movePosition = movePosition - (lastRightButtonDown - Vector2.new(Mouse.X,Mouse.Y))
               lastRightButtonDown = Vector2.new(Mouse.X,Mouse.Y)
               end
               end
               end)
--#endregion


 --#region Save slots names
 if not isfile('ButtersSlotNames.cfg') then
 
  local DefaultSlotNames = {}

  DefaultSlotNames[tostring(FPlayer)] = {

  Slot1 = 'Slot 1',
  Slot2 = 'Slot 2',
  Slot3 = 'Slot 3',
  Slot4 = 'Slot 4',
  Slot5 = 'Slot 5',
  Slot6 = 'Slot 6'

  }

  writefile('ButtersSlotNames.cfg', HttpService:JSONEncode(DefaultSlotNames))
  
end

local ButtersSlotNames = HttpService:JSONDecode(readfile('ButtersSlotNames.cfg'))

local DoesPlayerExist = ButtersSlotNames[tostring(FPlayer)] ~= nil

if not DoesPlayerExist then

   local DefaultSlotNames = {}

   DefaultSlotNames = {
       
       Slot1 = 'Slot 1',
       Slot2 = 'Slot 2',
       Slot3 = 'Slot 3',
       Slot4 = 'Slot 4',
       Slot5 = 'Slot 5',
       Slot6 = 'Slot 6'
   }
   
   local SlotNamesOld = HttpService:JSONDecode(readfile('ButtersSlotNames.cfg'))
   SlotNamesOld[tostring(FPlayer)] = DefaultSlotNames
   writefile('ButtersSlotNames.cfg', HttpService:JSONEncode(SlotNamesOld))
   
end
--#endregion


 --#region UI 


local ui = library:new()


--Tabs
local Home = ui:Tab('Home','6035145364')

local Player = ui:Tab('Player','6034287594')

local Teleports = ui:Tab('Teleports','6034287594')

local Tools = ui:Tab('Tools','6034275725')

local WorldTab = ui:Tab('WorldTab','6034287522')

local Timerstab = ui:Tab('Timers','6761866149')

local Slot = ui:Tab('Slot','6034333276')

local DupeTab = ui:Tab('Dupe','6035053278')

local Vehicle = ui:Tab('Vehicle','6034754441')

local Sorter = ui:Tab('Sorter','11145825488')

local AutoBuyg = ui:Tab('Auto Buy','6031265983')

local WoodTab = ui:Tab('Wood','6034503369')

local Trollingtab = ui:Tab('Trolling','6034687957')

--



--Sections
local Home1 = Home:section('Credits',true)

local Home2 = Home:section('Settings',true)


local Player1 = Player:section('Movement',true)

local Player2 = Player:section('Settings',true)

local Teleports1 = Teleports:section('Teleports',true)

local tools1 = Tools:section('Tools',true)

local WorldTab1 = WorldTab:section('World',true)
local WorldTab2 = WorldTab:section('Water',true)


local Timers1 = Timerstab:section('Timers',true)


local Slott1 = Slot:section('Fast load',true)
local Slott2 = Slot:section('Slot',true)
local Slott3 = Slot:section('SlotNames',true)


local Vehicle1 = Vehicle:section('Vehicle',true)
local Vehicle2 = Vehicle:section('Vehicle Spawner',true)


local Sorter1 = Sorter:section('Sorter',true)

local Autobuy1 = AutoBuyg:section('AutoBuy',true)
local Autobuy2 = AutoBuyg:section('Buying Misc',true)

local Dupetab1 = DupeTab:section('Dupe',true)
local Dupetab2 = DupeTab:section('SoldSign Dupe',true)

local Woodtab1 = WoodTab:section('Get tree',true)
local Woodtab2 = WoodTab:section('Mod tree',true)
local Woodtab3 = WoodTab:section('Tree',true)

local Trollingtab1 = Trollingtab:section('Trolling',true)
--


--#endregion


 --#region Home
local Label = Home1:Label("Applebox#0001, Gamer, becky#0001, billybob123")

Home2:Keybind("Toggle UI", Enum.KeyCode[getgenv().Settings.keyuiToggle], function(Value)
    getgenv().Settings.keyuiToggle = Value
    ToggleUILib()
    SaveSettings()
end)

Home2:Button('Reset config', function()
  delfile("Butter.txt")
end)

LoadSettings()

Home2:Toggle('Devlogs', '', getgenv().Settings.Devlogs, function(Value)
    if Value == "" then
    getgenv().SettingsDevlogs = true
    else
    getgenv().Settings.Devlogs = Value
    SaveSettings()
    end
end)


RBGR = Home1:Slider('R', '', getgenv().Settings.theR, 0, 255,false, function(Value)
getgenv().Settings.theR = Value
end)

RBGG = Home1:Slider('G', '', getgenv().Settings.theG, 0, 255,false, function(Value)
getgenv().SettingstheG = Value
end)

RBGB = Home1:Slider('B', '', getgenv().Settings.theB, 0, 255,false, function(Value)
getgenv().SettingstheB = Value
end)

Home1:Button('Set', function()
GameMenuTheme(Color3.fromRGB(25, 25, 25), Color3.fromRGB(getgenv().Settings.theR,getgenv().SettingstheG,getgenv().SettingstheB))
end)
  

Home1:Button('Save', function()
SaveSettings()
end)

Home2:Button('Rejoin', function()
    game:GetService("TeleportService"):Teleport(game.PlaceId,game:GetService("Players").LocalPlayer)
end)



--#endregion


 --#region Player

---MOVE SPEED STUFF
 getgenv().ison = true

 Nspeed = 16
 
 NSspeed = 65
 
 Player1:Slider('Walkspeed', 'WalspeedSlider', 16, 16, 250,false, function(Value)
 if getgenv().ison == true then
   Nspeed = Value
   getgenv().Speed = Value
   Walkspeed()
 else
   getgenv().SprintSpeed = getgenv().Speed
   Nspeed = Value
   getgenv().Speed = Value
   Walkspeed()
 end
 end)

 Player1:Slider('Jump Power', 'JumpPowerSlider', 50, 50, 1000,false, function(Value)
    JumpPower(Value)
end)
 
 SprintSpeedsets = Player1:Slider('Sprintspeed', 'Speed', 35, 16, 250,false, function(Value)
 getgenv().Settings.SprintSpeednums = Value
 NSspeed = Value
 if getgenv().ison == false then
 
 else
   getgenv().SprintSpeed = Value
 end
 end)
--




flyspeedsets = Player1:Slider('Flight Speed', 'Flight Slider', 50, 30, 250,false, function(Value)
    maxspeed = Value
end)

Player1:Keybind("ClickToTp keybind", Enum.KeyCode.LeftControl, function(Value)
  getgenv().Key = Value
end)



Player2:Toggle('Sprint', '', true, function(Value)
    getgenv().ison = Value
    if not Value then
    getgenv().SprintSpeed = Nspeed
    end
    
    if Value then
    getgenv().SprintSpeed = NSspeed
    end
end)

Player2:Toggle('Flight' ,'', true, function(Value)
    FlyingEnabled = Value
end)
FlyingEnabled = true


Player2:Keybind("Flight keybind", Enum.KeyCode.Q, function(Value)
  Flyingkey = string.lower(Value)
end)

Player2:Toggle('Infinite Jump', 'infj', false, function(Value)
  InfiniteJump(Value)
end)

Player2:Toggle('NoClip', '', false, function(Value)
  NoClip(Value)
end)

Player2:Toggle('Anti AFK', '', true, function(Value)
  AntiAFK(Value)
end)
    
Player2:Toggle('Light', '', false, function(Value)
  Light(Value)
end)

clicktotp()
--[[Player2:Toggle('ClickToTp', '', true, function(Value)
getgenv().clicktp = Value
clicktotp()
end)--]]

Player2:Button('Safe death', function()
    game.Players.LocalPlayer.Character.Head:Remove()
end)

---










--#endregion


 --#region Teleport

Teleports1:Dropdown("Teleport to waypoints", "Select...", {"The Den", "Lighthouse", "Safari", "Bridge", "Bob's Shack", "EndTimes Cave", "The Swamp", "The Cabin", "Volcano", "Boxed Cars", "Tiaga Peak", "Land Store", "Link's Logic", "Palm Island", "Palm Island 2", "Palm Island 3", "Fine Art Shop", "SnowGlow Biome", "Cave", "Shrine Of Sight", "Fancy Furnishings", "Docks", "Strange Man", "Wood Dropoff", "Snow Biome", "Wood RUs", "Green Box", "Spawn", "Cherry Meadow", "Bird Cave",}, function(Value)
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = WaypointsPositions[Value]
  return
end)

Teleports1:Dropdown("Teleport to Player", "Select...", GetPlrs(), function(Value)
  TeleportToPlayer(Value)
  return
end)

Teleports1:Dropdown("Teleport to Player Base", "Select...", GetPlrs(), function(Value)
  TeleportToBase(Value)
  return
end)
--#endregion


 --#region Tools

tools1:Toggle('Custom Dragger', '', false, function(Value)
  CustomDragger = Value
end)
Dragger()

tools1:Button('BTools', function()
  BTools()
end)


--#endregion


--#region Keybinds
CAMisEnabled = false
    
function toggleFeature()
  CAMisEnabled = not CAMisEnabled
  if CAMisEnabled then
    camon()
  else
    camoff()
  end
end

-- Connect the function to a keybind
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
if gameProcessedEvent then return end -- Ignore input if another part of the game is using it
if input.KeyCode == Enum.KeyCode.C then
  toggleFeature()
end
end)


--#endregion


 --#region World
WorldTab1:Toggle('Day', '', false, function(Value)
  AlwaysDay = Value
end)
  
WorldTab1:Toggle('Night', '',false, function(Value)
  AlwaysNight = Value
end)
  
WorldTab1:Toggle('No Fog', '', getgenv().Settings.nofogst, function(Value)
  NoFog = Value
end)

WorldTab1:Toggle('Shadows', '', true, function(Value)
  game:GetService("Lighting").GlobalShadows = Value
end)

WorldTab2:Button('Better Water', function()
  Betterwater()
end)

WorldTab2:Toggle('Walk On Water', '', false, function(Value)
  WalkOnWater(Value)
end)

WorldTab2:Toggle('Remove Water', '', false, function(Value)
  RemoveWater(Value)
end)
--#endregion


--#region Timers
local watercar = Timers1:Label("Ferry Departure:")

local Furnituretimer = Timers1:Label("")

local CarStore = Timers1:Label("")


--#endregion


--#region Slot
slottt = Slott1:Slider('Slot Number', '', 1, 1, 6,false, function(Value)
  slot2NUM = Value
end)

skil = Slott1:Toggle('Fast Load', '', false, function(state)
  skipLoading = state
end)

Slott1:Button('Load Base', function()
  LoadSlot(slot2NUM)
end)

Slott2:Button('Free Land', function()
  FreeLand()
end)

Slott2:Button('Max Land', function()
  MaxLand()
end)

Slott2:Button('Sell Sold Sign', function()
  SellSoldSign()
end)

function SlotNames()
if isfile('ButtersSlotNames.cfg') then
  local DefaultSlotNames = {}

  DefaultSlotNames[tostring(FPlayer)] = {

      Slot1 = SSlot1,
      Slot2 = SSlot2,
      Slot3 = SSlot3,
      Slot4 = SSlot4,
      Slot5 = SSlot5,
      Slot6 = SSlot6

  }

writefile('ButtersSlotNames.cfg', HttpService:JSONEncode(DefaultSlotNames))

end
end


local SlotNamesOld = HttpService:JSONDecode(readfile('ButtersSlotNames.cfg'))
    

SSlot1 = SlotNamesOld[tostring(FPlayer)].Slot1
Slott3:Textbox('Slot1', '', SlotNamesOld[tostring(FPlayer)].Slot1, function(Value)
SSlot1 = Value
end)


SSlot2 = SlotNamesOld[tostring(FPlayer)].Slot2
Slott3:Textbox('Slot2', '', SlotNamesOld[tostring(FPlayer)].Slot2, function(Value)
SSlot2 = Value
end)

SSlot3 = SlotNamesOld[tostring(FPlayer)].Slot3
Slott3:Textbox('Slot3', '', SlotNamesOld[tostring(FPlayer)].Slot3, function(Value)
SSlot3 = Value
end)

SSlot4 = SlotNamesOld[tostring(FPlayer)].Slot4
Slott3:Textbox('Slot4', '', SlotNamesOld[tostring(FPlayer)].Slot4, function(Value)
SSlot4 = Value
end)

SSlot5 = SlotNamesOld[tostring(FPlayer)].Slot5
Slott3:Textbox('Slot5', '', SlotNamesOld[tostring(FPlayer)].Slot5, function(Value)
SSlot5 = Value
end)

SSlot6 = SlotNamesOld[tostring(FPlayer)].Slot6
Slott3:Textbox('Slot6', '', SlotNamesOld[tostring(FPlayer)].Slot6, function(Value)
SSlot6 = Value
end)

Slott3:Button('Save Names', function()
SlotNames()
end)

task.spawn(function()
  --while task.wait(0.5) do
  while task.wait() do
  watercar.Text = "Ferry Departure: " .. tostring(game:GetService("Workspace").Ferry.TimeToDeparture.Value) .. " Seconds"
  if fancytimer == 1 then Furnituretimer.Text = "FurnitureStore is Open" else Furnituretimer.Text = "FurnitureStore is Closed" end  
  if Boxedcars == 1 then CarStore.Text = "CarStore is Open" else CarStore.Text = "CarStore is Closed" end
  if isfile('ButtersSlotNames.cfg') then
    for i,v in pairs(FPlayer.PlayerGui.LoadSaveGUI.SlotList.Main:GetDescendants()) do
      if v.Name == "SlotName" then
      if v.Text == "Slot 1" then
      v.Text = SSlot1
      elseif v.Text == "Slot 2" then
      v.Text = SSlot2
      elseif v.Text == "Slot 3" then
      v.Text = SSlot3
      elseif v.Text == "Slot 4" then
      v.Text = SSlot4
      elseif v.Text == "Slot 5" then
      v.Text = SSlot5
      elseif v.Text == "Slot 6" then
      v.Text = SSlot6
      end
      end
      end
     end
    end
end)

--#endregion


--#region Dupe
            
Dupetab1:Slider('How many Dupes', '', 0, 0, 30,false, function(Value)
AxeDupeAmount = Value
end)

Dupetab1:Slider('Slot number', '', 0, 0, 6,false, function(Value)
slotnumberr = Value
end)

Dupetab1:Slider('Wait Time', '', 0, 0, 10,false, function(Value)
timewhitt = Value
end)

Dupetab1:Button('Dupe Inventory', function()
Dupe(slotnumberr,AxeDupeAmount,timewhitt)
end)






Dupetab1:Button('Count your Axes', function()
CountAxesL()
end)


Dupetab1:Button('DropAxes', function()
    DropAllTools()
end)



Dupetab2:Dropdown('Main', "Select...", GetPlrs(), function(Value)
    getgenv().Nameforsingdupe = Value
end)

Dupetab2:Slider('Best slot', '', 1, 1, 6,false, function(Value)
    getgenv().bestnummfordupe = Value
end)


Dupetab2:Toggle('Start', '', false, function(Value)
    getgenv().SoldSignAutoFarm = Value
    startnewdupe()
end)

Dupetab2:Button('Count SoldSigns', function()
Signstuff()
end)
--#endregion


--#region Autobuy
Autobuy1:Slider('Amount', '', 1, 1, 100,false, function(Value)
  AutoBuyAmount = Value
  end)

  AOpenbox = false

Autobuy1:Toggle('Open box', '', false, function(Value)
  AOpenbox = Value
end)
  
Autobuy1:Dropdown("Select Item", "Select...", GrabShopItems(), function(Value)
  ItemToBuy = string.split(Value," - ")[1]
      return
end)
  
Autobuy1:Button("Phurchase Selected Item(s)", function()
  AutoBuy(ItemToBuy,AutoBuyAmount,AOpenbox)
end)

Autobuy1:Button("Phurchase All Blueprints", function()
    for i,v in next, GetBlueprints() do
    AutoBuy(v,1,true,true)
    end
end)
  
Autobuy1:Button("Abort Phurchasing", function()
  AbortAutoBuy = true
end)
  
  
Autobuy2:Button("Toll Bridge", function()
  Pay(15)
end)
  
  Autobuy2:Button("Ferry Ticket", function()
  Pay(13)
end)
  
Autobuy2:Button("Power Of Ease", function()
  Pay(3)
end)
--#endregion


--#region Vehicle
Vehicle1:Slider('Vehicle speed', '', 1, 1, 5,false, function(Value)
VehicleSpeed(Value)
end)

Vehicle1:Button('Flip Vehicle', function()
FlipVehcile()
end)

Vehicle2:Dropdown('Car Colors', "Select...", {"Medium stone grey","Sand green","Sand red","Faded green","Dark grey metallic","Dark grey","Earth yellow","Earth orange","Silver","Brick yellow","Dark red","Hot pink",}, function(Value)
SelectedSpawnColor = tostring(Value)
end)

Vehicle2:Button('Start Vehicle Spawner', function()
notifications:message{Title = "Butter",Description = "Press a vehicle pad",Icon = 6023426926}
VehicleSpawner(SelectedSpawnColor)
end)
  
Vehicle2:Button('Abort Vehicle Spawner', function()
AbortVehicleSpawner = true
end)
--#endregion


 --#region Sort
if canusefastsorter == true then
Sorter1:Slider('X', '', 0, 0, 15,false, function(Value)
  XXXSort = Value
end)

Sorter1:Slider('Y', '', 0, 0, 15,false, function(Value)
  YYYSort = Value
end)

Sorter1:Slider('Z', '', 0, 0, 15,false, function(Value)
  ZZZSort = Value
end)

speedtaavb = Sorter1:Toggle('Ping speed', '', false, function(Value)
    if Value then
    sortTPspeed = GetPing()
    else
    sortTPspeed = 0.1
    end
 end)

local sortnum = 0

local sortnoryes = 0.1


Sorter1:Slider('Speed', '', 0.1, 0.1, 1,true, function(Value)
    speedtaavb:SetState(false)
    sortTPspeed = Value
end)

sortPlayer = game.Players.LocalPlayer.Character.Name

Sorter1:Dropdown("Player", "Select...", GetPlrs(), function(Value)
    sortPlayer = Value
end)

getgenv().sortsortcancel = false

Sorter1:Button("Stop", function()
  getgenv().sortsortcancel = true
end)

sortTPspeed = 0.1

local Label = Sorter1:Label("Meant for private servers")



function sort()
XXSort = XXXSort
YYSort = YYYSort
ZZSort = ZZZSort
getgenv().sortsortcancel = false
local thethinname

local partsorting;
local RRSort = 0
local sortstate = 1
local sortbox;
local Newsort;

local Mouse = game.Players.LocalPlayer:GetMouse()

whynodis = Mouse.Button1Down:connect(function()

    local Player = game:GetService("Players").LocalPlayer 
    local selection = Instance.new("SelectionBox")
    local Mouse = Player:GetMouse()
    if not Mouse.Target then return end
    if sortstate == 1 and tostring(Mouse.Target) == "Square" then return end
        if sortstate == 1 and Mouse.Target.Name == "Main" or Mouse.Target.Name == "WoodSection" then
            thethinname = Mouse.Target.Name
            partsorting = Mouse.Target
                if Mouse.Target.Parent:FindFirstChild("PurchasedBoxItemName") then 
                    Newsort = "PurchasedBoxItemName"
                else
                    Newsort = "ItemName"
                end
                selection.Color3 = Color3.new(0, 172, 240)
                selection.Parent = Mouse.Target
                selection.Adornee = selection.Parent
            local MainItem = selection.Adornee.Parent
                sortstate = 2
                wait(0.5)
                selection:Destroy()
                sortbox = Instance.new("Part", Workspace)
                
                sortbox.Size = Vector3.new(((MainItem[thethinname].Size.x + sortnoryes)*XXSort),MainItem[thethinname].Size.y*YYSort,((MainItem[thethinname].Size.z+ sortnoryes)*ZZSort))

                sortbox.Color = Color3.new(0, 1, 2)
                sortbox.Transparency = 0.3
                sortbox.CanCollide = false
                sortbox.Anchored = true
                sortbox.Material = "ForceField"
                Mouse.TargetFilter = sortbox
        while sortbox do
            if sortstate ~= 3 and Mouse.Target and Mouse.Target.Parent then
                local Mouseclick = Mouse.Hit
                CFrame.new(Mouse.Hit.X, Mouse.Hit.Y , Mouse.Hit.Z)
                sortbox.Position = CFrame.new(Mouse.Hit.X+((XXSort/2)*MainItem[thethinname].Size.x), Mouse.Hit.Y +((YYSort/2)*MainItem[thethinname].Size.y + 0.01) , Mouse.Hit.z+((ZZSort/2)*MainItem[thethinname].Size.z)) * Vector3.new(0,0.0,0)
                wait()
            end
            wait()
        end 
      
        elseif sortstate == 2 then
sortstate = 3
camon()
sorttertime = tick()	

local itemstacklist = {}

    print("please work")
    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position,game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(1, 0, 0))
    task.wait()
    local oldpos =  game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
    local cf = sortbox.CFrame - Vector3.new(sortbox.Size.X/2, sortbox.Size.Y/2, sortbox.Size.Z/2) --oldpos * CFrame.Angles(0, 0, 0)-- + Vector3.new(5, -1, 0)
    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = cf
    if partsorting.Name == thethinname then
        if partsorting.Parent.Parent.Name == "PlayerModels" then
            if partsorting.Parent:FindFirstChild("Owner") and tostring(partsorting.Parent.Owner.Value) == sortPlayer then
                for i,v in pairs(game:GetService("Workspace").PlayerModels:GetDescendants()) do
                    if not getgenv().sortsortcancel then
                        if v.Name == thethinname then
                            if v.Parent.Name == partsorting.Parent.Name then
                                if v.Color == partsorting.Color then
                                    if v.Parent:FindFirstChild("Owner") and tostring(v.Parent.Owner.Value) == sortPlayer then
                                        if RRSort < (XXSort * YYSort * ZZSort) then
                                            if (XXXSort * YYYSort * ZZZSort) > #itemstacklist then
                                            table.insert(itemstacklist, v)
                                            end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        
    for i,v in pairs(itemstacklist) do
        local cf2 = cf + Vector3.new((v.Size.X/2) + 0.1, v.Size.Y - 1, (v.Size.Z/2) + 0.1)
        print("stacking",v.Parent.Name)
        if not v.Parent.PrimaryPart then
            print("setting primary part")
            v.Parent.PrimaryPart = v.Parent:FindFirstChild(thethinname)
        end
        while ((v.Position - cf2.Position).Magnitude) >= 3 and not getgenv().sortsortcancel do
                    --game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position + Vector3.new(0, 0, v.Size.Z + 3),v.Position + Vector3.new(1, 0, 0))


            local Freeze, Pos = Instance.new("BodyVelocity", v), Instance.new("BodyPosition", v)
            Freeze.Velocity = Vector3.new(0, 0, 0)
            Freeze.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            Freeze.P = 9000
            Pos.MaxForce = Vector3.new(0,0,0)
            Pos.P = 100000
                                        

        
                                                
            --v.Velocity = Vector3.new(0,0,0)
            
            
            while not isnetworkowner(v) and not getgenv().sortsortcancel do  -- get network ownership
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position + Vector3.new(0, 0, v.Size.Z + 3),v.Position + Vector3.new(1, 0, 0))
                --v.Velocity = Vector3.new(0,0,0)
                game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.Parent)
                task.wait()
            end
            
            
            game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.Parent)



            --v.Velocity = Vector3.new(0,0,0)
            --v.CFrame = cf2
            v:PivotTo(cf2)
            
            wait(sortTPspeed)
            

            spawn(function()
            wait(5)
            Freeze:Destroy()
            Pos:Destroy()
            end)
        
            end
            RRSort = RRSort + 1

            spawn(function()
            nummath = XXXSort * YYYSort * ZZZSort
            ResizeBar(RRSort,#itemstacklist)
            end)
            
            --cf = cf + Vector3.new(v.Size.X + sortnum, 0, 0)
            --local cf = sortbox.CFrame * CFrame.new(-sortbox.Size.X/2, -sortbox.Size.Y/2, -sortbox.Size.Z/2) * CFrame.Angles(-math.rad(rotation), 0, 0)

            cf = cf + Vector3.new(v.Size.X + sortnum, 0, 0)
            if math.floor(RRSort/XXSort) == RRSort/XXSort then
                cf = cf - Vector3.new((v.Size.X + sortnum) * XXSort, 0, -v.Size.Z - sortnum)
            end
            
            if math.floor(RRSort/(ZZSort * XXSort)) == RRSort/(ZZSort * XXSort) then
                cf = cf - Vector3.new(0, -v.Size.Y - sortnum, (v.Size.Z + sortnum) * ZZSort)
            end
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
        end
    sortbox:Destroy()
    camoff()
    MainItem = nil
    sortstate = 0
    notifications:message{Title = "Butter",Description = "Done in ".. string.format('%.1fs', tick() - sorttertime),Icon = 6023426926}
    whynodis:Disconnect()
    end
end)
end


Sorter1:Button("start", function()
notifications:message{Title = "Butter",Description = "Press an item you want to sort",Icon = 6023426926}
sort()
end)

end
--#endregion


 --#region bad sort
if canusefastsorter == false then
        
  Sorter1:Slider('X', '', 0, 0, 15,false, function(Value)
      XXXSort = Value
  end)
    
  Sorter1:Slider('Y', '', 0, 0, 15,false, function(Value)
      YYYSort = Value
  end)
    
  Sorter1:Slider('Z', '', 0, 0, 15,false, function(Value)
      ZZZSort = Value
  end)


  Sorter1:Slider('Speed', '', 0.1, 0.1, 1,true, function(Value)
      sortTPspeed = Value
  end)
    
  local sortnum = 0
    
  local sortnoryes = 0.1
    
  sortPlayer = game.Players.LocalPlayer.Character.Name

  Sorter1:Dropdown("Player", "Select...", GetPlrs(), function(Value)
      sortPlayer = Value
  end)

    
    
  getgenv().sortsortcancel = false
    
  Sorter1:Button("Stop", function()
      getgenv().sortsortcancel = true
  end)
   
  sortTPspeed = 0.1
   
local Label = Sorter1:Label("this is a worse version of the sorter")
local Label = Sorter1:Label("if you want the better version please buy synapse X or scriptware")


  function sort()
      XXSort = XXXSort
      YYSort = YYYSort
      ZZSort = ZZZSort
      getgenv().sortsortcancel = false
    
    local partsorting;
    local RRSort = 0
    local sortstate = 1
    local sortbox;
    local Newsort;
    
    local Mouse = game.Players.LocalPlayer:GetMouse()
    
    whynodisbad = Mouse.Button1Down:connect(function()
   
        local Player = game:GetService("Players").LocalPlayer 
        local selection = Instance.new("SelectionBox")
        local Mouse = Player:GetMouse()
        if not Mouse.Target then return end
        if sortstate== 1 and tostring(Mouse.Target) == "Square" then return end
            if sortstate == 1 and Mouse.Target.Name == "Main" or Mouse.Target.Name == "WoodSection" then
                thethinname = Mouse.Target.Name
                partsorting = Mouse.Target
                    if Mouse.Target.Parent:FindFirstChild("PurchasedBoxItemName") then 
                        Newsort = "PurchasedBoxItemName"
                    else
                        Newsort = "ItemName"
                    end
                    selection.Color3 = Color3.new(0, 172, 240)
                    selection.Parent = Mouse.Target
                    selection.Adornee = selection.Parent
                local MainItem = selection.Adornee.Parent
                    sortstate = 2
                    wait(0.5)
                    selection:Destroy()
                    sortbox = Instance.new("Part", Workspace)
    
                    sortbox.Size = Vector3.new(((MainItem[thethinname].Size.x + sortnoryes)*XXSort),MainItem[thethinname].Size.y*YYSort,((MainItem[thethinname].Size.z+ sortnoryes)*ZZSort))
                    sortbox.Color = Color3.new(0, 1, 2)
                    sortbox.Transparency = 0.3
                    sortbox.CanCollide = false
                    sortbox.Anchored = true
                    sortbox.Material = "ForceField"
                    Mouse.TargetFilter = sortbox
            while sortbox do
                if sortstate ~= 3 and Mouse.Target and Mouse.Target.Parent then
                      local Mouseclick = Mouse.Hit
                    CFrame.new(Mouse.Hit.X, Mouse.Hit.Y , Mouse.Hit.Z)
    
                    sortbox.Position = CFrame.new(Mouse.Hit.X+((XXSort/2)*MainItem[thethinname].Size.x), Mouse.Hit.Y +((YYSort/2)*MainItem[thethinname].Size.y + 0.01) , Mouse.Hit.z+((ZZSort/2)*MainItem[thethinname].Size.z)) * Vector3.new(0,0.0,0)
                    wait()
                end
                wait()
            end
            
            elseif sortstate == 2 then
                sortstate = 3
  camon()
  sorttertime = tick()
  
        print("please work")
        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position,game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(1, 0, 0))
        task.wait()
        local oldpos =  game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
        local cf = sortbox.CFrame - Vector3.new(sortbox.Size.X/2, sortbox.Size.Y/2, sortbox.Size.Z/2) --oldpos * CFrame.Angles(0, 0, 0)-- + Vector3.new(5, -1, 0)
        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = cf
        if partsorting.Name == thethinname then
            if partsorting.Parent.Parent.Name == "PlayerModels" then
                if partsorting.Parent:FindFirstChild("Owner") and tostring(partsorting.Parent.Owner.Value) == sortPlayer then
                    for i,v in pairs(game:GetService("Workspace").PlayerModels:GetDescendants()) do
                        if not getgenv().sortsortcancel then
                            if v.Name == thethinname then
                                if v.Parent.Name == partsorting.Parent.Name then
                                    if v.Color == partsorting.Color then
                                        if v.Parent:FindFirstChild("Owner") and tostring(v.Parent.Owner.Value) == sortPlayer then
                                            if RRSort < (XXSort * YYSort * ZZSort) then
                                                local cf2 = cf + Vector3.new((v.Size.X/2) + 0.1, v.Size.Y - 1, (v.Size.Z/2) + 0.1)
                                                print("stacking",v.Parent.Name)
                                                if not v.Parent.PrimaryPart then
                                                    print("setting primary part")
                                                    v.Parent.PrimaryPart = v.Parent:FindFirstChild(thethinname)
                                                end
                                                while ((v.Position - cf2.Position).Magnitude) >= 3 do
                                                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position + Vector3.new(0, 0, v.Size.Z + 3),v.Position + Vector3.new(1, 0, 0))
                                                    
                                                    
                                                       wait(sortTPspeed) -- MAKE SLIDER OR SOME SHIT (lag version)

                                                    
                                                    
                                                    local Freeze, Pos = Instance.new("BodyVelocity", v), Instance.new("BodyPosition", v)
                                                    Freeze.Velocity = Vector3.new(0, 0, 0)
                                                    Freeze.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                                                    Freeze.P = 9000
                                                    Pos.MaxForce = Vector3.new(0,0,0)
                                                    Pos.P = 100000
                                                    
                                                    game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.Parent) -- get network ownership
                                                    v.Parent:SetPrimaryPartCFrame(cf2)
                                                    
                                                    task.wait()
    
                                                    if getgenv().sortsortcancel then -- break loop lol
                                                        print('broke loop')
                                                        break
                                                    end
                                                   
                                                       wait(sortTPspeed) -- MAKE SLIDER OR SOME SHIT (lag version)

                                                    
                                                    spawn(function()
                                                        wait(5)
                                                        Freeze:Destroy()
                                                        Pos:Destroy()
                                                        end)
                                                    
                                                    end
                                                    RRSort = RRSort + 1
                                                    cf = cf + Vector3.new(v.Size.X + sortnum, 0, 0)
                                                    if math.floor(RRSort/XXSort) == RRSort/XXSort then
                                                        cf = cf - Vector3.new((v.Size.X + sortnum) * XXSort, 0, -v.Size.Z - sortnum)
                                                    end
                                                    
                                                    if math.floor(RRSort/(ZZSort * XXSort)) == RRSort/(ZZSort * XXSort) then
                                                        cf = cf - Vector3.new(0, -v.Size.Y - sortnum, (v.Size.Z + sortnum) * ZZSort)
                                                    end
                                                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            end
            sortbox:Destroy()
            camoff()
            MainItem = nil
            sortstate = 0
            whynodisbad:Disconnect()
            notifications:message{Title = "Butter",Description = "Done in ".. string.format('%.1fs', tick() - sorttertime),Icon = 6023426926}
            sortbox:Destroy()
    end)
    end

  Sorter1:Button("start", function()
  sort()
  end)





  end
--#endregion


 --#region wood
 
Woodtab1:Dropdown("Select Item", "Select...", {"Generic", "Walnut", "Cherry", "SnowGlow", "Oak", "Birch", "Koa", "Fir", "Volcano", "GreenSwampy", "CaveCrawler", "Palm", "GoldSwampy", "Frost", "Spooky", "LoneCave",}, function(Value)
  getTree = Value
end)

Woodtab1:Button("Bring Tree", function()
  BringTreetime = tick()
  for i = 1,sdasdsad do
  wait() 
  bringTree(getTree)
  ResizeBar(i,sdasdsad)
  end
  notifications:message{Title = "Butter",Description = "Done in ".. string.format('%.1fs', tick() - BringTreetime),Icon = 6023426926}
end)
  
  Woodtab1:Slider('Amount', '', 1, 1, 30,false, function(Value)
  sdasdsad = Value
  end)
  sdasdsad = 1

Woodtab1:Button("Abort", function()
  treestop = false
  wait(5)
  treestop = true
end)



Woodtab2:Button('Mod wood', function()
  notifications:message{Title = "Butter <font color='rgb(130, 220, 120)'>Enabled</font>",Description = "Click a cut tree.",Icon = 6023426926}
  Modwood()
end)


Woodtab3:Toggle('Cut Plank to one by one', '', false, function(Value)
  notifications:message{
      Title = "Butter",
      Description = "Click a plank cut one by one",
      Icon = 6023426926
  }
UnitCutter = Value
OneUnitCutter(Value)
end)

Woodtab3:Button('Dick Tree', function()
  notifications:message{
      Title = "Butter",
      Description = "Click a Tree to Cut",
      Icon = 6023426926
  }
  DicmemberTree()
end)

Woodtab3:Button("Bring All Logs", function()
  BringAllLogs()
  end)
  
Woodtab3:Button("Sell All Logs", function()
  SellAllLogs()
end)
--#endregion


 --#region Trolling
Trollingtab1:Toggle('ClearAllShopItems', '', false, function(Value)
  ClearAllShopItems = Value
  if Value then
      ClearShopItems()
  end
end)

Trollingtab1:Dropdown("Player", "Select...", GetPlrs(), function(Value)
plrselected = Value
end)

Trollingtab1:Button('BringPlayer', function()
  BringPlayer()
end)

Trollingtab1:Button('KillPlayer', function()
  KillPlayer()
end)

Trollingtab1:Toggle('AntiBlackList', '', false, function(Value)
if Value then
  AntiBL()
  else
  if islaoadfr then
  game.Players.LocalPlayer.Character.Head:Remove()
  end
  end
end)
islaoadfr = true
--#endregion


--#region math.random tips
task.spawn(function()
wait(5)
local tips = math.random(1,3)
if (tips == 1) then
  notifications:message{Title = "Did you know",Description = "I Love you",Icon = 6023426926}
elseif (tips == 2) then
  notifications:message{Title = "Did you know",Description = "Butter hub has a Discord server https://discord.gg/butterhub",Icon = 6023426926}
elseif (tips == 3) then
  notifications:message{Title = "Did you know",Description = "Butter hub is on its " .. version .. " version" ,Icon = 6023426926}
end
end)
--#endregion































